{
    "sourceFile": "functions/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1744626179391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744626491106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,67 @@\n-const functions = require('firebase-functions');\r\n-const admin = require('firebase-admin');\r\n-const nodemailer = require('nodemailer');\r\n-const cors = require('cors')({origin: true});\r\n-\r\n-admin.initializeApp();\r\n-\r\n-// Create a nodemailer transporter using Gmail\r\n-const transporter = nodemailer.createTransport({\r\n-  service: 'gmail',\r\n-  auth: {\r\n-    user: 'vivekxsingh2004@gmail.com',\r\n-    // You need to generate an app password from your Google Account\r\n-    // Go to Google Account > Security > 2-Step Verification > App passwords\r\n-    pass: 'your-app-password' // Replace with your app password\r\n-  }\r\n-});\r\n-\r\n-exports.sendConsultationEmail = functions.https.onCall(async (data, context) => {\r\n-  // Check if the user is authenticated\r\n-  if (!context.auth) {\r\n-    throw new functions.https.HttpsError(\r\n-      'unauthenticated',\r\n-      'User must be logged in to send consultation requests'\r\n-    );\r\n-  }\r\n-\r\n-  try {\r\n-    const mailOptions = {\r\n-      from: 'vivekxsingh2004@gmail.com',\r\n-      to: data.to,\r\n-      subject: `Medical Consultation Request from ${data.patientName}`,\r\n-      text: `\r\n-Medical Consultation Request\r\n-\r\n-From: ${data.patientName}\r\n-Email: ${data.patientEmail}\r\n-\r\n-Description of Medical Concern:\r\n-${data.description}\r\n-\r\n-This is an automated email sent from MediFlow App.\r\n-`,\r\n-      html: `\r\n-<h2>Medical Consultation Request</h2>\r\n-<p><strong>From:</strong> ${data.patientName}</p>\r\n-<p><strong>Email:</strong> ${data.patientEmail}</p>\r\n-<br>\r\n-<h3>Description of Medical Concern:</h3>\r\n-<p>${data.description}</p>\r\n-<br>\r\n-<p><em>This is an automated email sent from MediFlow App.</em></p>\r\n-`\r\n-    };\r\n-\r\n-    await transporter.sendMail(mailOptions);\r\n-    return { success: true, message: 'Email sent successfully' };\r\n-  } catch (error) {\r\n-    console.error('Error sending email:', error);\r\n-    throw new functions.https.HttpsError(\r\n-      'internal',\r\n-      'Error sending email',\r\n-      error\r\n-    );\r\n-  }\r\n-}); \n\\ No newline at end of file\n+/**\n+ * Import function triggers from their respective submodules:\n+ *\n+ * const {onCall} = require(\"firebase-functions/v2/https\");\n+ * const {onDocumentWritten} = require(\"firebase-functions/v2/firestore\");\n+ *\n+ * See a full list of supported triggers at https://firebase.google.com/docs/functions\n+ */\n+\n+const functions = require('firebase-functions');\n+const admin = require('firebase-admin');\n+const nodemailer = require('nodemailer');\n+\n+admin.initializeApp();\n+\n+// Create a nodemailer transporter using Gmail\n+const transporter = nodemailer.createTransport({\n+  service: 'gmail',\n+  auth: {\n+    user: 'nope3472@gmail.com', // Your Gmail\n+    // You need to generate an app password from your Google Account\n+    // Go to Google Account > Security > 2-Step Verification > App passwords\n+    pass: 'your-app-password' // Replace with your app password\n+  }\n+});\n+\n+// Create and deploy your first functions\n+// https://firebase.google.com/docs/functions/get-started\n+\n+// exports.helloWorld = onRequest((request, response) => {\n+//   logger.info(\"Hello logs!\", {structuredData: true});\n+//   response.send(\"Hello from Firebase!\");\n+// });\n+\n+exports.sendConsultationEmail = functions.https.onCall(async (data, context) => {\n+  // Check if the user is authenticated\n+  if (!context.auth) {\n+    throw new functions.https.HttpsError(\n+      'unauthenticated',\n+      'User must be logged in to send consultation requests'\n+    );\n+  }\n+\n+  try {\n+    const mailOptions = {\n+      from: 'nope3472@gmail.com',\n+      to: data.to,\n+      subject: `Medical Consultation Request from ${data.patientName}`,\n+      html: `\n+        <h2>Medical Consultation Request</h2>\n+        <p><strong>From:</strong> ${data.patientName}</p>\n+        <p><strong>Email:</strong> ${data.patientEmail}</p>\n+        <br>\n+        <h3>Description of Medical Concern:</h3>\n+        <p>${data.description}</p>\n+        <br>\n+        <p><em>This is an automated email sent from MediFlow App.</em></p>\n+      `\n+    };\n+\n+    await transporter.sendMail(mailOptions);\n+    return { success: true, message: 'Email sent successfully' };\n+  } catch (error) {\n+    console.error('Error sending email:', error);\n+    throw new functions.https.HttpsError('internal', 'Error sending email', error);\n+  }\n+});\n"
                },
                {
                    "date": 1744626651753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,10 @@\n // Create a nodemailer transporter using Gmail\n const transporter = nodemailer.createTransport({\n   service: 'gmail',\n   auth: {\n-    user: 'nope3472@gmail.com', // Your Gmail\n-    // You need to generate an app password from your Google Account\n-    // Go to Google Account > Security > 2-Step Verification > App passwords\n-    pass: 'your-app-password' // Replace with your app password\n+    user: 'nope3472@gmail.com',\n+    pass: 'PASTE_YOUR_16_CHARACTER_APP_PASSWORD_HERE' // Replace this with the app password you just generated\n   }\n });\n \n // Create and deploy your first functions\n"
                },
                {
                    "date": 1744626678110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n const transporter = nodemailer.createTransport({\n   service: 'gmail',\n   auth: {\n     user: 'nope3472@gmail.com',\n-    pass: 'PASTE_YOUR_16_CHARACTER_APP_PASSWORD_HERE' // Replace this with the app password you just generated\n+    pass: 'ytge soym cqay ffwl' // Replace this with the app password you just generated\n   }\n });\n \n // Create and deploy your first functions\n"
                },
                {
                    "date": 1744626732332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,21 +6,21 @@\n  *\n  * See a full list of supported triggers at https://firebase.google.com/docs/functions\n  */\n \n-const functions = require('firebase-functions');\n-const admin = require('firebase-admin');\n-const nodemailer = require('nodemailer');\n+const functions = require(\"firebase-functions\");\n+const admin = require(\"firebase-admin\");\n+const nodemailer = require(\"nodemailer\");\n \n admin.initializeApp();\n \n // Create a nodemailer transporter using Gmail\n const transporter = nodemailer.createTransport({\n-  service: 'gmail',\n+  service: \"gmail\",\n   auth: {\n-    user: 'nope3472@gmail.com',\n-    pass: 'ytge soym cqay ffwl' // Replace this with the app password you just generated\n-  }\n+    user: \"nope3472@gmail.com\",\n+    pass: \"ytge soym cqay ffwl\",\n+  },\n });\n \n // Create and deploy your first functions\n // https://firebase.google.com/docs/functions/get-started\n@@ -29,37 +29,43 @@\n //   logger.info(\"Hello logs!\", {structuredData: true});\n //   response.send(\"Hello from Firebase!\");\n // });\n \n-exports.sendConsultationEmail = functions.https.onCall(async (data, context) => {\n-  // Check if the user is authenticated\n-  if (!context.auth) {\n-    throw new functions.https.HttpsError(\n-      'unauthenticated',\n-      'User must be logged in to send consultation requests'\n-    );\n-  }\n+exports.sendConsultationEmail = functions.https.onCall(\n+  async (data, context) => {\n+    // Check if the user is authenticated\n+    if (!context.auth) {\n+      throw new functions.https.HttpsError(\n+        \"unauthenticated\",\n+        \"User must be logged in to send consultation requests\",\n+      );\n+    }\n \n-  try {\n-    const mailOptions = {\n-      from: 'nope3472@gmail.com',\n-      to: data.to,\n-      subject: `Medical Consultation Request from ${data.patientName}`,\n-      html: `\n-        <h2>Medical Consultation Request</h2>\n-        <p><strong>From:</strong> ${data.patientName}</p>\n-        <p><strong>Email:</strong> ${data.patientEmail}</p>\n-        <br>\n-        <h3>Description of Medical Concern:</h3>\n-        <p>${data.description}</p>\n-        <br>\n-        <p><em>This is an automated email sent from MediFlow App.</em></p>\n-      `\n-    };\n+    try {\n+      const mailOptions = {\n+        from: \"nope3472@gmail.com\",\n+        to: data.to,\n+        subject: `Medical Consultation Request from ${data.patientName}`,\n+        html: `\n+          <h2>Medical Consultation Request</h2>\n+          <p><strong>From:</strong> ${data.patientName}</p>\n+          <p><strong>Email:</strong> ${data.patientEmail}</p>\n+          <br>\n+          <h3>Description of Medical Concern:</h3>\n+          <p>${data.description}</p>\n+          <br>\n+          <p><em>This is an automated email sent from MediFlow App.</em></p>\n+        `,\n+      };\n \n-    await transporter.sendMail(mailOptions);\n-    return { success: true, message: 'Email sent successfully' };\n-  } catch (error) {\n-    console.error('Error sending email:', error);\n-    throw new functions.https.HttpsError('internal', 'Error sending email', error);\n-  }\n-});\n+      await transporter.sendMail(mailOptions);\n+      return {success: true, message: \"Email sent successfully\"};\n+    } catch (error) {\n+      console.error(\"Error sending email:\", error);\n+      throw new functions.https.HttpsError(\n+        \"internal\",\n+        \"Error sending email\",\n+        error,\n+      );\n+    }\n+  },\n+);\n"
                }
            ],
            "date": 1744626179391,
            "name": "Commit-0",
            "content": "const functions = require('firebase-functions');\r\nconst admin = require('firebase-admin');\r\nconst nodemailer = require('nodemailer');\r\nconst cors = require('cors')({origin: true});\r\n\r\nadmin.initializeApp();\r\n\r\n// Create a nodemailer transporter using Gmail\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: 'vivekxsingh2004@gmail.com',\r\n    // You need to generate an app password from your Google Account\r\n    // Go to Google Account > Security > 2-Step Verification > App passwords\r\n    pass: 'your-app-password' // Replace with your app password\r\n  }\r\n});\r\n\r\nexports.sendConsultationEmail = functions.https.onCall(async (data, context) => {\r\n  // Check if the user is authenticated\r\n  if (!context.auth) {\r\n    throw new functions.https.HttpsError(\r\n      'unauthenticated',\r\n      'User must be logged in to send consultation requests'\r\n    );\r\n  }\r\n\r\n  try {\r\n    const mailOptions = {\r\n      from: 'vivekxsingh2004@gmail.com',\r\n      to: data.to,\r\n      subject: `Medical Consultation Request from ${data.patientName}`,\r\n      text: `\r\nMedical Consultation Request\r\n\r\nFrom: ${data.patientName}\r\nEmail: ${data.patientEmail}\r\n\r\nDescription of Medical Concern:\r\n${data.description}\r\n\r\nThis is an automated email sent from MediFlow App.\r\n`,\r\n      html: `\r\n<h2>Medical Consultation Request</h2>\r\n<p><strong>From:</strong> ${data.patientName}</p>\r\n<p><strong>Email:</strong> ${data.patientEmail}</p>\r\n<br>\r\n<h3>Description of Medical Concern:</h3>\r\n<p>${data.description}</p>\r\n<br>\r\n<p><em>This is an automated email sent from MediFlow App.</em></p>\r\n`\r\n    };\r\n\r\n    await transporter.sendMail(mailOptions);\r\n    return { success: true, message: 'Email sent successfully' };\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    throw new functions.https.HttpsError(\r\n      'internal',\r\n      'Error sending email',\r\n      error\r\n    );\r\n  }\r\n}); "
        }
    ]
}
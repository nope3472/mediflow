{
    "sourceFile": "lib/chatbot.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1744534356434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744534533724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,5 +222,26 @@\n       );\r\n       sendMessage(chatMessage);\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n+  import 'package:flutter/material.dart';\r\n+\r\n+void showErrorDialog(String message, context) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: const Text('Error'),\r\n+          content: Text(message),\r\n+          actions: <Widget>[\r\n+            TextButton(\r\n+              child: const Text('Ok'),\r\n+              onPressed: () {\r\n+                Navigator.of(context).pop();\r\n+              },\r\n+            )\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744534575022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n   String wordsSpoken = \"\";\r\n   final SpeechToText speechToText = SpeechToText();\r\n   bool speechEnabled = false;\r\n   final TextEditingController _textController = TextEditingController();\r\n+  final ImagePicker _picker = ImagePicker();\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n@@ -55,9 +56,8 @@\n       print(\"Initializing speech recognition...\");\r\n       speechEnabled = await speechToText.initialize(\r\n         onError: (error) => print(\"Speech recognition error: $error\"),\r\n         onStatus: (status) => print(\"Speech recognition status: $status\"),\r\n-      \r\n       );\r\n       print(\"Speech recognition initialized. Enabled: $speechEnabled\");\r\n       setState(() {});\r\n     } catch (e) {\r\n@@ -89,9 +89,9 @@\n       setState(() {\r\n         wordsSpoken = \"Speech recognition not available\";\r\n       });\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        SnackBar(content: Text(\"Speech recognition not available. Please type your message.\")),\r\n+        const SnackBar(content: Text(\"Speech recognition not available. Please type your message.\")),\r\n       );\r\n     }\r\n   }\r\n \r\n@@ -123,10 +123,10 @@\n \r\n   final Gemini gemini = Gemini.instance;\r\n   List<ChatMessage> messages = [];\r\n \r\n-  ChatUser currentUser = ChatUser(id: \"0\", firstName: \"User\");\r\n-  ChatUser geminiUser = ChatUser(id: \"1\", firstName: \"Gemini\");\r\n+  ChatUser currentUser = const ChatUser(id: \"0\", firstName: \"User\");\r\n+  ChatUser geminiUser = const ChatUser(id: \"1\", firstName: \"Gemini\");\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n@@ -161,17 +161,43 @@\n                 child: Text(wordsSpoken),\r\n               ),\r\n               IconButton(\r\n                 onPressed: sendMediaMessage,\r\n-                icon: Icon(Icons.image),\r\n+                icon: const Icon(Icons.image),\r\n               ),\r\n             ],\r\n           ),\r\n         ),\r\n       ],\r\n     );\r\n   }\r\n \r\n+  Future<void> sendMediaMessage() async {\r\n+    try {\r\n+      final XFile? image = await _picker.pickImage(source: ImageSource.gallery);\r\n+      if (image != null) {\r\n+        ChatMessage chatMessage = ChatMessage(\r\n+          user: currentUser,\r\n+          createdAt: DateTime.now(),\r\n+          text: \"Image\",\r\n+          medias: [\r\n+            ChatMedia(\r\n+              url: image.path,\r\n+              fileName: image.name,\r\n+              type: MediaType.image,\r\n+            ),\r\n+          ],\r\n+        );\r\n+        sendMessage(chatMessage);\r\n+      }\r\n+    } catch (e) {\r\n+      print(\"Error picking image: $e\");\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        const SnackBar(content: Text(\"Error picking image\")),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n   void sendMessage(ChatMessage chatMessage) {\r\n     setState(() {\r\n       messages = [chatMessage, ...messages];\r\n     });\r\n@@ -181,9 +207,9 @@\n       if (chatMessage.medias?.isNotEmpty ?? false) {\r\n         images = [File(chatMessage.medias!.first.url).readAsBytesSync()];\r\n       }\r\n       gemini.streamGenerateContent(question, images: images).listen((event) {\r\n-        ChatMessage? lastMessage = messages.firstOrNull;\r\n+        ChatMessage? lastMessage = messages.isNotEmpty ? messages[0] : null;\r\n         if (lastMessage != null && lastMessage.user == geminiUser) {\r\n           lastMessage = messages.removeAt(0);\r\n           String response = event.content?.parts\r\n                   ?.fold(\"\", (previous, current) => \"$previous ${current.text}\") ??\r\n@@ -196,32 +222,22 @@\n           String response = event.content?.parts\r\n                   ?.fold(\"\", (previous, current) => \"$previous ${current.text}\") ??\r\n               \"\";\r\n           ChatMessage message = ChatMessage(\r\n-              user: geminiUser, createdAt: DateTime.now(), text: response);\r\n+            user: geminiUser,\r\n+            createdAt: DateTime.now(),\r\n+            text: response,\r\n+          );\r\n           setState(() {\r\n             messages = [message, ...messages];\r\n           });\r\n         }\r\n       });\r\n     } catch (e) {\r\n-      print(e);\r\n-    }\r\n-  }\r\n-\r\n-  void sendMediaMessage() async {\r\n-    ImagePicker picker = ImagePicker();\r\n-    XFile? file = await picker.pickImage(source: ImageSource.gallery);\r\n-    if (file != null) {\r\n-      ChatMessage chatMessage = ChatMessage(\r\n-        user: currentUser,\r\n-        createdAt: DateTime.now(),\r\n-        text: \"Describe this Picture?\",\r\n-        medias: [\r\n-          ChatMedia(url: file.path, fileName: \"\", type: MediaType.image)\r\n-        ],\r\n+      print(\"Error sending message: $e\");\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        const SnackBar(content: Text(\"Error sending message\")),\r\n       );\r\n-      sendMessage(chatMessage);\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1744534589995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,10 +129,10 @@\n \r\n   final Gemini gemini = Gemini.instance;\r\n   List<ChatMessage> messages = [];\r\n \r\n-  ChatUser currentUser = const ChatUser(id: \"0\", firstName: \"User\");\r\n-  ChatUser geminiUser = const ChatUser(id: \"1\", firstName: \"Gemini\");\r\n+  ChatUser currentUser = ChatUser(id: \"0\", firstName: \"User\");\r\n+  ChatUser geminiUser = ChatUser(id: \"1\", firstName: \"Gemini\");\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n@@ -215,23 +215,17 @@\n         ChatMessage? lastMessage = messages.isNotEmpty ? messages[0] : null;\r\n         if (lastMessage != null && lastMessage.user == geminiUser) {\r\n           lastMessage = messages.removeAt(0);\r\n           String response =\r\n-              event.content?.parts?.fold(\r\n-                \"\",\r\n-                (previous, current) => \"$previous ${current.text}\",\r\n-              ) ??\r\n+              event.content?.parts?.map((part) => part.text ?? \"\").join(\" \") ??\r\n               \"\";\r\n           lastMessage.text += response;\r\n           setState(() {\r\n             messages = [lastMessage!, ...messages];\r\n           });\r\n         } else {\r\n           String response =\r\n-              event.content?.parts?.fold(\r\n-                \"\",\r\n-                (previous, current) => \"$previous ${current.text}\",\r\n-              ) ??\r\n+              event.content?.parts?.map((part) => part.text ?? \"\").join(\" \") ??\r\n               \"\";\r\n           ChatMessage message = ChatMessage(\r\n             user: geminiUser,\r\n             createdAt: DateTime.now(),\r\n"
                }
            ],
            "date": 1744534356434,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\nimport 'dart:typed_data';\r\n\r\nimport 'package:dash_chat_2/dash_chat_2.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_gemini/flutter_gemini.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:speech_to_text/speech_to_text.dart';\r\nimport 'package:permission_handler/permission_handler.dart';\r\n\r\nclass Homepage extends StatefulWidget {\r\n  const Homepage({super.key});\r\n\r\n  @override\r\n  _HomepageState createState() => _HomepageState();\r\n}\r\n\r\nclass _HomepageState extends State<Homepage> {\r\n  String wordsSpoken = \"\";\r\n  final SpeechToText speechToText = SpeechToText();\r\n  bool speechEnabled = false;\r\n  final TextEditingController _textController = TextEditingController();\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _checkPermissions();\r\n  }\r\n\r\n  Future<void> _checkPermissions() async {\r\n    print(\"Checking microphone permission...\");\r\n    var status = await Permission.microphone.status;\r\n    print(\"Current microphone permission status: $status\");\r\n    \r\n    if (status.isDenied) {\r\n      print(\"Microphone permission is denied. Requesting permission...\");\r\n      status = await Permission.microphone.request();\r\n      print(\"Microphone permission request result: $status\");\r\n    }\r\n\r\n    if (status.isGranted) {\r\n      print(\"Microphone permission is granted. Initializing speech...\");\r\n      initSpeech();\r\n    } else {\r\n      print(\"Microphone permission is not granted. Speech recognition will not be available.\");\r\n      setState(() {\r\n        speechEnabled = false;\r\n        wordsSpoken = \"Microphone permission denied\";\r\n      });\r\n    }\r\n  }\r\n\r\n  void initSpeech() async {\r\n    try {\r\n      print(\"Initializing speech recognition...\");\r\n      speechEnabled = await speechToText.initialize(\r\n        onError: (error) => print(\"Speech recognition error: $error\"),\r\n        onStatus: (status) => print(\"Speech recognition status: $status\"),\r\n      \r\n      );\r\n      print(\"Speech recognition initialized. Enabled: $speechEnabled\");\r\n      setState(() {});\r\n    } catch (e) {\r\n      print(\"Error initializing speech recognition: $e\");\r\n      setState(() {\r\n        speechEnabled = false;\r\n        wordsSpoken = \"Error initializing speech recognition\";\r\n      });\r\n    }\r\n  }\r\n\r\n  void _startListening() async {\r\n    print(\"Attempting to start listening...\");\r\n    if (speechEnabled) {\r\n      try {\r\n        await speechToText.listen(onResult: _onSpeechResult);\r\n        setState(() {\r\n          wordsSpoken = \"Listening...\";\r\n        });\r\n        print(\"Started listening successfully\");\r\n      } catch (e) {\r\n        print(\"Error starting speech recognition: $e\");\r\n        setState(() {\r\n          wordsSpoken = \"Error starting speech recognition\";\r\n        });\r\n      }\r\n    } else {\r\n      print(\"Speech recognition not available\");\r\n      setState(() {\r\n        wordsSpoken = \"Speech recognition not available\";\r\n      });\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        SnackBar(content: Text(\"Speech recognition not available. Please type your message.\")),\r\n      );\r\n    }\r\n  }\r\n\r\n  void _stopListening() async {\r\n    print(\"Stopping speech recognition...\");\r\n    await speechToText.stop();\r\n    setState(() {\r\n      wordsSpoken = \"Stopped listening\";\r\n    });\r\n    print(\"Stopped listening\");\r\n  }\r\n\r\n  void _onSpeechResult(result) {\r\n    print(\"Speech result received: ${result.recognizedWords}\");\r\n    setState(() {\r\n      wordsSpoken = result.recognizedWords;\r\n      if (result.finalResult) {\r\n        print(\"Final result received. Sending as chat message.\");\r\n        ChatMessage chatMessage = ChatMessage(\r\n          user: currentUser,\r\n          createdAt: DateTime.now(),\r\n          text: wordsSpoken,\r\n        );\r\n        sendMessage(chatMessage);\r\n        wordsSpoken = \"\";\r\n      }\r\n    });\r\n  }\r\n\r\n  final Gemini gemini = Gemini.instance;\r\n  List<ChatMessage> messages = [];\r\n\r\n  ChatUser currentUser = ChatUser(id: \"0\", firstName: \"User\");\r\n  ChatUser geminiUser = ChatUser(id: \"1\", firstName: \"Gemini\");\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        centerTitle: true,\r\n        title: const Text('Gemini Chat'),\r\n      ),\r\n      body: buildUi(),\r\n    );\r\n  }\r\n\r\n  Widget buildUi() {\r\n    return Column(\r\n      children: [\r\n        Expanded(\r\n          child: DashChat(\r\n            currentUser: currentUser,\r\n            onSend: sendMessage,\r\n            messages: messages,\r\n          ),\r\n        ),\r\n        Padding(\r\n          padding: const EdgeInsets.all(8.0),\r\n          child: Row(\r\n            children: [\r\n              IconButton(\r\n                onPressed: speechToText.isListening ? _stopListening : _startListening,\r\n                icon: Icon(speechToText.isListening ? Icons.mic : Icons.mic_none),\r\n                color: speechToText.isListening ? Colors.red : null,\r\n              ),\r\n              Expanded(\r\n                child: Text(wordsSpoken),\r\n              ),\r\n              IconButton(\r\n                onPressed: sendMediaMessage,\r\n                icon: Icon(Icons.image),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void sendMessage(ChatMessage chatMessage) {\r\n    setState(() {\r\n      messages = [chatMessage, ...messages];\r\n    });\r\n    try {\r\n      String question = chatMessage.text;\r\n      List<Uint8List>? images;\r\n      if (chatMessage.medias?.isNotEmpty ?? false) {\r\n        images = [File(chatMessage.medias!.first.url).readAsBytesSync()];\r\n      }\r\n      gemini.streamGenerateContent(question, images: images).listen((event) {\r\n        ChatMessage? lastMessage = messages.firstOrNull;\r\n        if (lastMessage != null && lastMessage.user == geminiUser) {\r\n          lastMessage = messages.removeAt(0);\r\n          String response = event.content?.parts\r\n                  ?.fold(\"\", (previous, current) => \"$previous ${current.text}\") ??\r\n              \"\";\r\n          lastMessage.text += response;\r\n          setState(() {\r\n            messages = [lastMessage!, ...messages];\r\n          });\r\n        } else {\r\n          String response = event.content?.parts\r\n                  ?.fold(\"\", (previous, current) => \"$previous ${current.text}\") ??\r\n              \"\";\r\n          ChatMessage message = ChatMessage(\r\n              user: geminiUser, createdAt: DateTime.now(), text: response);\r\n          setState(() {\r\n            messages = [message, ...messages];\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      print(e);\r\n    }\r\n  }\r\n\r\n  void sendMediaMessage() async {\r\n    ImagePicker picker = ImagePicker();\r\n    XFile? file = await picker.pickImage(source: ImageSource.gallery);\r\n    if (file != null) {\r\n      ChatMessage chatMessage = ChatMessage(\r\n        user: currentUser,\r\n        createdAt: DateTime.now(),\r\n        text: \"Describe this Picture?\",\r\n        medias: [\r\n          ChatMedia(url: file.path, fileName: \"\", type: MediaType.image)\r\n        ],\r\n      );\r\n      sendMessage(chatMessage);\r\n    }\r\n  }\r\n}"
        }
    ]
}
{
    "sourceFile": "lib/register.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1744623750744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744631457785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:medi_flow_new/auth_service.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n@@ -13,9 +12,10 @@\n \r\n class _RegisterScreenState extends State<RegisterScreen> {\r\n   final TextEditingController emailController = TextEditingController();\r\n   final TextEditingController passwordController = TextEditingController();\r\n-  final TextEditingController confirmPasswordController = TextEditingController();\r\n+  final TextEditingController confirmPasswordController =\r\n+      TextEditingController();\r\n   final _formKey = GlobalKey<FormState>();\r\n   bool _isLoading = false;\r\n \r\n   @override\r\n@@ -32,9 +32,10 @@\n     setState(() => _isLoading = true);\r\n \r\n     try {\r\n       // Create user with email and password\r\n-      final userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(\r\n+      final userCredential =\r\n+          await FirebaseAuth.instance.createUserWithEmailAndPassword(\r\n         email: emailController.text.trim(),\r\n         password: passwordController.text.trim(),\r\n       );\r\n \r\n@@ -244,5 +245,5 @@\n         ),\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744632205284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n+import 'package:medi_flow_new/auth_service.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({super.key});\r\n@@ -15,8 +16,9 @@\n   final TextEditingController passwordController = TextEditingController();\r\n   final TextEditingController confirmPasswordController =\r\n       TextEditingController();\r\n   final _formKey = GlobalKey<FormState>();\r\n+  final _authService = AuthService();\r\n   bool _isLoading = false;\r\n \r\n   @override\r\n   void dispose() {\r\n@@ -32,21 +34,20 @@\n     setState(() => _isLoading = true);\r\n \r\n     try {\r\n       // Create user with email and password\r\n-      final userCredential =\r\n-          await FirebaseAuth.instance.createUserWithEmailAndPassword(\r\n-        email: emailController.text.trim(),\r\n-        password: passwordController.text.trim(),\r\n+      final userCredential = await _authService.signInWithEmailAndPassword(\r\n+        emailController.text.trim(),\r\n+        passwordController.text.trim(),\r\n       );\r\n \r\n       if (mounted) {\r\n         // Navigate to home dashboard\r\n         Navigator.pushReplacement(\r\n           context,\r\n           MaterialPageRoute(\r\n             builder: (context) => HomeDashboard(\r\n-              userName: userCredential.user?.displayName ?? 'User',\r\n+              userName: userCredential?.user?.displayName ?? 'User',\r\n             ),\r\n           ),\r\n         );\r\n       }\r\n"
                },
                {
                    "date": 1744632218261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     setState(() => _isLoading = true);\r\n \r\n     try {\r\n       // Create user with email and password\r\n-      final userCredential = await _authService.signInWithEmailAndPassword(\r\n+      final userCredential = await _authService.createUserWithEmailAndPassword(\r\n         emailController.text.trim(),\r\n         passwordController.text.trim(),\r\n       );\r\n \r\n"
                },
                {
                    "date": 1744632469624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,9 @@\n       );\r\n \r\n       if (mounted) {\r\n         // Navigate to home dashboard\r\n-        Navigator.pushReplacement(\r\n-          context,\r\n+        Navigator.of(context).pushReplacement(\r\n           MaterialPageRoute(\r\n             builder: (context) => HomeDashboard(\r\n               userName: userCredential?.user?.displayName ?? 'User',\r\n             ),\r\n"
                },
                {
                    "date": 1744632520239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,51 +2,52 @@\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n import 'dart:developer' as developer;\r\n+import 'package:medi_flow_new/login_screen.dart'; // Added for direct navigation to LoginScreen\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({super.key});\r\n-\r\n+  \r\n   @override\r\n   State<RegisterScreen> createState() => _RegisterScreenState();\r\n }\r\n-\r\n+  \r\n class _RegisterScreenState extends State<RegisterScreen> {\r\n   final TextEditingController emailController = TextEditingController();\r\n   final TextEditingController passwordController = TextEditingController();\r\n-  final TextEditingController confirmPasswordController =\r\n-      TextEditingController();\r\n+  final TextEditingController confirmPasswordController = TextEditingController();\r\n   final _formKey = GlobalKey<FormState>();\r\n   final _authService = AuthService();\r\n   bool _isLoading = false;\r\n-\r\n+  \r\n   @override\r\n   void dispose() {\r\n     emailController.dispose();\r\n     passwordController.dispose();\r\n     confirmPasswordController.dispose();\r\n     super.dispose();\r\n   }\r\n-\r\n+  \r\n   Future<void> _register() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n-\r\n+  \r\n     setState(() => _isLoading = true);\r\n-\r\n+  \r\n     try {\r\n       // Create user with email and password\r\n       final userCredential = await _authService.createUserWithEmailAndPassword(\r\n         emailController.text.trim(),\r\n         passwordController.text.trim(),\r\n       );\r\n-\r\n-      if (mounted) {\r\n-        // Navigate to home dashboard\r\n-        Navigator.of(context).pushReplacement(\r\n+  \r\n+      if (mounted && userCredential != null) {\r\n+        // Navigate to home dashboard and remove registration screen\r\n+        Navigator.pushReplacement(\r\n+          context,\r\n           MaterialPageRoute(\r\n             builder: (context) => HomeDashboard(\r\n-              userName: userCredential?.user?.displayName ?? 'User',\r\n+              userName: userCredential.user?.displayName ?? 'User',\r\n             ),\r\n           ),\r\n         );\r\n       }\r\n@@ -83,9 +84,9 @@\n         setState(() => _isLoading = false);\r\n       }\r\n     }\r\n   }\r\n-\r\n+  \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       backgroundColor: Colors.white,\r\n@@ -101,13 +102,10 @@\n               key: _formKey,\r\n               child: Column(\r\n                 mainAxisAlignment: MainAxisAlignment.center,\r\n                 children: [\r\n-                  // App Logo or Medical Image\r\n                   Image.asset('assets/images/logo.webp', height: 150),\r\n                   const SizedBox(height: 20),\r\n-\r\n-                  // App Name\r\n                   const Text(\r\n                     \"MediFlow\",\r\n                     style: TextStyle(\r\n                       fontSize: 32,\r\n@@ -115,17 +113,13 @@\n                       color: Colors.teal,\r\n                     ),\r\n                   ),\r\n                   const SizedBox(height: 10),\r\n-\r\n-                  // Tagline\r\n                   const Text(\r\n                     \"Your Health, Your Flow\",\r\n                     style: TextStyle(fontSize: 16, color: Colors.grey),\r\n                   ),\r\n                   const SizedBox(height: 40),\r\n-\r\n-                  // Email TextField\r\n                   TextFormField(\r\n                     controller: emailController,\r\n                     decoration: InputDecoration(\r\n                       labelText: 'Email',\r\n@@ -145,10 +139,8 @@\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n-\r\n-                  // Password TextField\r\n                   TextFormField(\r\n                     controller: passwordController,\r\n                     obscureText: true,\r\n                     decoration: InputDecoration(\r\n@@ -168,10 +160,8 @@\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n-\r\n-                  // Confirm Password TextField\r\n                   TextFormField(\r\n                     controller: confirmPasswordController,\r\n                     obscureText: true,\r\n                     decoration: InputDecoration(\r\n@@ -191,10 +181,8 @@\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 24),\r\n-\r\n-                  // Register Button\r\n                   SizedBox(\r\n                     width: double.infinity,\r\n                     child: ElevatedButton(\r\n                       onPressed: _isLoading ? null : _register,\r\n@@ -220,17 +208,21 @@\n                             ),\r\n                     ),\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n-\r\n-                  // Login Option\r\n+                  // Login Option: Navigate directly to LoginScreen\r\n                   Row(\r\n                     mainAxisAlignment: MainAxisAlignment.center,\r\n                     children: [\r\n                       const Text(\"Already have an account?\"),\r\n                       TextButton(\r\n                         onPressed: () {\r\n-                          Navigator.pop(context);\r\n+                          Navigator.pushReplacement(\r\n+                            context,\r\n+                            MaterialPageRoute(\r\n+                              builder: (context) => const LoginScreen(),\r\n+                            ),\r\n+                          );\r\n                         },\r\n                         child: const Text(\r\n                           \"Login\",\r\n                           style: TextStyle(color: Colors.teal),\r\n"
                },
                {
                    "date": 1744632530373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n-import 'dart:developer' as developer;\r\n-import 'package:medi_flow_new/login_screen.dart'; // Added for direct navigation to LoginScreen\r\n+import 'dart:developer' as developer;// Added for direct navigation to LoginScreen\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({super.key});\r\n   \r\n"
                },
                {
                    "date": 1744632541126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n-import 'dart:developer' as developer;// Added for direct navigation to LoginScreen\r\n+import 'dart:developer' as developer;\r\n \r\n+import 'package:medi_flow_new/login.dart';// Added for direct navigation to LoginScreen\r\n+\r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({super.key});\r\n   \r\n   @override\r\n"
                },
                {
                    "date": 1744633177677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,58 +3,67 @@\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n import 'dart:developer' as developer;\r\n \r\n-import 'package:medi_flow_new/login.dart';// Added for direct navigation to LoginScreen\r\n+import 'package:medi_flow_new/login.dart'; // Added for direct navigation to LoginScreen\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({super.key});\r\n-  \r\n+\r\n   @override\r\n   State<RegisterScreen> createState() => _RegisterScreenState();\r\n }\r\n-  \r\n+\r\n class _RegisterScreenState extends State<RegisterScreen> {\r\n   final TextEditingController emailController = TextEditingController();\r\n   final TextEditingController passwordController = TextEditingController();\r\n-  final TextEditingController confirmPasswordController = TextEditingController();\r\n+  final TextEditingController confirmPasswordController =\r\n+      TextEditingController();\r\n   final _formKey = GlobalKey<FormState>();\r\n   final _authService = AuthService();\r\n   bool _isLoading = false;\r\n-  \r\n+\r\n   @override\r\n   void dispose() {\r\n     emailController.dispose();\r\n     passwordController.dispose();\r\n     confirmPasswordController.dispose();\r\n     super.dispose();\r\n   }\r\n-  \r\n+\r\n   Future<void> _register() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n-  \r\n+\r\n     setState(() => _isLoading = true);\r\n-  \r\n+\r\n     try {\r\n       // Create user with email and password\r\n       final userCredential = await _authService.createUserWithEmailAndPassword(\r\n         emailController.text.trim(),\r\n         passwordController.text.trim(),\r\n       );\r\n-  \r\n+\r\n       if (mounted && userCredential != null) {\r\n+        developer.log('Registration successful, navigating to dashboard');\r\n         // Navigate to home dashboard and remove registration screen\r\n-        Navigator.pushReplacement(\r\n-          context,\r\n+        Navigator.of(context).pushReplacement(\r\n           MaterialPageRoute(\r\n             builder: (context) => HomeDashboard(\r\n               userName: userCredential.user?.displayName ?? 'User',\r\n             ),\r\n           ),\r\n         );\r\n+      } else {\r\n+        developer.log('Registration failed: userCredential is null');\r\n+        if (mounted) {\r\n+          ScaffoldMessenger.of(context).showSnackBar(\r\n+            const SnackBar(content: Text('Registration failed. Please try again.')),\r\n+          );\r\n+        }\r\n       }\r\n     } on FirebaseAuthException catch (e) {\r\n-      developer.log('Registration error: ${e.code}', error: e);\r\n+      developer.log('Firebase Auth Error during registration: ${e.code}', error: e);\r\n+      developer.log('Error message: ${e.message}');\r\n       String message;\r\n       switch (e.code) {\r\n         case 'weak-password':\r\n           message = 'The password provided is too weak.';\r\n@@ -64,10 +73,13 @@\n           break;\r\n         case 'invalid-email':\r\n           message = 'The email address is not valid.';\r\n           break;\r\n+        case 'operation-not-allowed':\r\n+          message = 'Email/password accounts are not enabled.';\r\n+          break;\r\n         default:\r\n-          message = 'An error occurred during registration.';\r\n+          message = 'An error occurred during registration: ${e.message}';\r\n       }\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           SnackBar(content: Text(message)),\r\n@@ -76,18 +88,18 @@\n     } catch (e) {\r\n       developer.log('Unexpected error during registration: $e', error: e);\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('An unexpected error occurred')),\r\n+          SnackBar(content: Text('An unexpected error occurred: $e')),\r\n         );\r\n       }\r\n     } finally {\r\n       if (mounted) {\r\n         setState(() => _isLoading = false);\r\n       }\r\n     }\r\n   }\r\n-  \r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       backgroundColor: Colors.white,\r\n@@ -103,9 +115,8 @@\n               key: _formKey,\r\n               child: Column(\r\n                 mainAxisAlignment: MainAxisAlignment.center,\r\n                 children: [\r\n-                  Image.asset('assets/images/logo.webp', height: 150),\r\n                   const SizedBox(height: 20),\r\n                   const Text(\r\n                     \"MediFlow\",\r\n                     style: TextStyle(\r\n"
                },
                {
                    "date": 1744633201529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,14 +55,16 @@\n       } else {\r\n         developer.log('Registration failed: userCredential is null');\r\n         if (mounted) {\r\n           ScaffoldMessenger.of(context).showSnackBar(\r\n-            const SnackBar(content: Text('Registration failed. Please try again.')),\r\n+            const SnackBar(\r\n+                content: Text('Registration failed. Please try again.')),\r\n           );\r\n         }\r\n       }\r\n     } on FirebaseAuthException catch (e) {\r\n-      developer.log('Firebase Auth Error during registration: ${e.code}', error: e);\r\n+      developer.log('Firebase Auth Error during registration: ${e.code}',\r\n+          error: e);\r\n       developer.log('Error message: ${e.message}');\r\n       String message;\r\n       switch (e.code) {\r\n         case 'weak-password':\r\n"
                },
                {
                    "date": 1744633262807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,16 +43,25 @@\n       );\r\n \r\n       if (mounted && userCredential != null) {\r\n         developer.log('Registration successful, navigating to dashboard');\r\n-        // Navigate to home dashboard and remove registration screen\r\n-        Navigator.of(context).pushReplacement(\r\n-          MaterialPageRoute(\r\n-            builder: (context) => HomeDashboard(\r\n-              userName: userCredential.user?.displayName ?? 'User',\r\n+        developer.log('User ID: ${userCredential.user?.uid}');\r\n+        developer.log('User Email: ${userCredential.user?.email}');\r\n+        \r\n+        // Add a small delay to ensure state is properly updated\r\n+        await Future.delayed(const Duration(milliseconds: 500));\r\n+        \r\n+        if (mounted) {\r\n+          // Navigate to home dashboard and remove registration screen\r\n+          Navigator.of(context).pushAndRemoveUntil(\r\n+            MaterialPageRoute(\r\n+              builder: (context) => HomeDashboard(\r\n+                userName: userCredential.user?.displayName ?? 'User',\r\n+              ),\r\n             ),\r\n-          ),\r\n-        );\r\n+            (route) => false, // Remove all previous routes\r\n+          );\r\n+        }\r\n       } else {\r\n         developer.log('Registration failed: userCredential is null');\r\n         if (mounted) {\r\n           ScaffoldMessenger.of(context).showSnackBar(\r\n"
                },
                {
                    "date": 1744633381249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,60 @@\n import 'package:flutter/material.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n+import 'package:medi_flow_new/login_screen.dart';\r\n import 'dart:developer' as developer;\r\n \r\n-import 'package:medi_flow_new/login.dart'; // Added for direct navigation to LoginScreen\r\n-\r\n class RegisterScreen extends StatefulWidget {\r\n-  const RegisterScreen({super.key});\r\n-\r\n+  const RegisterScreen({Key? key}) : super(key: key);\r\n+    \r\n   @override\r\n-  State<RegisterScreen> createState() => _RegisterScreenState();\r\n+  _RegisterScreenState createState() => _RegisterScreenState();\r\n }\r\n-\r\n+    \r\n class _RegisterScreenState extends State<RegisterScreen> {\r\n-  final TextEditingController emailController = TextEditingController();\r\n-  final TextEditingController passwordController = TextEditingController();\r\n+  final _formKey = GlobalKey<FormState>();\r\n+  final TextEditingController emailController =\r\n+      TextEditingController();\r\n+  final TextEditingController passwordController =\r\n+      TextEditingController();\r\n   final TextEditingController confirmPasswordController =\r\n       TextEditingController();\r\n-  final _formKey = GlobalKey<FormState>();\r\n   final _authService = AuthService();\r\n   bool _isLoading = false;\r\n-\r\n+    \r\n   @override\r\n   void dispose() {\r\n     emailController.dispose();\r\n     passwordController.dispose();\r\n     confirmPasswordController.dispose();\r\n     super.dispose();\r\n   }\r\n-\r\n+    \r\n   Future<void> _register() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n-\r\n+        \r\n     setState(() => _isLoading = true);\r\n-\r\n+        \r\n     try {\r\n-      // Create user with email and password\r\n-      final userCredential = await _authService.createUserWithEmailAndPassword(\r\n-        emailController.text.trim(),\r\n-        passwordController.text.trim(),\r\n+      final userCredential =\r\n+          await _authService.createUserWithEmailAndPassword(\r\n+        emailController.text,\r\n+        passwordController.text,\r\n       );\r\n-\r\n       if (mounted && userCredential != null) {\r\n-        developer.log('Registration successful, navigating to dashboard');\r\n-        developer.log('User ID: ${userCredential.user?.uid}');\r\n-        developer.log('User Email: ${userCredential.user?.email}');\r\n-        \r\n-        // Add a small delay to ensure state is properly updated\r\n-        await Future.delayed(const Duration(milliseconds: 500));\r\n-        \r\n-        if (mounted) {\r\n-          // Navigate to home dashboard and remove registration screen\r\n-          Navigator.of(context).pushAndRemoveUntil(\r\n-            MaterialPageRoute(\r\n-              builder: (context) => HomeDashboard(\r\n-                userName: userCredential.user?.displayName ?? 'User',\r\n-              ),\r\n+        developer.log('User registered successfully: ${userCredential.user}');\r\n+        Navigator.pushReplacement(\r\n+          context,\r\n+          MaterialPageRoute(\r\n+            builder: (context) => HomeDashboard(\r\n+              userName: userCredential.user?.displayName ?? 'User',\r\n             ),\r\n-            (route) => false, // Remove all previous routes\r\n-          );\r\n-        }\r\n-      } else {\r\n-        developer.log('Registration failed: userCredential is null');\r\n-        if (mounted) {\r\n-          ScaffoldMessenger.of(context).showSnackBar(\r\n-            const SnackBar(\r\n-                content: Text('Registration failed. Please try again.')),\r\n-          );\r\n-        }\r\n+          ),\r\n+        );\r\n       }\r\n     } on FirebaseAuthException catch (e) {\r\n-      developer.log('Firebase Auth Error during registration: ${e.code}',\r\n-          error: e);\r\n-      developer.log('Error message: ${e.message}');\r\n+      developer.log('FirebaseAuthException during registration: ${e.code} - ${e.message}', error: e);\r\n       String message;\r\n       switch (e.code) {\r\n         case 'weak-password':\r\n           message = 'The password provided is too weak.';\r\n@@ -84,33 +64,28 @@\n           break;\r\n         case 'invalid-email':\r\n           message = 'The email address is not valid.';\r\n           break;\r\n-        case 'operation-not-allowed':\r\n-          message = 'Email/password accounts are not enabled.';\r\n-          break;\r\n         default:\r\n-          message = 'An error occurred during registration: ${e.message}';\r\n+          message = 'An error occurred during registration.';\r\n       }\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           SnackBar(content: Text(message)),\r\n         );\r\n       }\r\n-    } catch (e) {\r\n-      developer.log('Unexpected error during registration: $e', error: e);\r\n+    } catch (e, stacktrace) {\r\n+      developer.log('Unexpected error during registration: $e', error: e, stackTrace: stacktrace);\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('An unexpected error occurred: $e')),\r\n+          const SnackBar(content: Text('An unexpected error occurred')),\r\n         );\r\n       }\r\n     } finally {\r\n-      if (mounted) {\r\n-        setState(() => _isLoading = false);\r\n-      }\r\n+      if (mounted) setState(() => _isLoading = false);\r\n     }\r\n   }\r\n-\r\n+    \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       backgroundColor: Colors.white,\r\n@@ -119,146 +94,5 @@\n         backgroundColor: Colors.teal,\r\n       ),\r\n       body: SafeArea(\r\n         child: Center(\r\n-          child: SingleChildScrollView(\r\n-            padding: const EdgeInsets.symmetric(horizontal: 32),\r\n-            child: Form(\r\n-              key: _formKey,\r\n-              child: Column(\r\n-                mainAxisAlignment: MainAxisAlignment.center,\r\n-                children: [\r\n-                  const SizedBox(height: 20),\r\n-                  const Text(\r\n-                    \"MediFlow\",\r\n-                    style: TextStyle(\r\n-                      fontSize: 32,\r\n-                      fontWeight: FontWeight.bold,\r\n-                      color: Colors.teal,\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(height: 10),\r\n-                  const Text(\r\n-                    \"Your Health, Your Flow\",\r\n-                    style: TextStyle(fontSize: 16, color: Colors.grey),\r\n-                  ),\r\n-                  const SizedBox(height: 40),\r\n-                  TextFormField(\r\n-                    controller: emailController,\r\n-                    decoration: InputDecoration(\r\n-                      labelText: 'Email',\r\n-                      prefixIcon: const Icon(Icons.email),\r\n-                      border: OutlineInputBorder(\r\n-                        borderRadius: BorderRadius.circular(12),\r\n-                      ),\r\n-                    ),\r\n-                    keyboardType: TextInputType.emailAddress,\r\n-                    validator: (value) {\r\n-                      if (value == null || value.isEmpty) {\r\n-                        return 'Please enter your email';\r\n-                      }\r\n-                      if (!value.contains('@')) {\r\n-                        return 'Please enter a valid email';\r\n-                      }\r\n-                      return null;\r\n-                    },\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  TextFormField(\r\n-                    controller: passwordController,\r\n-                    obscureText: true,\r\n-                    decoration: InputDecoration(\r\n-                      labelText: 'Password',\r\n-                      prefixIcon: const Icon(Icons.lock),\r\n-                      border: OutlineInputBorder(\r\n-                        borderRadius: BorderRadius.circular(12),\r\n-                      ),\r\n-                    ),\r\n-                    validator: (value) {\r\n-                      if (value == null || value.isEmpty) {\r\n-                        return 'Please enter your password';\r\n-                      }\r\n-                      if (value.length < 6) {\r\n-                        return 'Password must be at least 6 characters';\r\n-                      }\r\n-                      return null;\r\n-                    },\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  TextFormField(\r\n-                    controller: confirmPasswordController,\r\n-                    obscureText: true,\r\n-                    decoration: InputDecoration(\r\n-                      labelText: 'Confirm Password',\r\n-                      prefixIcon: const Icon(Icons.lock),\r\n-                      border: OutlineInputBorder(\r\n-                        borderRadius: BorderRadius.circular(12),\r\n-                      ),\r\n-                    ),\r\n-                    validator: (value) {\r\n-                      if (value == null || value.isEmpty) {\r\n-                        return 'Please confirm your password';\r\n-                      }\r\n-                      if (value != passwordController.text) {\r\n-                        return 'Passwords do not match';\r\n-                      }\r\n-                      return null;\r\n-                    },\r\n-                  ),\r\n-                  const SizedBox(height: 24),\r\n-                  SizedBox(\r\n-                    width: double.infinity,\r\n-                    child: ElevatedButton(\r\n-                      onPressed: _isLoading ? null : _register,\r\n-                      style: ElevatedButton.styleFrom(\r\n-                        backgroundColor: Colors.teal,\r\n-                        padding: const EdgeInsets.symmetric(vertical: 14),\r\n-                        shape: RoundedRectangleBorder(\r\n-                          borderRadius: BorderRadius.circular(12),\r\n-                        ),\r\n-                      ),\r\n-                      child: _isLoading\r\n-                          ? const SizedBox(\r\n-                              height: 20,\r\n-                              width: 20,\r\n-                              child: CircularProgressIndicator(\r\n-                                color: Colors.white,\r\n-                                strokeWidth: 2,\r\n-                              ),\r\n-                            )\r\n-                          : const Text(\r\n-                              'Register',\r\n-                              style: TextStyle(fontSize: 16),\r\n-                            ),\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  // Login Option: Navigate directly to LoginScreen\r\n-                  Row(\r\n-                    mainAxisAlignment: MainAxisAlignment.center,\r\n-                    children: [\r\n-                      const Text(\"Already have an account?\"),\r\n-                      TextButton(\r\n-                        onPressed: () {\r\n-                          Navigator.pushReplacement(\r\n-                            context,\r\n-                            MaterialPageRoute(\r\n-                              builder: (context) => const LoginScreen(),\r\n-                            ),\r\n-                          );\r\n-                        },\r\n-                        child: const Text(\r\n-                          \"Login\",\r\n-                          style: TextStyle(color: Colors.teal),\r\n-                        ),\r\n-                      ),\r\n-                    ],\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+          child: SingleChildScrollView\r\n"
                },
                {
                    "date": 1744633392530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n+import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n-import 'package:medi_flow_new/login_screen.dart';\r\n+\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({Key? key}) : super(key: key);\r\n"
                },
                {
                    "date": 1744633408768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n-import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n-\r\n+import 'package:medi_flow_new/login_screen.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({Key? key}) : super(key: key);\r\n@@ -95,5 +94,151 @@\n         backgroundColor: Colors.teal,\r\n       ),\r\n       body: SafeArea(\r\n         child: Center(\r\n-          child: SingleChildScrollView\r\n+          child: SingleChildScrollView(\r\n+            padding: const EdgeInsets.symmetric(horizontal: 32),\r\n+            child: Form(\r\n+              key: _formKey,\r\n+              child: Column(\r\n+                mainAxisSize: MainAxisSize.min,\r\n+                children: [\r\n+                  Image.asset(\r\n+                    'assets/images/logo.webp',\r\n+                    height: 150,\r\n+                    errorBuilder: (context, error, stackTrace) => const SizedBox(\r\n+                      height: 150,\r\n+                      child: Center(child: Icon(Icons.error)),\r\n+                    ),\r\n+                  ),\r\n+                  const SizedBox(height: 20),\r\n+                  const Text(\r\n+                    \"MediFlow\",\r\n+                    style: TextStyle(\r\n+                      fontSize: 32,\r\n+                      fontWeight: FontWeight.bold,\r\n+                      color: Colors.teal,\r\n+                    ),\r\n+                  ),\r\n+                  const SizedBox(height: 10),\r\n+                  const Text(\r\n+                    \"Your Health, Your Flow\",\r\n+                    style: TextStyle(fontSize: 16, color: Colors.grey),\r\n+                  ),\r\n+                  const SizedBox(height: 40),\r\n+                  TextFormField(\r\n+                    controller: emailController,\r\n+                    decoration: InputDecoration(\r\n+                      labelText: 'Email',\r\n+                      prefixIcon: const Icon(Icons.email),\r\n+                      border: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                      ),\r\n+                    ),\r\n+                    keyboardType: TextInputType.emailAddress,\r\n+                    validator: (value) {\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please enter your email';\r\n+                      }\r\n+                      if (!value.contains('@')) {\r\n+                        return 'Please enter a valid email';\r\n+                      }\r\n+                      return null;\r\n+                    },\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  TextFormField(\r\n+                    controller: passwordController,\r\n+                    obscureText: true,\r\n+                    decoration: InputDecoration(\r\n+                      labelText: 'Password',\r\n+                      prefixIcon: const Icon(Icons.lock),\r\n+                      border: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                      ),\r\n+                    ),\r\n+                    validator: (value) {\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please enter your password';\r\n+                      }\r\n+                      if (value.length < 6) {\r\n+                        return 'Password must be at least 6 characters';\r\n+                      }\r\n+                      return null;\r\n+                    },\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  TextFormField(\r\n+                    controller: confirmPasswordController,\r\n+                    obscureText: true,\r\n+                    decoration: InputDecoration(\r\n+                      labelText: 'Confirm Password',\r\n+                      prefixIcon: const Icon(Icons.lock),\r\n+                      border: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                      ),\r\n+                    ),\r\n+                    validator: (value) {\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please confirm your password';\r\n+                      }\r\n+                      if (value != passwordController.text) {\r\n+                        return 'Passwords do not match';\r\n+                      }\r\n+                      return null;\r\n+                    },\r\n+                  ),\r\n+                  const SizedBox(height: 24),\r\n+                  SizedBox(\r\n+                    width: double.infinity,\r\n+                    child: ElevatedButton(\r\n+                      onPressed: _isLoading ? null : _register,\r\n+                      style: ElevatedButton.styleFrom(\r\n+                        backgroundColor: Colors.teal,\r\n+                        padding: const EdgeInsets.symmetric(vertical: 14),\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(12),\r\n+                        ),\r\n+                      ),\r\n+                      child: _isLoading\r\n+                          ? const SizedBox(\r\n+                              height: 20,\r\n+                              width: 20,\r\n+                              child: CircularProgressIndicator(\r\n+                                color: Colors.white,\r\n+                                strokeWidth: 2,\r\n+                              ),\r\n+                            )\r\n+                          : const Text(\r\n+                              'Register',\r\n+                              style: TextStyle(fontSize: 16),\r\n+                            ),\r\n+                    ),\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  Row(\r\n+                    mainAxisAlignment: MainAxisAlignment.center,\r\n+                    children: [\r\n+                      const Text(\"Already have an account?\"),\r\n+                      TextButton(\r\n+                        onPressed: () {\r\n+                          Navigator.pushReplacement(\r\n+                            context,\r\n+                            MaterialPageRoute(builder: (context) => const LoginScreen()),\r\n+                          );\r\n+                        },\r\n+                        child: const Text(\r\n+                          \"Login\",\r\n+                          style: TextStyle(color: Colors.teal),\r\n+                        ),\r\n+                      ),\r\n+                    ],\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1744633414903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n import 'package:medi_flow_new/login_screen.dart';\r\n"
                },
                {
                    "date": 1744633423449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n-import 'package:medi_flow_new/login_screen.dart';\r\n+\r\n import 'dart:developer' as developer;\r\n \r\n+import 'package:medi_flow_new/login.dart';\r\n+\r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({Key? key}) : super(key: key);\r\n     \r\n   @override\r\n"
                },
                {
                    "date": 1744633716930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,10 @@\n-import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n-\r\n+import 'package:medi_flow_new/login_screen.dart';\r\n import 'dart:developer' as developer;\r\n \r\n-import 'package:medi_flow_new/login.dart';\r\n-\r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({Key? key}) : super(key: key);\r\n     \r\n   @override\r\n@@ -15,14 +12,11 @@\n }\r\n     \r\n class _RegisterScreenState extends State<RegisterScreen> {\r\n   final _formKey = GlobalKey<FormState>();\r\n-  final TextEditingController emailController =\r\n-      TextEditingController();\r\n-  final TextEditingController passwordController =\r\n-      TextEditingController();\r\n-  final TextEditingController confirmPasswordController =\r\n-      TextEditingController();\r\n+  final TextEditingController emailController = TextEditingController();\r\n+  final TextEditingController passwordController = TextEditingController();\r\n+  final TextEditingController confirmPasswordController = TextEditingController();\r\n   final _authService = AuthService();\r\n   bool _isLoading = false;\r\n     \r\n   @override\r\n@@ -38,10 +32,9 @@\n         \r\n     setState(() => _isLoading = true);\r\n         \r\n     try {\r\n-      final userCredential =\r\n-          await _authService.createUserWithEmailAndPassword(\r\n+      final userCredential = await _authService.createUserWithEmailAndPassword(\r\n         emailController.text,\r\n         passwordController.text,\r\n       );\r\n       if (mounted && userCredential != null) {\r\n@@ -138,14 +131,10 @@\n                       ),\r\n                     ),\r\n                     keyboardType: TextInputType.emailAddress,\r\n                     validator: (value) {\r\n-                      if (value == null || value.isEmpty) {\r\n-                        return 'Please enter your email';\r\n-                      }\r\n-                      if (!value.contains('@')) {\r\n-                        return 'Please enter a valid email';\r\n-                      }\r\n+                      if (value == null || value.isEmpty) return 'Please enter your email';\r\n+                      if (!value.contains('@')) return 'Please enter a valid email';\r\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n@@ -159,14 +148,10 @@\n                         borderRadius: BorderRadius.circular(12),\r\n                       ),\r\n                     ),\r\n                     validator: (value) {\r\n-                      if (value == null || value.isEmpty) {\r\n-                        return 'Please enter your password';\r\n-                      }\r\n-                      if (value.length < 6) {\r\n-                        return 'Password must be at least 6 characters';\r\n-                      }\r\n+                      if (value == null || value.isEmpty) return 'Please enter your password';\r\n+                      if (value.length < 6) return 'Password must be at least 6 characters';\r\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n@@ -180,14 +165,10 @@\n                         borderRadius: BorderRadius.circular(12),\r\n                       ),\r\n                     ),\r\n                     validator: (value) {\r\n-                      if (value == null || value.isEmpty) {\r\n-                        return 'Please confirm your password';\r\n-                      }\r\n-                      if (value != passwordController.text) {\r\n-                        return 'Passwords do not match';\r\n-                      }\r\n+                      if (value == null || value.isEmpty) return 'Please confirm your password';\r\n+                      if (value != passwordController.text) return 'Passwords do not match';\r\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 24),\r\n"
                },
                {
                    "date": 1744633725341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n+import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n+import 'package:medi_flow_new/login.dart';\r\n import 'package:medi_flow_new/login_screen.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1744634323857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n+import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n import 'package:medi_flow_new/login.dart';\r\n-import 'package:medi_flow_new/login_screen.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({Key? key}) : super(key: key);\r\n"
                },
                {
                    "date": 1744634342621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,79 @@\n import 'package:flutter/material.dart';\r\n+import 'package:google_fonts/google_fonts.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/auth_service.dart';\r\n import 'package:medi_flow_new/login.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n   const RegisterScreen({Key? key}) : super(key: key);\r\n-    \r\n+\r\n   @override\r\n   _RegisterScreenState createState() => _RegisterScreenState();\r\n }\r\n-    \r\n+\r\n class _RegisterScreenState extends State<RegisterScreen> {\r\n   final _formKey = GlobalKey<FormState>();\r\n-  final TextEditingController emailController = TextEditingController();\r\n-  final TextEditingController passwordController = TextEditingController();\r\n-  final TextEditingController confirmPasswordController = TextEditingController();\r\n+  final _nameController = TextEditingController();\r\n+  final _emailController = TextEditingController();\r\n+  final _passwordController = TextEditingController();\r\n+  final _confirmPasswordController = TextEditingController();\r\n   final _authService = AuthService();\r\n   bool _isLoading = false;\r\n-    \r\n+  bool _obscurePassword = true;\r\n+  bool _obscureConfirmPassword = true;\r\n+\r\n   @override\r\n   void dispose() {\r\n-    emailController.dispose();\r\n-    passwordController.dispose();\r\n-    confirmPasswordController.dispose();\r\n+    _nameController.dispose();\r\n+    _emailController.dispose();\r\n+    _passwordController.dispose();\r\n+    _confirmPasswordController.dispose();\r\n     super.dispose();\r\n   }\r\n-    \r\n+\r\n   Future<void> _register() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n-        \r\n+\r\n+    if (_passwordController.text != _confirmPasswordController.text) {\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        const SnackBar(\r\n+          content: Text('Passwords do not match'),\r\n+          backgroundColor: Colors.red,\r\n+        ),\r\n+      );\r\n+      return;\r\n+    }\r\n+\r\n     setState(() => _isLoading = true);\r\n-        \r\n+\r\n     try {\r\n       final userCredential = await _authService.createUserWithEmailAndPassword(\r\n-        emailController.text,\r\n-        passwordController.text,\r\n+        _emailController.text,\r\n+        _passwordController.text,\r\n       );\r\n-      if (mounted && userCredential != null) {\r\n-        developer.log('User registered successfully: ${userCredential.user}');\r\n-        Navigator.pushReplacement(\r\n-          context,\r\n-          MaterialPageRoute(\r\n-            builder: (context) => HomeDashboard(\r\n-              userName: userCredential.user?.displayName ?? 'User',\r\n+\r\n+      if (userCredential != null) {\r\n+        // Update display name\r\n+        await userCredential.user?.updateDisplayName(_nameController.text);\r\n+\r\n+        developer.log('Registration successful: ${userCredential.user}');\r\n+        if (mounted) {\r\n+          Navigator.of(context).pushReplacement(\r\n+            MaterialPageRoute(\r\n+              builder: (context) => const LoginScreen(),\r\n             ),\r\n-          ),\r\n-        );\r\n+          );\r\n+          ScaffoldMessenger.of(context).showSnackBar(\r\n+            const SnackBar(\r\n+              content: Text('Registration successful! Please sign in.'),\r\n+              backgroundColor: Colors.green,\r\n+            ),\r\n+          );\r\n+        }\r\n       }\r\n     } on FirebaseAuthException catch (e) {\r\n-      developer.log('FirebaseAuthException during registration: ${e.code} - ${e.message}', error: e);\r\n       String message;\r\n       switch (e.code) {\r\n         case 'weak-password':\r\n           message = 'The password provided is too weak.';\r\n@@ -60,166 +81,317 @@\n         case 'email-already-in-use':\r\n           message = 'An account already exists for that email.';\r\n           break;\r\n         case 'invalid-email':\r\n-          message = 'The email address is not valid.';\r\n+          message = 'The email address is invalid.';\r\n           break;\r\n         default:\r\n-          message = 'An error occurred during registration.';\r\n+          message = 'An error occurred. Please try again.';\r\n       }\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text(message)),\r\n+          SnackBar(\r\n+            content: Text(message),\r\n+            backgroundColor: Colors.red,\r\n+          ),\r\n         );\r\n       }\r\n     } catch (e, stacktrace) {\r\n-      developer.log('Unexpected error during registration: $e', error: e, stackTrace: stacktrace);\r\n+      developer.log('Unexpected error during registration: $e',\r\n+          error: e, stackTrace: stacktrace);\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('An unexpected error occurred')),\r\n+          const SnackBar(\r\n+            content: Text('An unexpected error occurred'),\r\n+            backgroundColor: Colors.red,\r\n+          ),\r\n         );\r\n       }\r\n     } finally {\r\n-      if (mounted) setState(() => _isLoading = false);\r\n+      if (mounted) {\r\n+        setState(() => _isLoading = false);\r\n+      }\r\n     }\r\n   }\r\n-    \r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n-      backgroundColor: Colors.white,\r\n+      backgroundColor: const Color(0xFFF8F9FA),\r\n       appBar: AppBar(\r\n-        title: const Text('Register'),\r\n-        backgroundColor: Colors.teal,\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+        leading: IconButton(\r\n+          icon: const Icon(\r\n+            Icons.arrow_back_ios_new,\r\n+            color: Colors.black54,\r\n+          ),\r\n+          onPressed: () => Navigator.pop(context),\r\n+        ),\r\n       ),\r\n       body: SafeArea(\r\n-        child: Center(\r\n-          child: SingleChildScrollView(\r\n-            padding: const EdgeInsets.symmetric(horizontal: 32),\r\n+        child: SingleChildScrollView(\r\n+          child: Padding(\r\n+            padding: const EdgeInsets.symmetric(horizontal: 24.0),\r\n             child: Form(\r\n               key: _formKey,\r\n               child: Column(\r\n-                mainAxisSize: MainAxisSize.min,\r\n+                crossAxisAlignment: CrossAxisAlignment.stretch,\r\n                 children: [\r\n-                  Image.asset(\r\n-                    'assets/images/logo.webp',\r\n-                    height: 150,\r\n-                    errorBuilder: (context, error, stackTrace) => const SizedBox(\r\n-                      height: 150,\r\n-                      child: Center(child: Icon(Icons.error)),\r\n+                  // Logo and Title\r\n+                  Center(\r\n+                    child: Column(\r\n+                      children: [\r\n+                        Container(\r\n+                          padding: const EdgeInsets.all(16),\r\n+                          decoration: BoxDecoration(\r\n+                            color: const Color(0xFF2D9CDB),\r\n+                            borderRadius: BorderRadius.circular(16),\r\n+                          ),\r\n+                          child: const Icon(\r\n+                            Icons.medical_services_outlined,\r\n+                            size: 48,\r\n+                            color: Colors.white,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        Text(\r\n+                          'Create Account',\r\n+                          style: GoogleFonts.poppins(\r\n+                            fontSize: 28,\r\n+                            fontWeight: FontWeight.w600,\r\n+                            color: Colors.black87,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 8),\r\n+                        Text(\r\n+                          'Join MediFlow today',\r\n+                          style: GoogleFonts.poppins(\r\n+                            fontSize: 16,\r\n+                            color: Colors.black54,\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n                     ),\r\n                   ),\r\n-                  const SizedBox(height: 20),\r\n-                  const Text(\r\n-                    \"MediFlow\",\r\n-                    style: TextStyle(\r\n-                      fontSize: 32,\r\n-                      fontWeight: FontWeight.bold,\r\n-                      color: Colors.teal,\r\n+                  const SizedBox(height: 48),\r\n+\r\n+                  // Name Field\r\n+                  TextFormField(\r\n+                    controller: _nameController,\r\n+                    decoration: InputDecoration(\r\n+                      labelText: 'Full Name',\r\n+                      labelStyle: GoogleFonts.poppins(\r\n+                        color: Colors.black54,\r\n+                      ),\r\n+                      prefixIcon: const Icon(Icons.person_outline),\r\n+                      border: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                      ),\r\n+                      enabledBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFFE0E0E0)),\r\n+                      ),\r\n+                      focusedBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFF2D9CDB)),\r\n+                      ),\r\n                     ),\r\n+                    validator: (value) {\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please enter your name';\r\n+                      }\r\n+                      return null;\r\n+                    },\r\n                   ),\r\n-                  const SizedBox(height: 10),\r\n-                  const Text(\r\n-                    \"Your Health, Your Flow\",\r\n-                    style: TextStyle(fontSize: 16, color: Colors.grey),\r\n-                  ),\r\n-                  const SizedBox(height: 40),\r\n+                  const SizedBox(height: 16),\r\n+\r\n+                  // Email Field\r\n                   TextFormField(\r\n-                    controller: emailController,\r\n+                    controller: _emailController,\r\n                     decoration: InputDecoration(\r\n                       labelText: 'Email',\r\n-                      prefixIcon: const Icon(Icons.email),\r\n+                      labelStyle: GoogleFonts.poppins(\r\n+                        color: Colors.black54,\r\n+                      ),\r\n+                      prefixIcon: const Icon(Icons.email_outlined),\r\n                       border: OutlineInputBorder(\r\n                         borderRadius: BorderRadius.circular(12),\r\n                       ),\r\n+                      enabledBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFFE0E0E0)),\r\n+                      ),\r\n+                      focusedBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFF2D9CDB)),\r\n+                      ),\r\n                     ),\r\n                     keyboardType: TextInputType.emailAddress,\r\n                     validator: (value) {\r\n-                      if (value == null || value.isEmpty) return 'Please enter your email';\r\n-                      if (!value.contains('@')) return 'Please enter a valid email';\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please enter your email';\r\n+                      }\r\n+                      if (!value.contains('@')) {\r\n+                        return 'Please enter a valid email';\r\n+                      }\r\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n+\r\n+                  // Password Field\r\n                   TextFormField(\r\n-                    controller: passwordController,\r\n-                    obscureText: true,\r\n+                    controller: _passwordController,\r\n                     decoration: InputDecoration(\r\n                       labelText: 'Password',\r\n-                      prefixIcon: const Icon(Icons.lock),\r\n+                      labelStyle: GoogleFonts.poppins(\r\n+                        color: Colors.black54,\r\n+                      ),\r\n+                      prefixIcon: const Icon(Icons.lock_outline),\r\n+                      suffixIcon: IconButton(\r\n+                        icon: Icon(\r\n+                          _obscurePassword\r\n+                              ? Icons.visibility_outlined\r\n+                              : Icons.visibility_off_outlined,\r\n+                        ),\r\n+                        onPressed: () {\r\n+                          setState(() {\r\n+                            _obscurePassword = !_obscurePassword;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n                       border: OutlineInputBorder(\r\n                         borderRadius: BorderRadius.circular(12),\r\n                       ),\r\n+                      enabledBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFFE0E0E0)),\r\n+                      ),\r\n+                      focusedBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFF2D9CDB)),\r\n+                      ),\r\n                     ),\r\n+                    obscureText: _obscurePassword,\r\n                     validator: (value) {\r\n-                      if (value == null || value.isEmpty) return 'Please enter your password';\r\n-                      if (value.length < 6) return 'Password must be at least 6 characters';\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please enter your password';\r\n+                      }\r\n+                      if (value.length < 6) {\r\n+                        return 'Password must be at least 6 characters';\r\n+                      }\r\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n+\r\n+                  // Confirm Password Field\r\n                   TextFormField(\r\n-                    controller: confirmPasswordController,\r\n-                    obscureText: true,\r\n+                    controller: _confirmPasswordController,\r\n                     decoration: InputDecoration(\r\n                       labelText: 'Confirm Password',\r\n-                      prefixIcon: const Icon(Icons.lock),\r\n+                      labelStyle: GoogleFonts.poppins(\r\n+                        color: Colors.black54,\r\n+                      ),\r\n+                      prefixIcon: const Icon(Icons.lock_outline),\r\n+                      suffixIcon: IconButton(\r\n+                        icon: Icon(\r\n+                          _obscureConfirmPassword\r\n+                              ? Icons.visibility_outlined\r\n+                              : Icons.visibility_off_outlined,\r\n+                        ),\r\n+                        onPressed: () {\r\n+                          setState(() {\r\n+                            _obscureConfirmPassword = !_obscureConfirmPassword;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n                       border: OutlineInputBorder(\r\n                         borderRadius: BorderRadius.circular(12),\r\n                       ),\r\n+                      enabledBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFFE0E0E0)),\r\n+                      ),\r\n+                      focusedBorder: OutlineInputBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n+                        borderSide: const BorderSide(color: Color(0xFF2D9CDB)),\r\n+                      ),\r\n                     ),\r\n+                    obscureText: _obscureConfirmPassword,\r\n                     validator: (value) {\r\n-                      if (value == null || value.isEmpty) return 'Please confirm your password';\r\n-                      if (value != passwordController.text) return 'Passwords do not match';\r\n+                      if (value == null || value.isEmpty) {\r\n+                        return 'Please confirm your password';\r\n+                      }\r\n+                      if (value != _passwordController.text) {\r\n+                        return 'Passwords do not match';\r\n+                      }\r\n                       return null;\r\n                     },\r\n                   ),\r\n                   const SizedBox(height: 24),\r\n-                  SizedBox(\r\n-                    width: double.infinity,\r\n-                    child: ElevatedButton(\r\n-                      onPressed: _isLoading ? null : _register,\r\n-                      style: ElevatedButton.styleFrom(\r\n-                        backgroundColor: Colors.teal,\r\n-                        padding: const EdgeInsets.symmetric(vertical: 14),\r\n-                        shape: RoundedRectangleBorder(\r\n-                          borderRadius: BorderRadius.circular(12),\r\n-                        ),\r\n+\r\n+                  // Register Button\r\n+                  ElevatedButton(\r\n+                    onPressed: _isLoading ? null : _register,\r\n+                    style: ElevatedButton.styleFrom(\r\n+                      backgroundColor: const Color(0xFF2D9CDB),\r\n+                      foregroundColor: Colors.white,\r\n+                      padding: const EdgeInsets.symmetric(vertical: 16),\r\n+                      shape: RoundedRectangleBorder(\r\n+                        borderRadius: BorderRadius.circular(12),\r\n                       ),\r\n-                      child: _isLoading\r\n-                          ? const SizedBox(\r\n-                              height: 20,\r\n-                              width: 20,\r\n-                              child: CircularProgressIndicator(\r\n-                                color: Colors.white,\r\n-                                strokeWidth: 2,\r\n-                              ),\r\n-                            )\r\n-                          : const Text(\r\n-                              'Register',\r\n-                              style: TextStyle(fontSize: 16),\r\n+                    ),\r\n+                    child: _isLoading\r\n+                        ? const SizedBox(\r\n+                            height: 20,\r\n+                            width: 20,\r\n+                            child: CircularProgressIndicator(\r\n+                              strokeWidth: 2,\r\n+                              valueColor:\r\n+                                  AlwaysStoppedAnimation<Color>(Colors.white),\r\n                             ),\r\n-                    ),\r\n+                          )\r\n+                        : Text(\r\n+                            'Register',\r\n+                            style: GoogleFonts.poppins(\r\n+                              fontSize: 16,\r\n+                              fontWeight: FontWeight.w600,\r\n+                            ),\r\n+                          ),\r\n                   ),\r\n-                  const SizedBox(height: 16),\r\n+                  const SizedBox(height: 24),\r\n+\r\n+                  // Login Link\r\n                   Row(\r\n                     mainAxisAlignment: MainAxisAlignment.center,\r\n                     children: [\r\n-                      const Text(\"Already have an account?\"),\r\n+                      Text(\r\n+                        'Already have an account?',\r\n+                        style: GoogleFonts.poppins(\r\n+                          color: Colors.black54,\r\n+                        ),\r\n+                      ),\r\n                       TextButton(\r\n                         onPressed: () {\r\n-                          Navigator.pushReplacement(\r\n-                            context,\r\n-                            MaterialPageRoute(builder: (context) => const LoginScreen()),\r\n+                          Navigator.of(context).pushReplacement(\r\n+                            MaterialPageRoute(\r\n+                              builder: (context) => const LoginScreen(),\r\n+                            ),\r\n                           );\r\n                         },\r\n-                        child: const Text(\r\n-                          \"Login\",\r\n-                          style: TextStyle(color: Colors.teal),\r\n+                        child: Text(\r\n+                          'Sign In',\r\n+                          style: GoogleFonts.poppins(\r\n+                            color: const Color(0xFF2D9CDB),\r\n+                            fontWeight: FontWeight.w600,\r\n+                          ),\r\n                         ),\r\n                       ),\r\n                     ],\r\n                   ),\r\n+                  const SizedBox(height: 30),\r\n                 ],\r\n               ),\r\n             ),\r\n           ),\r\n"
                },
                {
                    "date": 1744652417073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:google_fonts/google_fonts.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:medi_flow_new/auth_service.dart';\r\n+import 'package:medi_flow_new/home_dashboard.dart';\r\n import 'package:medi_flow_new/login.dart';\r\n import 'dart:developer' as developer;\r\n \r\n class RegisterScreen extends StatefulWidget {\r\n@@ -17,12 +17,12 @@\n   final _nameController = TextEditingController();\r\n   final _emailController = TextEditingController();\r\n   final _passwordController = TextEditingController();\r\n   final _confirmPasswordController = TextEditingController();\r\n-  final _authService = AuthService();\r\n   bool _isLoading = false;\r\n   bool _obscurePassword = true;\r\n   bool _obscureConfirmPassword = true;\r\n+  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n \r\n   @override\r\n   void dispose() {\r\n     _nameController.dispose();\r\n@@ -47,62 +47,51 @@\n \r\n     setState(() => _isLoading = true);\r\n \r\n     try {\r\n-      final userCredential = await _authService.createUserWithEmailAndPassword(\r\n-        _emailController.text,\r\n-        _passwordController.text,\r\n+      // Create user with email and password\r\n+      final userCredential = await _auth.createUserWithEmailAndPassword(\r\n+        email: _emailController.text,\r\n+        password: _passwordController.text,\r\n       );\r\n \r\n-      if (userCredential != null) {\r\n-        // Update display name\r\n-        await userCredential.user?.updateDisplayName(_nameController.text);\r\n+      // Update user display name\r\n+      await userCredential.user?.updateDisplayName(_nameController.text);\r\n \r\n-        developer.log('Registration successful: ${userCredential.user}');\r\n-        if (mounted) {\r\n-          Navigator.of(context).pushReplacement(\r\n-            MaterialPageRoute(\r\n-              builder: (context) => const LoginScreen(),\r\n+      if (mounted) {\r\n+        Navigator.of(context).pushReplacement(\r\n+          MaterialPageRoute(\r\n+            builder: (context) => HomeDashboard(\r\n+              userName: _nameController.text,\r\n             ),\r\n-          );\r\n-          ScaffoldMessenger.of(context).showSnackBar(\r\n-            const SnackBar(\r\n-              content: Text('Registration successful! Please sign in.'),\r\n-              backgroundColor: Colors.green,\r\n-            ),\r\n-          );\r\n-        }\r\n+          ),\r\n+        );\r\n       }\r\n     } on FirebaseAuthException catch (e) {\r\n       String message;\r\n-      switch (e.code) {\r\n-        case 'weak-password':\r\n-          message = 'The password provided is too weak.';\r\n-          break;\r\n-        case 'email-already-in-use':\r\n-          message = 'An account already exists for that email.';\r\n-          break;\r\n-        case 'invalid-email':\r\n-          message = 'The email address is invalid.';\r\n-          break;\r\n-        default:\r\n-          message = 'An error occurred. Please try again.';\r\n+      if (e.code == 'weak-password') {\r\n+        message = 'The password provided is too weak';\r\n+      } else if (e.code == 'email-already-in-use') {\r\n+        message = 'An account already exists for that email';\r\n+      } else if (e.code == 'invalid-email') {\r\n+        message = 'The email address is invalid';\r\n+      } else {\r\n+        message = 'An error occurred: ${e.message}';\r\n       }\r\n+\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           SnackBar(\r\n             content: Text(message),\r\n             backgroundColor: Colors.red,\r\n           ),\r\n         );\r\n       }\r\n-    } catch (e, stacktrace) {\r\n-      developer.log('Unexpected error during registration: $e',\r\n-          error: e, stackTrace: stacktrace);\r\n+    } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-            content: Text('An unexpected error occurred'),\r\n+          SnackBar(\r\n+            content: Text('An error occurred: $e'),\r\n             backgroundColor: Colors.red,\r\n           ),\r\n         );\r\n       }\r\n"
                }
            ],
            "date": 1744623750744,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:medi_flow_new/auth_service.dart';\r\nimport 'package:medi_flow_new/home_dashboard.dart';\r\nimport 'dart:developer' as developer;\r\n\r\nclass RegisterScreen extends StatefulWidget {\r\n  const RegisterScreen({super.key});\r\n\r\n  @override\r\n  State<RegisterScreen> createState() => _RegisterScreenState();\r\n}\r\n\r\nclass _RegisterScreenState extends State<RegisterScreen> {\r\n  final TextEditingController emailController = TextEditingController();\r\n  final TextEditingController passwordController = TextEditingController();\r\n  final TextEditingController confirmPasswordController = TextEditingController();\r\n  final _formKey = GlobalKey<FormState>();\r\n  bool _isLoading = false;\r\n\r\n  @override\r\n  void dispose() {\r\n    emailController.dispose();\r\n    passwordController.dispose();\r\n    confirmPasswordController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _register() async {\r\n    if (!_formKey.currentState!.validate()) return;\r\n\r\n    setState(() => _isLoading = true);\r\n\r\n    try {\r\n      // Create user with email and password\r\n      final userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(\r\n        email: emailController.text.trim(),\r\n        password: passwordController.text.trim(),\r\n      );\r\n\r\n      if (mounted) {\r\n        // Navigate to home dashboard\r\n        Navigator.pushReplacement(\r\n          context,\r\n          MaterialPageRoute(\r\n            builder: (context) => HomeDashboard(\r\n              userName: userCredential.user?.displayName ?? 'User',\r\n            ),\r\n          ),\r\n        );\r\n      }\r\n    } on FirebaseAuthException catch (e) {\r\n      developer.log('Registration error: ${e.code}', error: e);\r\n      String message;\r\n      switch (e.code) {\r\n        case 'weak-password':\r\n          message = 'The password provided is too weak.';\r\n          break;\r\n        case 'email-already-in-use':\r\n          message = 'An account already exists for that email.';\r\n          break;\r\n        case 'invalid-email':\r\n          message = 'The email address is not valid.';\r\n          break;\r\n        default:\r\n          message = 'An error occurred during registration.';\r\n      }\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text(message)),\r\n        );\r\n      }\r\n    } catch (e) {\r\n      developer.log('Unexpected error during registration: $e', error: e);\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('An unexpected error occurred')),\r\n        );\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() => _isLoading = false);\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: Colors.white,\r\n      appBar: AppBar(\r\n        title: const Text('Register'),\r\n        backgroundColor: Colors.teal,\r\n      ),\r\n      body: SafeArea(\r\n        child: Center(\r\n          child: SingleChildScrollView(\r\n            padding: const EdgeInsets.symmetric(horizontal: 32),\r\n            child: Form(\r\n              key: _formKey,\r\n              child: Column(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: [\r\n                  // App Logo or Medical Image\r\n                  Image.asset('assets/images/logo.webp', height: 150),\r\n                  const SizedBox(height: 20),\r\n\r\n                  // App Name\r\n                  const Text(\r\n                    \"MediFlow\",\r\n                    style: TextStyle(\r\n                      fontSize: 32,\r\n                      fontWeight: FontWeight.bold,\r\n                      color: Colors.teal,\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 10),\r\n\r\n                  // Tagline\r\n                  const Text(\r\n                    \"Your Health, Your Flow\",\r\n                    style: TextStyle(fontSize: 16, color: Colors.grey),\r\n                  ),\r\n                  const SizedBox(height: 40),\r\n\r\n                  // Email TextField\r\n                  TextFormField(\r\n                    controller: emailController,\r\n                    decoration: InputDecoration(\r\n                      labelText: 'Email',\r\n                      prefixIcon: const Icon(Icons.email),\r\n                      border: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                      ),\r\n                    ),\r\n                    keyboardType: TextInputType.emailAddress,\r\n                    validator: (value) {\r\n                      if (value == null || value.isEmpty) {\r\n                        return 'Please enter your email';\r\n                      }\r\n                      if (!value.contains('@')) {\r\n                        return 'Please enter a valid email';\r\n                      }\r\n                      return null;\r\n                    },\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n\r\n                  // Password TextField\r\n                  TextFormField(\r\n                    controller: passwordController,\r\n                    obscureText: true,\r\n                    decoration: InputDecoration(\r\n                      labelText: 'Password',\r\n                      prefixIcon: const Icon(Icons.lock),\r\n                      border: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                      ),\r\n                    ),\r\n                    validator: (value) {\r\n                      if (value == null || value.isEmpty) {\r\n                        return 'Please enter your password';\r\n                      }\r\n                      if (value.length < 6) {\r\n                        return 'Password must be at least 6 characters';\r\n                      }\r\n                      return null;\r\n                    },\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n\r\n                  // Confirm Password TextField\r\n                  TextFormField(\r\n                    controller: confirmPasswordController,\r\n                    obscureText: true,\r\n                    decoration: InputDecoration(\r\n                      labelText: 'Confirm Password',\r\n                      prefixIcon: const Icon(Icons.lock),\r\n                      border: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                      ),\r\n                    ),\r\n                    validator: (value) {\r\n                      if (value == null || value.isEmpty) {\r\n                        return 'Please confirm your password';\r\n                      }\r\n                      if (value != passwordController.text) {\r\n                        return 'Passwords do not match';\r\n                      }\r\n                      return null;\r\n                    },\r\n                  ),\r\n                  const SizedBox(height: 24),\r\n\r\n                  // Register Button\r\n                  SizedBox(\r\n                    width: double.infinity,\r\n                    child: ElevatedButton(\r\n                      onPressed: _isLoading ? null : _register,\r\n                      style: ElevatedButton.styleFrom(\r\n                        backgroundColor: Colors.teal,\r\n                        padding: const EdgeInsets.symmetric(vertical: 14),\r\n                        shape: RoundedRectangleBorder(\r\n                          borderRadius: BorderRadius.circular(12),\r\n                        ),\r\n                      ),\r\n                      child: _isLoading\r\n                          ? const SizedBox(\r\n                              height: 20,\r\n                              width: 20,\r\n                              child: CircularProgressIndicator(\r\n                                color: Colors.white,\r\n                                strokeWidth: 2,\r\n                              ),\r\n                            )\r\n                          : const Text(\r\n                              'Register',\r\n                              style: TextStyle(fontSize: 16),\r\n                            ),\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n\r\n                  // Login Option\r\n                  Row(\r\n                    mainAxisAlignment: MainAxisAlignment.center,\r\n                    children: [\r\n                      const Text(\"Already have an account?\"),\r\n                      TextButton(\r\n                        onPressed: () {\r\n                          Navigator.pop(context);\r\n                        },\r\n                        child: const Text(\r\n                          \"Login\",\r\n                          style: TextStyle(color: Colors.teal),\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
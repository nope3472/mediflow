{
    "sourceFile": "lib/notifications_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744640434655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744640765110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:google_fonts/google_fonts.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import 'dart:convert';\r\n+import 'dart:developer' as developer;\r\n \r\n class NotificationsScreen extends StatefulWidget {\r\n   const NotificationsScreen({Key? key}) : super(key: key);\r\n \r\n@@ -21,32 +22,45 @@\n   }\r\n \r\n   Future<void> _loadNotifications() async {\r\n     try {\r\n+      setState(() => _isLoading = true);\r\n+      \r\n       final prefs = await SharedPreferences.getInstance();\r\n       final notificationsJson = prefs.getString('notifications') ?? '[]';\r\n+      developer.log('Loaded notifications JSON: $notificationsJson');\r\n+      \r\n       final List<dynamic> decoded = jsonDecode(notificationsJson);\r\n+      developer.log('Decoded notifications: $decoded');\r\n       \r\n       setState(() {\r\n         _notifications = List<Map<String, dynamic>>.from(decoded);\r\n         _isLoading = false;\r\n       });\r\n+      \r\n+      developer.log('Notifications count: ${_notifications.length}');\r\n     } catch (e) {\r\n+      developer.log('Error loading notifications: $e');\r\n       setState(() => _isLoading = false);\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-            content: Text('Error loading notifications'),\r\n+          SnackBar(\r\n+            content: Text('Error loading notifications: $e'),\r\n             backgroundColor: Colors.red,\r\n           ),\r\n         );\r\n       }\r\n     }\r\n   }\r\n \r\n   String _formatDateTime(String dateTimeStr) {\r\n-    final dateTime = DateTime.parse(dateTimeStr);\r\n-    return '${dateTime.day}/${dateTime.month}/${dateTime.year} at ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')}';\r\n+    try {\r\n+      final dateTime = DateTime.parse(dateTimeStr);\r\n+      return '${dateTime.day}/${dateTime.month}/${dateTime.year} at ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';\r\n+    } catch (e) {\r\n+      developer.log('Error formatting date: $e');\r\n+      return 'Invalid date';\r\n+    }\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n@@ -66,8 +80,14 @@\n         leading: IconButton(\r\n           icon: const Icon(Icons.arrow_back, color: Colors.black87),\r\n           onPressed: () => Navigator.pop(context),\r\n         ),\r\n+        actions: [\r\n+          IconButton(\r\n+            icon: const Icon(Icons.refresh, color: Colors.black87),\r\n+            onPressed: _loadNotifications,\r\n+          ),\r\n+        ],\r\n       ),\r\n       body: _isLoading\r\n           ? const Center(child: CircularProgressIndicator())\r\n           : _notifications.isEmpty\r\n@@ -90,83 +110,85 @@\n                       ),\r\n                     ],\r\n                   ),\r\n                 )\r\n-              : ListView.builder(\r\n-                  padding: const EdgeInsets.all(16),\r\n-                  itemCount: _notifications.length,\r\n-                  itemBuilder: (context, index) {\r\n-                    final notification = _notifications[index];\r\n-                    final bool isVideoConsultation = notification['type'] == 'video_consultation';\r\n-                    \r\n-                    return Card(\r\n-                      elevation: 0,\r\n-                      shape: RoundedRectangleBorder(\r\n-                        borderRadius: BorderRadius.circular(12),\r\n-                        side: const BorderSide(color: Color(0xFFE0E0E0)),\r\n-                      ),\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(16),\r\n-                        child: Column(\r\n-                          crossAxisAlignment: CrossAxisAlignment.start,\r\n-                          children: [\r\n-                            Row(\r\n-                              children: [\r\n-                                Container(\r\n-                                  padding: const EdgeInsets.all(8),\r\n-                                  decoration: BoxDecoration(\r\n-                                    color: const Color(0xFF2D9CDB).withOpacity(0.1),\r\n-                                    borderRadius: BorderRadius.circular(8),\r\n+              : RefreshIndicator(\r\n+                  onRefresh: _loadNotifications,\r\n+                  child: ListView.builder(\r\n+                    padding: const EdgeInsets.all(16),\r\n+                    itemCount: _notifications.length,\r\n+                    itemBuilder: (context, index) {\r\n+                      final notification = _notifications[index];\r\n+                      final bool isVideoConsultation = notification['type'] == 'video_consultation';\r\n+                      \r\n+                      return Card(\r\n+                        elevation: 0,\r\n+                        margin: const EdgeInsets.only(bottom: 16),\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(12),\r\n+                          side: const BorderSide(color: Color(0xFFE0E0E0)),\r\n+                        ),\r\n+                        child: Padding(\r\n+                          padding: const EdgeInsets.all(16),\r\n+                          child: Column(\r\n+                            crossAxisAlignment: CrossAxisAlignment.start,\r\n+                            children: [\r\n+                              Row(\r\n+                                children: [\r\n+                                  Container(\r\n+                                    padding: const EdgeInsets.all(8),\r\n+                                    decoration: BoxDecoration(\r\n+                                      color: const Color(0xFF2D9CDB).withOpacity(0.1),\r\n+                                      borderRadius: BorderRadius.circular(8),\r\n+                                    ),\r\n+                                    child: Icon(\r\n+                                      isVideoConsultation\r\n+                                          ? Icons.videocam_outlined\r\n+                                          : Icons.notifications_outlined,\r\n+                                      color: const Color(0xFF2D9CDB),\r\n+                                    ),\r\n                                   ),\r\n-                                  child: Icon(\r\n-                                    isVideoConsultation\r\n-                                        ? Icons.videocam_outlined\r\n-                                        : Icons.notifications_outlined,\r\n-                                    color: const Color(0xFF2D9CDB),\r\n-                                  ),\r\n-                                ),\r\n-                                const SizedBox(width: 12),\r\n-                                Expanded(\r\n-                                  child: Column(\r\n-                                    crossAxisAlignment: CrossAxisAlignment.start,\r\n-                                    children: [\r\n-                                      Text(\r\n-                                        isVideoConsultation\r\n-                                            ? 'Video Consultation Booked'\r\n-                                            : notification['title'] ?? 'Notification',\r\n-                                        style: GoogleFonts.poppins(\r\n-                                          fontSize: 16,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                          color: Colors.black87,\r\n+                                  const SizedBox(width: 12),\r\n+                                  Expanded(\r\n+                                    child: Column(\r\n+                                      crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                      children: [\r\n+                                        Text(\r\n+                                          notification['title'] ?? 'Notification',\r\n+                                          style: GoogleFonts.poppins(\r\n+                                            fontSize: 16,\r\n+                                            fontWeight: FontWeight.w600,\r\n+                                            color: Colors.black87,\r\n+                                          ),\r\n                                         ),\r\n-                                      ),\r\n-                                      const SizedBox(height: 4),\r\n-                                      Text(\r\n-                                        'Scheduled for: ${_formatDateTime(notification['dateTime'])}',\r\n-                                        style: GoogleFonts.poppins(\r\n-                                          fontSize: 14,\r\n-                                          color: Colors.black54,\r\n+                                        const SizedBox(height: 4),\r\n+                                        Text(\r\n+                                          'Scheduled for: ${_formatDateTime(notification['dateTime'])}',\r\n+                                          style: GoogleFonts.poppins(\r\n+                                            fontSize: 14,\r\n+                                            color: Colors.black54,\r\n+                                          ),\r\n                                         ),\r\n-                                      ),\r\n-                                    ],\r\n+                                      ],\r\n+                                    ),\r\n                                   ),\r\n-                                ),\r\n+                                ],\r\n+                              ),\r\n+                              if (notification['doctorName'] != null) ...[\r\n+                                const SizedBox(height: 12),\r\n+                                const Divider(),\r\n+                                const SizedBox(height: 12),\r\n+                                _buildInfoRow('Doctor', notification['doctorName']),\r\n+                                if (notification['specialization'] != null)\r\n+                                  _buildInfoRow('Specialization', notification['specialization']),\r\n+                                _buildInfoRow('Duration', '30 minutes'),\r\n                               ],\r\n-                            ),\r\n-                            if (notification['doctorName'] != null) ...[\r\n-                              const SizedBox(height: 12),\r\n-                              const Divider(),\r\n-                              const SizedBox(height: 12),\r\n-                              _buildInfoRow('Doctor', notification['doctorName']),\r\n-                              if (notification['specialization'] != null)\r\n-                                _buildInfoRow('Specialization', notification['specialization']),\r\n-                              _buildInfoRow('Duration', '30 minutes'),\r\n                             ],\r\n-                          ],\r\n+                          ),\r\n                         ),\r\n-                      ),\r\n-                    );\r\n-                  },\r\n+                      );\r\n+                    },\r\n+                  ),\r\n                 ),\r\n     );\r\n   }\r\n \r\n@@ -198,5 +220,5 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1744640434655,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport 'dart:convert';\r\n\r\nclass NotificationsScreen extends StatefulWidget {\r\n  const NotificationsScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\r\n}\r\n\r\nclass _NotificationsScreenState extends State<NotificationsScreen> {\r\n  List<Map<String, dynamic>> _notifications = [];\r\n  bool _isLoading = true;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadNotifications();\r\n  }\r\n\r\n  Future<void> _loadNotifications() async {\r\n    try {\r\n      final prefs = await SharedPreferences.getInstance();\r\n      final notificationsJson = prefs.getString('notifications') ?? '[]';\r\n      final List<dynamic> decoded = jsonDecode(notificationsJson);\r\n      \r\n      setState(() {\r\n        _notifications = List<Map<String, dynamic>>.from(decoded);\r\n        _isLoading = false;\r\n      });\r\n    } catch (e) {\r\n      setState(() => _isLoading = false);\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text('Error loading notifications'),\r\n            backgroundColor: Colors.red,\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  String _formatDateTime(String dateTimeStr) {\r\n    final dateTime = DateTime.parse(dateTimeStr);\r\n    return '${dateTime.day}/${dateTime.month}/${dateTime.year} at ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')}';\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: const Color(0xFFF8F9FA),\r\n      appBar: AppBar(\r\n        title: Text(\r\n          'Notifications',\r\n          style: GoogleFonts.poppins(\r\n            fontSize: 20,\r\n            fontWeight: FontWeight.w600,\r\n            color: Colors.black87,\r\n          ),\r\n        ),\r\n        backgroundColor: Colors.white,\r\n        elevation: 0,\r\n        leading: IconButton(\r\n          icon: const Icon(Icons.arrow_back, color: Colors.black87),\r\n          onPressed: () => Navigator.pop(context),\r\n        ),\r\n      ),\r\n      body: _isLoading\r\n          ? const Center(child: CircularProgressIndicator())\r\n          : _notifications.isEmpty\r\n              ? Center(\r\n                  child: Column(\r\n                    mainAxisAlignment: MainAxisAlignment.center,\r\n                    children: [\r\n                      const Icon(\r\n                        Icons.notifications_none_outlined,\r\n                        size: 64,\r\n                        color: Colors.black38,\r\n                      ),\r\n                      const SizedBox(height: 16),\r\n                      Text(\r\n                        'No notifications yet',\r\n                        style: GoogleFonts.poppins(\r\n                          fontSize: 16,\r\n                          color: Colors.black54,\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                )\r\n              : ListView.builder(\r\n                  padding: const EdgeInsets.all(16),\r\n                  itemCount: _notifications.length,\r\n                  itemBuilder: (context, index) {\r\n                    final notification = _notifications[index];\r\n                    final bool isVideoConsultation = notification['type'] == 'video_consultation';\r\n                    \r\n                    return Card(\r\n                      elevation: 0,\r\n                      shape: RoundedRectangleBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                        side: const BorderSide(color: Color(0xFFE0E0E0)),\r\n                      ),\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(16),\r\n                        child: Column(\r\n                          crossAxisAlignment: CrossAxisAlignment.start,\r\n                          children: [\r\n                            Row(\r\n                              children: [\r\n                                Container(\r\n                                  padding: const EdgeInsets.all(8),\r\n                                  decoration: BoxDecoration(\r\n                                    color: const Color(0xFF2D9CDB).withOpacity(0.1),\r\n                                    borderRadius: BorderRadius.circular(8),\r\n                                  ),\r\n                                  child: Icon(\r\n                                    isVideoConsultation\r\n                                        ? Icons.videocam_outlined\r\n                                        : Icons.notifications_outlined,\r\n                                    color: const Color(0xFF2D9CDB),\r\n                                  ),\r\n                                ),\r\n                                const SizedBox(width: 12),\r\n                                Expanded(\r\n                                  child: Column(\r\n                                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                                    children: [\r\n                                      Text(\r\n                                        isVideoConsultation\r\n                                            ? 'Video Consultation Booked'\r\n                                            : notification['title'] ?? 'Notification',\r\n                                        style: GoogleFonts.poppins(\r\n                                          fontSize: 16,\r\n                                          fontWeight: FontWeight.w600,\r\n                                          color: Colors.black87,\r\n                                        ),\r\n                                      ),\r\n                                      const SizedBox(height: 4),\r\n                                      Text(\r\n                                        'Scheduled for: ${_formatDateTime(notification['dateTime'])}',\r\n                                        style: GoogleFonts.poppins(\r\n                                          fontSize: 14,\r\n                                          color: Colors.black54,\r\n                                        ),\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                              ],\r\n                            ),\r\n                            if (notification['doctorName'] != null) ...[\r\n                              const SizedBox(height: 12),\r\n                              const Divider(),\r\n                              const SizedBox(height: 12),\r\n                              _buildInfoRow('Doctor', notification['doctorName']),\r\n                              if (notification['specialization'] != null)\r\n                                _buildInfoRow('Specialization', notification['specialization']),\r\n                              _buildInfoRow('Duration', '30 minutes'),\r\n                            ],\r\n                          ],\r\n                        ),\r\n                      ),\r\n                    );\r\n                  },\r\n                ),\r\n    );\r\n  }\r\n\r\n  Widget _buildInfoRow(String label, String value) {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(bottom: 8),\r\n      child: Row(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          SizedBox(\r\n            width: 100,\r\n            child: Text(\r\n              label,\r\n              style: GoogleFonts.poppins(\r\n                fontSize: 14,\r\n                color: Colors.black54,\r\n              ),\r\n            ),\r\n          ),\r\n          Expanded(\r\n            child: Text(\r\n              value,\r\n              style: GoogleFonts.poppins(\r\n                fontSize: 14,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
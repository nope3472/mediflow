{
    "sourceFile": "lib/request_appointment_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744620930770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744621289528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,187 +1,1 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n-\r\n-class RequestAppointmentScreen extends StatefulWidget {\r\n-  const RequestAppointmentScreen({super.key});\r\n-\r\n-  @override\r\n-  State<RequestAppointmentScreen> createState() =>\r\n-      _RequestAppointmentScreenState();\r\n-}\r\n-\r\n-class _RequestAppointmentScreenState extends State<RequestAppointmentScreen> {\r\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n-  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  final _problemController = TextEditingController();\r\n-  String? _selectedDoctorId;\r\n-  List<Map<String, dynamic>> _doctors = [];\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _loadDoctors();\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _problemController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _loadDoctors() async {\r\n-    try {\r\n-      final snapshot = await _firestore\r\n-          .collection('users')\r\n-          .where('role', isEqualTo: 'doctor')\r\n-          .get();\r\n-\r\n-      setState(() {\r\n-        _doctors = snapshot.docs.map((doc) {\r\n-          final data = doc.data();\r\n-          return {\r\n-            'id': doc.id,\r\n-            'name': data['name'] ?? 'Unknown Doctor',\r\n-            'specialization': data['specialization'] ?? 'General',\r\n-          };\r\n-        }).toList();\r\n-      });\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error loading doctors: $e')),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _submitAppointmentRequest() async {\r\n-    if (!_formKey.currentState!.validate()) return;\r\n-    if (_selectedDoctorId == null) {\r\n-      ScaffoldMessenger.of(context).showSnackBar(\r\n-        const SnackBar(content: Text('Please select a doctor')),\r\n-      );\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      final user = _auth.currentUser;\r\n-      if (user == null) throw Exception('User not logged in');\r\n-\r\n-      final userDoc = await _firestore.collection('users').doc(user.uid).get();\r\n-      final userData = userDoc.data() ?? {};\r\n-\r\n-      await _firestore.collection('appointments').add({\r\n-        'patientId': user.uid,\r\n-        'patientName': userData['name'] ?? 'Unknown',\r\n-        'doctorId': _selectedDoctorId,\r\n-        'problem': _problemController.text,\r\n-        'status': 'pending',\r\n-        'createdAt': FieldValue.serverTimestamp(),\r\n-      });\r\n-\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-              content: Text('Appointment request sent successfully')),\r\n-        );\r\n-        Navigator.pop(context);\r\n-      }\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error submitting request: $e')),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('Request Appointment'),\r\n-        backgroundColor: Colors.teal,\r\n-      ),\r\n-      body: SingleChildScrollView(\r\n-        padding: const EdgeInsets.all(16),\r\n-        child: Form(\r\n-          key: _formKey,\r\n-          child: Column(\r\n-            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-            children: [\r\n-              const Text(\r\n-                'Select Doctor',\r\n-                style: TextStyle(\r\n-                  fontSize: 18,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n-              ),\r\n-              const SizedBox(height: 8),\r\n-              DropdownButtonFormField<String>(\r\n-                value: _selectedDoctorId,\r\n-                decoration: const InputDecoration(\r\n-                  border: OutlineInputBorder(),\r\n-                  contentPadding:\r\n-                      EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n-                ),\r\n-                items: _doctors.map((doctor) {\r\n-                  return DropdownMenuItem<String>(\r\n-                    value: doctor['id'],\r\n-                    child:\r\n-                        Text('${doctor['name']} - ${doctor['specialization']}'),\r\n-                  );\r\n-                }).toList(),\r\n-                onChanged: (value) {\r\n-                  setState(() {\r\n-                    _selectedDoctorId = value;\r\n-                  });\r\n-                },\r\n-                validator: (value) {\r\n-                  if (value == null) return 'Please select a doctor';\r\n-                  return null;\r\n-                },\r\n-              ),\r\n-              const SizedBox(height: 24),\r\n-              const Text(\r\n-                'Describe Your Problem',\r\n-                style: TextStyle(\r\n-                  fontSize: 18,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n-              ),\r\n-              const SizedBox(height: 8),\r\n-              TextFormField(\r\n-                controller: _problemController,\r\n-                maxLines: 5,\r\n-                decoration: const InputDecoration(\r\n-                  border: OutlineInputBorder(),\r\n-                  hintText: 'Please describe your symptoms or concerns...',\r\n-                ),\r\n-                validator: (value) {\r\n-                  if (value == null || value.isEmpty) {\r\n-                    return 'Please describe your problem';\r\n-                  }\r\n-                  return null;\r\n-                },\r\n-              ),\r\n-              const SizedBox(height: 24),\r\n-              ElevatedButton(\r\n-                onPressed: _submitAppointmentRequest,\r\n-                style: ElevatedButton.styleFrom(\r\n-                  backgroundColor: Colors.teal,\r\n-                  padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                ),\r\n-                child: const Text(\r\n-                  'Submit Request',\r\n-                  style: TextStyle(fontSize: 16),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1744620930770,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\n\r\nclass RequestAppointmentScreen extends StatefulWidget {\r\n  const RequestAppointmentScreen({super.key});\r\n\r\n  @override\r\n  State<RequestAppointmentScreen> createState() => _RequestAppointmentScreenState();\r\n}\r\n\r\nclass _RequestAppointmentScreenState extends State<RequestAppointmentScreen> {\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n  final _formKey = GlobalKey<FormState>();\r\n  final _problemController = TextEditingController();\r\n  String? _selectedDoctorId;\r\n  List<Map<String, dynamic>> _doctors = [];\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadDoctors();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _problemController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _loadDoctors() async {\r\n    try {\r\n      final snapshot = await _firestore.collection('users')\r\n          .where('role', isEqualTo: 'doctor')\r\n          .get();\r\n      \r\n      setState(() {\r\n        _doctors = snapshot.docs.map((doc) {\r\n          final data = doc.data();\r\n          return {\r\n            'id': doc.id,\r\n            'name': data['name'] ?? 'Unknown Doctor',\r\n            'specialization': data['specialization'] ?? 'General',\r\n          };\r\n        }).toList();\r\n      });\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text('Error loading doctors: $e')),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _submitAppointmentRequest() async {\r\n    if (!_formKey.currentState!.validate()) return;\r\n    if (_selectedDoctorId == null) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Please select a doctor')),\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      final user = _auth.currentUser;\r\n      if (user == null) throw Exception('User not logged in');\r\n\r\n      final userDoc = await _firestore.collection('users').doc(user.uid).get();\r\n      final userData = userDoc.data() ?? {};\r\n\r\n      await _firestore.collection('appointments').add({\r\n        'patientId': user.uid,\r\n        'patientName': userData['name'] ?? 'Unknown',\r\n        'doctorId': _selectedDoctorId,\r\n        'problem': _problemController.text,\r\n        'status': 'pending',\r\n        'createdAt': FieldValue.serverTimestamp(),\r\n      });\r\n\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('Appointment request sent successfully')),\r\n        );\r\n        Navigator.pop(context);\r\n      }\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text('Error submitting request: $e')),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Request Appointment'),\r\n        backgroundColor: Colors.teal,\r\n      ),\r\n      body: SingleChildScrollView(\r\n        padding: const EdgeInsets.all(16),\r\n        child: Form(\r\n          key: _formKey,\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n            children: [\r\n              const Text(\r\n                'Select Doctor',\r\n                style: TextStyle(\r\n                  fontSize: 18,\r\n                  fontWeight: FontWeight.bold,\r\n                ),\r\n              ),\r\n              const SizedBox(height: 8),\r\n              DropdownButtonFormField<String>(\r\n                value: _selectedDoctorId,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n                ),\r\n                items: _doctors.map((doctor) {\r\n                  return DropdownMenuItem<String>(\r\n                    value: doctor['id'],\r\n                    child: Text('${doctor['name']} - ${doctor['specialization']}'),\r\n                  );\r\n                }).toList(),\r\n                onChanged: (value) {\r\n                  setState(() {\r\n                    _selectedDoctorId = value;\r\n                  });\r\n                },\r\n                validator: (value) {\r\n                  if (value == null) return 'Please select a doctor';\r\n                  return null;\r\n                },\r\n              ),\r\n              const SizedBox(height: 24),\r\n              const Text(\r\n                'Describe Your Problem',\r\n                style: TextStyle(\r\n                  fontSize: 18,\r\n                  fontWeight: FontWeight.bold,\r\n                ),\r\n              ),\r\n              const SizedBox(height: 8),\r\n              TextFormField(\r\n                controller: _problemController,\r\n                maxLines: 5,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  hintText: 'Please describe your symptoms or concerns...',\r\n                ),\r\n                validator: (value) {\r\n                  if (value == null || value.isEmpty) {\r\n                    return 'Please describe your problem';\r\n                  }\r\n                  return null;\r\n                },\r\n              ),\r\n              const SizedBox(height: 24),\r\n              ElevatedButton(\r\n                onPressed: _submitAppointmentRequest,\r\n                style: ElevatedButton.styleFrom(\r\n                  backgroundColor: Colors.teal,\r\n                  padding: const EdgeInsets.symmetric(vertical: 16),\r\n                ),\r\n                child: const Text(\r\n                  'Submit Request',\r\n                  style: TextStyle(fontSize: 16),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
{
    "sourceFile": "lib/contact_doctor.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1744624494193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744624570390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:mailer/mailer.dart';\r\n-import 'package:mailer/smtp_server.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n   const ContactDoctorScreen({super.key});\r\n \r\n@@ -32,9 +30,10 @@\n \r\n   Future<void> _loadDoctors() async {\r\n     try {\r\n       final doctorsSnapshot = await FirebaseFirestore.instance\r\n-          .collection('doctors')\r\n+          .collection('users')\r\n+          .where('role', isEqualTo: 'doctor')\r\n           .get();\r\n \r\n       setState(() {\r\n         _doctorEmails = doctorsSnapshot.docs\r\n@@ -49,9 +48,9 @@\n       }\r\n     }\r\n   }\r\n \r\n-  Future<void> _sendEmail() async {\r\n+  Future<void> _sendConsultationRequest() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n     if (_selectedDoctorEmail == null) {\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n         const SnackBar(content: Text('Please select a doctor')),\r\n@@ -64,43 +63,29 @@\n     try {\r\n       final user = FirebaseAuth.instance.currentUser;\r\n       if (user == null) throw Exception('User not logged in');\r\n \r\n-      // Configure SMTP server (using Gmail as example)\r\n-      final smtpServer = SmtpServer(\r\n-        'smtp.gmail.com',\r\n-        username: 'your-email@gmail.com', // Replace with your email\r\n-        password: 'your-app-password', // Replace with your app password\r\n-        ssl: true,\r\n-        port: 465,\r\n-      );\r\n+      // Create a consultation request document in Firestore\r\n+      await FirebaseFirestore.instance.collection('consultation_requests').add({\r\n+        'patientId': user.uid,\r\n+        'patientName': user.displayName,\r\n+        'patientEmail': user.email,\r\n+        'doctorEmail': _selectedDoctorEmail,\r\n+        'description': _descriptionController.text,\r\n+        'status': 'pending',\r\n+        'timestamp': FieldValue.serverTimestamp(),\r\n+      });\r\n \r\n-      // Create the email message\r\n-      final message = Message()\r\n-        ..from = Address(user.email!, user.displayName ?? 'Patient')\r\n-        ..recipients.add(_selectedDoctorEmail!)\r\n-        ..subject = 'Medical Consultation Request'\r\n-        ..text = '''\r\n-Patient Name: ${user.displayName ?? 'Anonymous'}\r\n-Patient Email: ${user.email}\r\n-\r\n-Description of Problem:\r\n-${_descriptionController.text}\r\n-''';\r\n-\r\n-      // Send the email\r\n-      final sendReport = await send(message, smtpServer);\r\n-      \r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('Email sent successfully')),\r\n+          const SnackBar(content: Text('Consultation request sent successfully')),\r\n         );\r\n         Navigator.pop(context);\r\n       }\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error sending email: $e')),\r\n+          SnackBar(content: Text('Error sending request: $e')),\r\n         );\r\n       }\r\n     } finally {\r\n       setState(() => _isLoading = false);\r\n@@ -217,17 +202,17 @@\n               // Send Button\r\n               SizedBox(\r\n                 width: double.infinity,\r\n                 child: ElevatedButton(\r\n-                  onPressed: _isLoading ? null : _sendEmail,\r\n+                  onPressed: _isLoading ? null : _sendConsultationRequest,\r\n                   style: ElevatedButton.styleFrom(\r\n                     backgroundColor: Colors.teal,\r\n                     padding: const EdgeInsets.symmetric(vertical: 16),\r\n                   ),\r\n                   child: _isLoading\r\n                       ? const CircularProgressIndicator(color: Colors.white)\r\n                       : const Text(\r\n-                          'Send to Doctor',\r\n+                          'Send Consultation Request',\r\n                           style: TextStyle(fontSize: 16),\r\n                         ),\r\n                 ),\r\n               ),\r\n@@ -236,5 +221,5 @@\n         ),\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744624741054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,50 +11,49 @@\n \r\n class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\r\n   final _formKey = GlobalKey<FormState>();\r\n   final _descriptionController = TextEditingController();\r\n-  String? _selectedDoctorEmail;\r\n-  List<String> _doctorEmails = [];\r\n+  String? _selectedUserEmail;\r\n+  List<String> _userEmails = [];\r\n   bool _isLoading = false;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    _loadDoctors();\r\n+    _loadUsers();\r\n   }\r\n \r\n   @override\r\n   void dispose() {\r\n     _descriptionController.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  Future<void> _loadDoctors() async {\r\n+  Future<void> _loadUsers() async {\r\n     try {\r\n-      final doctorsSnapshot = await FirebaseFirestore.instance\r\n+      final usersSnapshot = await FirebaseFirestore.instance\r\n           .collection('users')\r\n-          .where('role', isEqualTo: 'doctor')\r\n           .get();\r\n \r\n       setState(() {\r\n-        _doctorEmails = doctorsSnapshot.docs\r\n+        _userEmails = usersSnapshot.docs\r\n             .map((doc) => doc.data()['email'] as String)\r\n             .toList();\r\n       });\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error loading doctors: $e')),\r\n+          SnackBar(content: Text('Error loading users: $e')),\r\n         );\r\n       }\r\n     }\r\n   }\r\n \r\n   Future<void> _sendConsultationRequest() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n-    if (_selectedDoctorEmail == null) {\r\n+    if (_selectedUserEmail == null) {\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        const SnackBar(content: Text('Please select a doctor')),\r\n+        const SnackBar(content: Text('Please select a user')),\r\n       );\r\n       return;\r\n     }\r\n \r\n@@ -68,9 +67,9 @@\n       await FirebaseFirestore.instance.collection('consultation_requests').add({\r\n         'patientId': user.uid,\r\n         'patientName': user.displayName,\r\n         'patientEmail': user.email,\r\n-        'doctorEmail': _selectedDoctorEmail,\r\n+        'selectedUserEmail': _selectedUserEmail,\r\n         'description': _descriptionController.text,\r\n         'status': 'pending',\r\n         'timestamp': FieldValue.serverTimestamp(),\r\n       });\r\n@@ -97,9 +96,9 @@\n     final user = FirebaseAuth.instance.currentUser;\r\n \r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: const Text('Contact Doctor'),\r\n+        title: const Text('Contact User'),\r\n         backgroundColor: Colors.teal,\r\n       ),\r\n       body: Form(\r\n         key: _formKey,\r\n@@ -137,37 +136,37 @@\n                 ),\r\n               ),\r\n               const SizedBox(height: 24),\r\n \r\n-              // Doctor Selection\r\n+              // User Selection\r\n               const Text(\r\n-                'Select Doctor',\r\n+                'Select User',\r\n                 style: TextStyle(\r\n                   fontSize: 20,\r\n                   fontWeight: FontWeight.bold,\r\n                 ),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               DropdownButtonFormField<String>(\r\n-                value: _selectedDoctorEmail,\r\n+                value: _selectedUserEmail,\r\n                 decoration: const InputDecoration(\r\n-                  labelText: 'Choose Doctor',\r\n+                  labelText: 'Choose User',\r\n                   border: OutlineInputBorder(),\r\n                 ),\r\n-                items: _doctorEmails.map((email) {\r\n+                items: _userEmails.map((email) {\r\n                   return DropdownMenuItem(\r\n                     value: email,\r\n                     child: Text(email),\r\n                   );\r\n                 }).toList(),\r\n                 onChanged: (value) {\r\n                   setState(() {\r\n-                    _selectedDoctorEmail = value;\r\n+                    _selectedUserEmail = value;\r\n                   });\r\n                 },\r\n                 validator: (value) {\r\n                   if (value == null || value.isEmpty) {\r\n-                    return 'Please select a doctor';\r\n+                    return 'Please select a user';\r\n                   }\r\n                   return null;\r\n                 },\r\n               ),\r\n"
                },
                {
                    "date": 1744624753267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,10 @@\n   }\r\n \r\n   Future<void> _loadUsers() async {\r\n     try {\r\n-      final usersSnapshot = await FirebaseFirestore.instance\r\n-          .collection('users')\r\n-          .get();\r\n+      final usersSnapshot =\r\n+          await FirebaseFirestore.instance.collection('users').get();\r\n \r\n       setState(() {\r\n         _userEmails = usersSnapshot.docs\r\n             .map((doc) => doc.data()['email'] as String)\r\n@@ -75,9 +74,10 @@\n       });\r\n \r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('Consultation request sent successfully')),\r\n+          const SnackBar(\r\n+              content: Text('Consultation request sent successfully')),\r\n         );\r\n         Navigator.pop(context);\r\n       }\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1744624904419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,15 +29,30 @@\n   }\r\n \r\n   Future<void> _loadUsers() async {\r\n     try {\r\n-      final usersSnapshot =\r\n-          await FirebaseFirestore.instance.collection('users').get();\r\n+      // Get all users from Firebase Authentication\r\n+      final List<String> emails = [];\r\n+      \r\n+      // Get current user to exclude from the list\r\n+      final currentUser = FirebaseAuth.instance.currentUser;\r\n+      final currentUserEmail = currentUser?.email;\r\n \r\n+      // Get all users from Firestore\r\n+      final usersSnapshot = await FirebaseFirestore.instance\r\n+          .collection('users')\r\n+          .get();\r\n+\r\n+      // Add emails to the list, excluding current user\r\n+      for (var doc in usersSnapshot.docs) {\r\n+        final email = doc.data()['email'] as String?;\r\n+        if (email != null && email != currentUserEmail) {\r\n+          emails.add(email);\r\n+        }\r\n+      }\r\n+\r\n       setState(() {\r\n-        _userEmails = usersSnapshot.docs\r\n-            .map((doc) => doc.data()['email'] as String)\r\n-            .toList();\r\n+        _userEmails = emails;\r\n       });\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n@@ -145,32 +160,37 @@\n                   fontWeight: FontWeight.bold,\r\n                 ),\r\n               ),\r\n               const SizedBox(height: 16),\r\n-              DropdownButtonFormField<String>(\r\n-                value: _selectedUserEmail,\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Choose User',\r\n-                  border: OutlineInputBorder(),\r\n+              if (_userEmails.isEmpty)\r\n+                const Center(\r\n+                  child: Text('No other users available'),\r\n+                )\r\n+              else\r\n+                DropdownButtonFormField<String>(\r\n+                  value: _selectedUserEmail,\r\n+                  decoration: const InputDecoration(\r\n+                    labelText: 'Choose User',\r\n+                    border: OutlineInputBorder(),\r\n+                  ),\r\n+                  items: _userEmails.map((email) {\r\n+                    return DropdownMenuItem(\r\n+                      value: email,\r\n+                      child: Text(email),\r\n+                    );\r\n+                  }).toList(),\r\n+                  onChanged: (value) {\r\n+                    setState(() {\r\n+                      _selectedUserEmail = value;\r\n+                    });\r\n+                  },\r\n+                  validator: (value) {\r\n+                    if (value == null || value.isEmpty) {\r\n+                      return 'Please select a user';\r\n+                    }\r\n+                    return null;\r\n+                  },\r\n                 ),\r\n-                items: _userEmails.map((email) {\r\n-                  return DropdownMenuItem(\r\n-                    value: email,\r\n-                    child: Text(email),\r\n-                  );\r\n-                }).toList(),\r\n-                onChanged: (value) {\r\n-                  setState(() {\r\n-                    _selectedUserEmail = value;\r\n-                  });\r\n-                },\r\n-                validator: (value) {\r\n-                  if (value == null || value.isEmpty) {\r\n-                    return 'Please select a user';\r\n-                  }\r\n-                  return null;\r\n-                },\r\n-              ),\r\n               const SizedBox(height: 24),\r\n \r\n               // Problem Description\r\n               const Text(\r\n"
                },
                {
                    "date": 1744624913533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,17 +31,16 @@\n   Future<void> _loadUsers() async {\r\n     try {\r\n       // Get all users from Firebase Authentication\r\n       final List<String> emails = [];\r\n-      \r\n+\r\n       // Get current user to exclude from the list\r\n       final currentUser = FirebaseAuth.instance.currentUser;\r\n       final currentUserEmail = currentUser?.email;\r\n \r\n       // Get all users from Firestore\r\n-      final usersSnapshot = await FirebaseFirestore.instance\r\n-          .collection('users')\r\n-          .get();\r\n+      final usersSnapshot =\r\n+          await FirebaseFirestore.instance.collection('users').get();\r\n \r\n       // Add emails to the list, excluding current user\r\n       for (var doc in usersSnapshot.docs) {\r\n         final email = doc.data()['email'] as String?;\r\n"
                },
                {
                    "date": 1744625186228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:cloud_functions/cloud_functions.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n   const ContactDoctorScreen({super.key});\r\n \r\n@@ -29,29 +29,20 @@\n   }\r\n \r\n   Future<void> _loadUsers() async {\r\n     try {\r\n-      // Get all users from Firebase Authentication\r\n-      final List<String> emails = [];\r\n+      final currentUserEmail = FirebaseAuth.instance.currentUser?.email;\r\n \r\n-      // Get current user to exclude from the list\r\n-      final currentUser = FirebaseAuth.instance.currentUser;\r\n-      final currentUserEmail = currentUser?.email;\r\n+      final callable =\r\n+          FirebaseFunctions.instance.httpsCallable('getAllUserEmails');\r\n+      final result = await callable();\r\n+      final List<dynamic> emails = result.data;\r\n \r\n-      // Get all users from Firestore\r\n-      final usersSnapshot =\r\n-          await FirebaseFirestore.instance.collection('users').get();\r\n-\r\n-      // Add emails to the list, excluding current user\r\n-      for (var doc in usersSnapshot.docs) {\r\n-        final email = doc.data()['email'] as String?;\r\n-        if (email != null && email != currentUserEmail) {\r\n-          emails.add(email);\r\n-        }\r\n-      }\r\n-\r\n       setState(() {\r\n-        _userEmails = emails;\r\n+        _userEmails = emails\r\n+            .where((email) => email != currentUserEmail)\r\n+            .map((e) => e.toString())\r\n+            .toList();\r\n       });\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n@@ -120,15 +111,11 @@\n           padding: const EdgeInsets.all(16),\r\n           child: Column(\r\n             crossAxisAlignment: CrossAxisAlignment.start,\r\n             children: [\r\n-              // Patient Information\r\n               const Text(\r\n                 'Your Information',\r\n-                style: TextStyle(\r\n-                  fontSize: 20,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               Card(\r\n                 child: Padding(\r\n@@ -149,22 +136,15 @@\n                   ),\r\n                 ),\r\n               ),\r\n               const SizedBox(height: 24),\r\n-\r\n-              // User Selection\r\n               const Text(\r\n                 'Select User',\r\n-                style: TextStyle(\r\n-                  fontSize: 20,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               if (_userEmails.isEmpty)\r\n-                const Center(\r\n-                  child: Text('No other users available'),\r\n-                )\r\n+                const Center(child: Text('No other users available'))\r\n               else\r\n                 DropdownButtonFormField<String>(\r\n                   value: _selectedUserEmail,\r\n                   decoration: const InputDecoration(\r\n@@ -189,16 +169,11 @@\n                     return null;\r\n                   },\r\n                 ),\r\n               const SizedBox(height: 24),\r\n-\r\n-              // Problem Description\r\n               const Text(\r\n                 'Describe Your Problem',\r\n-                style: TextStyle(\r\n-                  fontSize: 20,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               TextFormField(\r\n                 controller: _descriptionController,\r\n@@ -215,10 +190,8 @@\n                   return null;\r\n                 },\r\n               ),\r\n               const SizedBox(height: 32),\r\n-\r\n-              // Send Button\r\n               SizedBox(\r\n                 width: double.infinity,\r\n                 child: ElevatedButton(\r\n                   onPressed: _isLoading ? null : _sendConsultationRequest,\r\n"
                },
                {
                    "date": 1744625223422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:cloud_functions/cloud_functions.dart';\r\n \r\n"
                },
                {
                    "date": 1744625232874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     _descriptionController.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  Future<void> _loadUsers() async {\r\n+  Future<void> _loadUsers(dynamic FirebaseFunctions) async {\r\n     try {\r\n       final currentUserEmail = FirebaseAuth.instance.currentUser?.email;\r\n \r\n       final callable =\r\n"
                },
                {
                    "date": 1744625242315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:cloud_functions/cloud_functions.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n   const ContactDoctorScreen({super.key});\r\n \r\n@@ -28,9 +27,9 @@\n     _descriptionController.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  Future<void> _loadUsers(dynamic FirebaseFunctions) async {\r\n+  Future<void> _loadUsers() async {\r\n     try {\r\n       final currentUserEmail = FirebaseAuth.instance.currentUser?.email;\r\n \r\n       final callable =\r\n"
                },
                {
                    "date": 1744625303123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:cloud_functions/cloud_functions.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1744625931882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:cloud_functions/cloud_functions.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n   const ContactDoctorScreen({super.key});\r\n \r\n@@ -30,20 +29,29 @@\n   }\r\n \r\n   Future<void> _loadUsers() async {\r\n     try {\r\n-      final currentUserEmail = FirebaseAuth.instance.currentUser?.email;\r\n+      // Get all users from Firebase Authentication\r\n+      final List<String> emails = [];\r\n \r\n-      final callable =\r\n-          FirebaseFunctions.instance.httpsCallable('getAllUserEmails');\r\n-      final result = await callable();\r\n-      final List<dynamic> emails = result.data;\r\n+      // Get current user to exclude from the list\r\n+      final currentUser = FirebaseAuth.instance.currentUser;\r\n+      final currentUserEmail = currentUser?.email;\r\n \r\n+      // Get all users from Firestore\r\n+      final usersSnapshot =\r\n+          await FirebaseFirestore.instance.collection('users').get();\r\n+\r\n+      // Add emails to the list, excluding current user\r\n+      for (var doc in usersSnapshot.docs) {\r\n+        final email = doc.data()['email'] as String?;\r\n+        if (email != null && email != currentUserEmail) {\r\n+          emails.add(email);\r\n+        }\r\n+      }\r\n+\r\n       setState(() {\r\n-        _userEmails = emails\r\n-            .where((email) => email != currentUserEmail)\r\n-            .map((e) => e.toString())\r\n-            .toList();\r\n+        _userEmails = emails;\r\n       });\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n@@ -112,11 +120,15 @@\n           padding: const EdgeInsets.all(16),\r\n           child: Column(\r\n             crossAxisAlignment: CrossAxisAlignment.start,\r\n             children: [\r\n+              // Patient Information\r\n               const Text(\r\n                 'Your Information',\r\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n+                style: TextStyle(\r\n+                  fontSize: 20,\r\n+                  fontWeight: FontWeight.bold,\r\n+                ),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               Card(\r\n                 child: Padding(\r\n@@ -137,15 +149,22 @@\n                   ),\r\n                 ),\r\n               ),\r\n               const SizedBox(height: 24),\r\n+\r\n+              // User Selection\r\n               const Text(\r\n                 'Select User',\r\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n+                style: TextStyle(\r\n+                  fontSize: 20,\r\n+                  fontWeight: FontWeight.bold,\r\n+                ),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               if (_userEmails.isEmpty)\r\n-                const Center(child: Text('No other users available'))\r\n+                const Center(\r\n+                  child: Text('No other users available'),\r\n+                )\r\n               else\r\n                 DropdownButtonFormField<String>(\r\n                   value: _selectedUserEmail,\r\n                   decoration: const InputDecoration(\r\n@@ -170,11 +189,16 @@\n                     return null;\r\n                   },\r\n                 ),\r\n               const SizedBox(height: 24),\r\n+\r\n+              // Problem Description\r\n               const Text(\r\n                 'Describe Your Problem',\r\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n+                style: TextStyle(\r\n+                  fontSize: 20,\r\n+                  fontWeight: FontWeight.bold,\r\n+                ),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               TextFormField(\r\n                 controller: _descriptionController,\r\n@@ -191,8 +215,10 @@\n                   return null;\r\n                 },\r\n               ),\r\n               const SizedBox(height: 32),\r\n+\r\n+              // Send Button\r\n               SizedBox(\r\n                 width: double.infinity,\r\n                 child: ElevatedButton(\r\n                   onPressed: _isLoading ? null : _sendConsultationRequest,\r\n"
                },
                {
                    "date": 1744625961755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:cloud_functions/cloud_functions.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n   const ContactDoctorScreen({super.key});\r\n \r\n@@ -11,62 +12,26 @@\n \r\n class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\r\n   final _formKey = GlobalKey<FormState>();\r\n   final _descriptionController = TextEditingController();\r\n-  String? _selectedUserEmail;\r\n-  List<String> _userEmails = [];\r\n+  String? _selectedDoctorEmail;\r\n+  final List<String> _doctorEmails = [\r\n+    'bt22csh045@iiitn.ac.in',\r\n+    'vivekxsingh2004@gmail.com'\r\n+  ];\r\n   bool _isLoading = false;\r\n \r\n   @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _loadUsers();\r\n-  }\r\n-\r\n-  @override\r\n   void dispose() {\r\n     _descriptionController.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  Future<void> _loadUsers() async {\r\n-    try {\r\n-      // Get all users from Firebase Authentication\r\n-      final List<String> emails = [];\r\n-\r\n-      // Get current user to exclude from the list\r\n-      final currentUser = FirebaseAuth.instance.currentUser;\r\n-      final currentUserEmail = currentUser?.email;\r\n-\r\n-      // Get all users from Firestore\r\n-      final usersSnapshot =\r\n-          await FirebaseFirestore.instance.collection('users').get();\r\n-\r\n-      // Add emails to the list, excluding current user\r\n-      for (var doc in usersSnapshot.docs) {\r\n-        final email = doc.data()['email'] as String?;\r\n-        if (email != null && email != currentUserEmail) {\r\n-          emails.add(email);\r\n-        }\r\n-      }\r\n-\r\n-      setState(() {\r\n-        _userEmails = emails;\r\n-      });\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error loading users: $e')),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n   Future<void> _sendConsultationRequest() async {\r\n     if (!_formKey.currentState!.validate()) return;\r\n-    if (_selectedUserEmail == null) {\r\n+    if (_selectedDoctorEmail == null) {\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        const SnackBar(content: Text('Please select a user')),\r\n+        const SnackBar(content: Text('Please select a doctor')),\r\n       );\r\n       return;\r\n     }\r\n \r\n@@ -75,23 +40,31 @@\n     try {\r\n       final user = FirebaseAuth.instance.currentUser;\r\n       if (user == null) throw Exception('User not logged in');\r\n \r\n-      // Create a consultation request document in Firestore\r\n+      // Call Firebase Function to send email\r\n+      final callable = FirebaseFunctions.instance.httpsCallable('sendConsultationEmail');\r\n+      await callable.call({\r\n+        'to': _selectedDoctorEmail,\r\n+        'patientName': user.displayName ?? 'Anonymous',\r\n+        'patientEmail': user.email,\r\n+        'description': _descriptionController.text,\r\n+      });\r\n+\r\n+      // Save consultation request to Firestore\r\n       await FirebaseFirestore.instance.collection('consultation_requests').add({\r\n         'patientId': user.uid,\r\n         'patientName': user.displayName,\r\n         'patientEmail': user.email,\r\n-        'selectedUserEmail': _selectedUserEmail,\r\n+        'doctorEmail': _selectedDoctorEmail,\r\n         'description': _descriptionController.text,\r\n         'status': 'pending',\r\n         'timestamp': FieldValue.serverTimestamp(),\r\n       });\r\n \r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-              content: Text('Consultation request sent successfully')),\r\n+          const SnackBar(content: Text('Consultation request sent successfully')),\r\n         );\r\n         Navigator.pop(context);\r\n       }\r\n     } catch (e) {\r\n@@ -110,9 +83,9 @@\n     final user = FirebaseAuth.instance.currentUser;\r\n \r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: const Text('Contact User'),\r\n+        title: const Text('Contact Doctor'),\r\n         backgroundColor: Colors.teal,\r\n       ),\r\n       body: Form(\r\n         key: _formKey,\r\n@@ -120,15 +93,11 @@\n           padding: const EdgeInsets.all(16),\r\n           child: Column(\r\n             crossAxisAlignment: CrossAxisAlignment.start,\r\n             children: [\r\n-              // Patient Information\r\n               const Text(\r\n                 'Your Information',\r\n-                style: TextStyle(\r\n-                  fontSize: 20,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               Card(\r\n                 child: Padding(\r\n@@ -149,56 +118,41 @@\n                   ),\r\n                 ),\r\n               ),\r\n               const SizedBox(height: 24),\r\n-\r\n-              // User Selection\r\n               const Text(\r\n-                'Select User',\r\n-                style: TextStyle(\r\n-                  fontSize: 20,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n+                'Select Doctor',\r\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n-              if (_userEmails.isEmpty)\r\n-                const Center(\r\n-                  child: Text('No other users available'),\r\n-                )\r\n-              else\r\n-                DropdownButtonFormField<String>(\r\n-                  value: _selectedUserEmail,\r\n-                  decoration: const InputDecoration(\r\n-                    labelText: 'Choose User',\r\n-                    border: OutlineInputBorder(),\r\n-                  ),\r\n-                  items: _userEmails.map((email) {\r\n-                    return DropdownMenuItem(\r\n-                      value: email,\r\n-                      child: Text(email),\r\n-                    );\r\n-                  }).toList(),\r\n-                  onChanged: (value) {\r\n-                    setState(() {\r\n-                      _selectedUserEmail = value;\r\n-                    });\r\n-                  },\r\n-                  validator: (value) {\r\n-                    if (value == null || value.isEmpty) {\r\n-                      return 'Please select a user';\r\n-                    }\r\n-                    return null;\r\n-                  },\r\n+              DropdownButtonFormField<String>(\r\n+                value: _selectedDoctorEmail,\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Choose Doctor',\r\n+                  border: OutlineInputBorder(),\r\n                 ),\r\n+                items: _doctorEmails.map((email) {\r\n+                  return DropdownMenuItem(\r\n+                    value: email,\r\n+                    child: Text(email),\r\n+                  );\r\n+                }).toList(),\r\n+                onChanged: (value) {\r\n+                  setState(() {\r\n+                    _selectedDoctorEmail = value;\r\n+                  });\r\n+                },\r\n+                validator: (value) {\r\n+                  if (value == null || value.isEmpty) {\r\n+                    return 'Please select a doctor';\r\n+                  }\r\n+                  return null;\r\n+                },\r\n+              ),\r\n               const SizedBox(height: 24),\r\n-\r\n-              // Problem Description\r\n               const Text(\r\n                 'Describe Your Problem',\r\n-                style: TextStyle(\r\n-                  fontSize: 20,\r\n-                  fontWeight: FontWeight.bold,\r\n-                ),\r\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               TextFormField(\r\n                 controller: _descriptionController,\r\n@@ -215,10 +169,8 @@\n                   return null;\r\n                 },\r\n               ),\r\n               const SizedBox(height: 32),\r\n-\r\n-              // Send Button\r\n               SizedBox(\r\n                 width: double.infinity,\r\n                 child: ElevatedButton(\r\n                   onPressed: _isLoading ? null : _sendConsultationRequest,\r\n"
                },
                {
                    "date": 1744625986692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,10 @@\n       final user = FirebaseAuth.instance.currentUser;\r\n       if (user == null) throw Exception('User not logged in');\r\n \r\n       // Call Firebase Function to send email\r\n-      final callable = FirebaseFunctions.instance.httpsCallable('sendConsultationEmail');\r\n+      final callable =\r\n+          FirebaseFunctions.instance.httpsCallable('sendConsultationEmail');\r\n       await callable.call({\r\n         'to': _selectedDoctorEmail,\r\n         'patientName': user.displayName ?? 'Anonymous',\r\n         'patientEmail': user.email,\r\n@@ -62,9 +63,10 @@\n       });\r\n \r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('Consultation request sent successfully')),\r\n+          const SnackBar(\r\n+              content: Text('Consultation request sent successfully')),\r\n         );\r\n         Navigator.pop(context);\r\n       }\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1744627490674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,74 @@\n import 'package:flutter/material.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:cloud_functions/cloud_functions.dart';\r\n+import 'package:flutter_email_sender/flutter_email_sender.dart';\r\n \r\n class ContactDoctorScreen extends StatefulWidget {\r\n-  const ContactDoctorScreen({super.key});\r\n+  const ContactDoctorScreen({Key? key}) : super(key: key);\r\n \r\n   @override\r\n-  State<ContactDoctorScreen> createState() => _ContactDoctorScreenState();\r\n+  _ContactDoctorScreenState createState() => _ContactDoctorScreenState();\r\n }\r\n \r\n class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\r\n   final _formKey = GlobalKey<FormState>();\r\n-  final _descriptionController = TextEditingController();\r\n-  String? _selectedDoctorEmail;\r\n-  final List<String> _doctorEmails = [\r\n-    'bt22csh045@iiitn.ac.in',\r\n-    'vivekxsingh2004@gmail.com'\r\n+  final _messageController = TextEditingController();\r\n+  String? _selectedDoctor;\r\n+  bool _isSending = false;\r\n+  final _doctors = [\r\n+    {'name': 'Dr. John Smith', 'email': 'john.smith@example.com', 'specialty': 'Cardiologist'},\r\n+    {'name': 'Dr. Sarah Johnson', 'email': 'sarah.johnson@example.com', 'specialty': 'Neurologist'},\r\n+    {'name': 'Dr. Michael Brown', 'email': 'michael.brown@example.com', 'specialty': 'Pediatrician'},\r\n   ];\r\n-  bool _isLoading = false;\r\n \r\n   @override\r\n   void dispose() {\r\n-    _descriptionController.dispose();\r\n+    _messageController.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  Future<void> _sendConsultationRequest() async {\r\n-    if (!_formKey.currentState!.validate()) return;\r\n-    if (_selectedDoctorEmail == null) {\r\n-      ScaffoldMessenger.of(context).showSnackBar(\r\n-        const SnackBar(content: Text('Please select a doctor')),\r\n-      );\r\n+  Future<void> _sendEmail() async {\r\n+    if (!_formKey.currentState!.validate() || _selectedDoctor == null) {\r\n       return;\r\n     }\r\n \r\n-    setState(() => _isLoading = true);\r\n+    setState(() => _isSending = true);\r\n \r\n     try {\r\n       final user = FirebaseAuth.instance.currentUser;\r\n-      if (user == null) throw Exception('User not logged in');\r\n+      if (user == null) {\r\n+        throw Exception('User not logged in');\r\n+      }\r\n \r\n-      // Call Firebase Function to send email\r\n-      final callable =\r\n-          FirebaseFunctions.instance.httpsCallable('sendConsultationEmail');\r\n-      await callable.call({\r\n-        'to': _selectedDoctorEmail,\r\n-        'patientName': user.displayName ?? 'Anonymous',\r\n-        'patientEmail': user.email,\r\n-        'description': _descriptionController.text,\r\n-      });\r\n+      final selectedDoctorData = _doctors.firstWhere(\r\n+        (doctor) => doctor['name'] == _selectedDoctor,\r\n+      );\r\n \r\n-      // Save consultation request to Firestore\r\n+      final Email email = Email(\r\n+        body: _messageController.text,\r\n+        subject: 'Medical Consultation Request from ${user.displayName ?? 'Patient'}',\r\n+        recipients: [selectedDoctorData['email']!],\r\n+        isHTML: false,\r\n+      );\r\n+\r\n+      await FlutterEmailSender.send(email);\r\n+\r\n+      // Save the consultation request to Firestore\r\n       await FirebaseFirestore.instance.collection('consultation_requests').add({\r\n         'patientId': user.uid,\r\n         'patientName': user.displayName,\r\n         'patientEmail': user.email,\r\n-        'doctorEmail': _selectedDoctorEmail,\r\n-        'description': _descriptionController.text,\r\n-        'status': 'pending',\r\n+        'doctorName': _selectedDoctor,\r\n+        'doctorEmail': selectedDoctorData['email'],\r\n+        'message': _messageController.text,\r\n         'timestamp': FieldValue.serverTimestamp(),\r\n+        'status': 'sent',\r\n       });\r\n \r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-              content: Text('Consultation request sent successfully')),\r\n+          const SnackBar(content: Text('Consultation request sent successfully!')),\r\n         );\r\n         Navigator.pop(context);\r\n       }\r\n     } catch (e) {\r\n@@ -75,119 +77,104 @@\n           SnackBar(content: Text('Error sending request: $e')),\r\n         );\r\n       }\r\n     } finally {\r\n-      setState(() => _isLoading = false);\r\n+      if (mounted) {\r\n+        setState(() => _isSending = false);\r\n+      }\r\n     }\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    final user = FirebaseAuth.instance.currentUser;\r\n-\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         title: const Text('Contact Doctor'),\r\n         backgroundColor: Colors.teal,\r\n       ),\r\n-      body: Form(\r\n-        key: _formKey,\r\n-        child: SingleChildScrollView(\r\n-          padding: const EdgeInsets.all(16),\r\n+      body: SingleChildScrollView(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        child: Form(\r\n+          key: _formKey,\r\n           child: Column(\r\n-            crossAxisAlignment: CrossAxisAlignment.start,\r\n+            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n             children: [\r\n               const Text(\r\n-                'Your Information',\r\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n+                'Select a Doctor',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n-              Card(\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(16),\r\n-                  child: Column(\r\n-                    crossAxisAlignment: CrossAxisAlignment.start,\r\n-                    children: [\r\n-                      Text(\r\n-                        'Name: ${user?.displayName ?? 'Not available'}',\r\n-                        style: const TextStyle(fontSize: 16),\r\n-                      ),\r\n-                      const SizedBox(height: 8),\r\n-                      Text(\r\n-                        'Email: ${user?.email ?? 'Not available'}',\r\n-                        style: const TextStyle(fontSize: 16),\r\n-                      ),\r\n-                    ],\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-              const SizedBox(height: 24),\r\n-              const Text(\r\n-                'Select Doctor',\r\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n               DropdownButtonFormField<String>(\r\n-                value: _selectedDoctorEmail,\r\n+                value: _selectedDoctor,\r\n                 decoration: const InputDecoration(\r\n-                  labelText: 'Choose Doctor',\r\n                   border: OutlineInputBorder(),\r\n+                  contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n                 ),\r\n-                items: _doctorEmails.map((email) {\r\n+                hint: const Text('Choose a doctor'),\r\n+                items: _doctors.map((doctor) {\r\n                   return DropdownMenuItem(\r\n-                    value: email,\r\n-                    child: Text(email),\r\n+                    value: doctor['name'],\r\n+                    child: Column(\r\n+                      crossAxisAlignment: CrossAxisAlignment.start,\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(doctor['name']!),\r\n+                        Text(\r\n+                          doctor['specialty']!,\r\n+                          style: const TextStyle(\r\n+                            fontSize: 12,\r\n+                            color: Colors.grey,\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n                   );\r\n                 }).toList(),\r\n-                onChanged: (value) {\r\n-                  setState(() {\r\n-                    _selectedDoctorEmail = value;\r\n-                  });\r\n-                },\r\n                 validator: (value) {\r\n                   if (value == null || value.isEmpty) {\r\n                     return 'Please select a doctor';\r\n                   }\r\n                   return null;\r\n                 },\r\n+                onChanged: (String? newValue) {\r\n+                  setState(() {\r\n+                    _selectedDoctor = newValue;\r\n+                  });\r\n+                },\r\n               ),\r\n               const SizedBox(height: 24),\r\n               const Text(\r\n-                'Describe Your Problem',\r\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n+                'Your Message',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 16),\r\n               TextFormField(\r\n-                controller: _descriptionController,\r\n-                maxLines: 5,\r\n+                controller: _messageController,\r\n                 decoration: const InputDecoration(\r\n-                  labelText: 'Description',\r\n+                  hintText: 'Describe your medical concern...',\r\n                   border: OutlineInputBorder(),\r\n-                  hintText: 'Please describe your medical concern in detail...',\r\n                 ),\r\n+                maxLines: 5,\r\n                 validator: (value) {\r\n                   if (value == null || value.isEmpty) {\r\n-                    return 'Please describe your problem';\r\n+                    return 'Please enter your message';\r\n                   }\r\n                   return null;\r\n                 },\r\n               ),\r\n-              const SizedBox(height: 32),\r\n-              SizedBox(\r\n-                width: double.infinity,\r\n-                child: ElevatedButton(\r\n-                  onPressed: _isLoading ? null : _sendConsultationRequest,\r\n-                  style: ElevatedButton.styleFrom(\r\n-                    backgroundColor: Colors.teal,\r\n-                    padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                  ),\r\n-                  child: _isLoading\r\n-                      ? const CircularProgressIndicator(color: Colors.white)\r\n-                      : const Text(\r\n-                          'Send Consultation Request',\r\n-                          style: TextStyle(fontSize: 16),\r\n-                        ),\r\n+              const SizedBox(height: 24),\r\n+              ElevatedButton(\r\n+                onPressed: _isSending ? null : _sendEmail,\r\n+                style: ElevatedButton.styleFrom(\r\n+                  backgroundColor: Colors.teal,\r\n+                  padding: const EdgeInsets.symmetric(vertical: 16),\r\n                 ),\r\n+                child: _isSending\r\n+                    ? const CircularProgressIndicator(color: Colors.white)\r\n+                    : const Text(\r\n+                        'Send Request',\r\n+                        style: TextStyle(fontSize: 16),\r\n+                      ),\r\n               ),\r\n             ],\r\n           ),\r\n         ),\r\n"
                },
                {
                    "date": 1744627504184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,23 @@\n   final _messageController = TextEditingController();\r\n   String? _selectedDoctor;\r\n   bool _isSending = false;\r\n   final _doctors = [\r\n-    {'name': 'Dr. John Smith', 'email': 'john.smith@example.com', 'specialty': 'Cardiologist'},\r\n-    {'name': 'Dr. Sarah Johnson', 'email': 'sarah.johnson@example.com', 'specialty': 'Neurologist'},\r\n-    {'name': 'Dr. Michael Brown', 'email': 'michael.brown@example.com', 'specialty': 'Pediatrician'},\r\n+    {\r\n+      'name': 'Dr. John Smith',\r\n+      'email': 'john.smith@example.com',\r\n+      'specialty': 'Cardiologist'\r\n+    },\r\n+    {\r\n+      'name': 'Dr. Sarah Johnson',\r\n+      'email': 'sarah.johnson@example.com',\r\n+      'specialty': 'Neurologist'\r\n+    },\r\n+    {\r\n+      'name': 'Dr. Michael Brown',\r\n+      'email': 'michael.brown@example.com',\r\n+      'specialty': 'Pediatrician'\r\n+    },\r\n   ];\r\n \r\n   @override\r\n   void dispose() {\r\n@@ -45,9 +57,10 @@\n       );\r\n \r\n       final Email email = Email(\r\n         body: _messageController.text,\r\n-        subject: 'Medical Consultation Request from ${user.displayName ?? 'Patient'}',\r\n+        subject:\r\n+            'Medical Consultation Request from ${user.displayName ?? 'Patient'}',\r\n         recipients: [selectedDoctorData['email']!],\r\n         isHTML: false,\r\n       );\r\n \r\n@@ -66,9 +79,10 @@\n       });\r\n \r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('Consultation request sent successfully!')),\r\n+          const SnackBar(\r\n+              content: Text('Consultation request sent successfully!')),\r\n         );\r\n         Navigator.pop(context);\r\n       }\r\n     } catch (e) {\r\n@@ -106,9 +120,10 @@\n               DropdownButtonFormField<String>(\r\n                 value: _selectedDoctor,\r\n                 decoration: const InputDecoration(\r\n                   border: OutlineInputBorder(),\r\n-                  contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n+                  contentPadding:\r\n+                      EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n                 ),\r\n                 hint: const Text('Choose a doctor'),\r\n                 items: _doctors.map((doctor) {\r\n                   return DropdownMenuItem(\r\n"
                },
                {
                    "date": 1744628589327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,199 +1,217 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:flutter_email_sender/flutter_email_sender.dart';\r\n-\r\n-class ContactDoctorScreen extends StatefulWidget {\r\n-  const ContactDoctorScreen({Key? key}) : super(key: key);\r\n-\r\n-  @override\r\n-  _ContactDoctorScreenState createState() => _ContactDoctorScreenState();\r\n-}\r\n-\r\n-class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  final _messageController = TextEditingController();\r\n-  String? _selectedDoctor;\r\n-  bool _isSending = false;\r\n-  final _doctors = [\r\n-    {\r\n-      'name': 'Dr. John Smith',\r\n-      'email': 'john.smith@example.com',\r\n-      'specialty': 'Cardiologist'\r\n-    },\r\n-    {\r\n-      'name': 'Dr. Sarah Johnson',\r\n-      'email': 'sarah.johnson@example.com',\r\n-      'specialty': 'Neurologist'\r\n-    },\r\n-    {\r\n-      'name': 'Dr. Michael Brown',\r\n-      'email': 'michael.brown@example.com',\r\n-      'specialty': 'Pediatrician'\r\n-    },\r\n-  ];\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _messageController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _sendEmail() async {\r\n-    if (!_formKey.currentState!.validate() || _selectedDoctor == null) {\r\n-      return;\r\n-    }\r\n-\r\n-    setState(() => _isSending = true);\r\n-\r\n-    try {\r\n-      final user = FirebaseAuth.instance.currentUser;\r\n-      if (user == null) {\r\n-        throw Exception('User not logged in');\r\n-      }\r\n-\r\n-      final selectedDoctorData = _doctors.firstWhere(\r\n-        (doctor) => doctor['name'] == _selectedDoctor,\r\n-      );\r\n-\r\n-      final Email email = Email(\r\n-        body: _messageController.text,\r\n-        subject:\r\n-            'Medical Consultation Request from ${user.displayName ?? 'Patient'}',\r\n-        recipients: [selectedDoctorData['email']!],\r\n-        isHTML: false,\r\n-      );\r\n-\r\n-      await FlutterEmailSender.send(email);\r\n-\r\n-      // Save the consultation request to Firestore\r\n-      await FirebaseFirestore.instance.collection('consultation_requests').add({\r\n-        'patientId': user.uid,\r\n-        'patientName': user.displayName,\r\n-        'patientEmail': user.email,\r\n-        'doctorName': _selectedDoctor,\r\n-        'doctorEmail': selectedDoctorData['email'],\r\n-        'message': _messageController.text,\r\n-        'timestamp': FieldValue.serverTimestamp(),\r\n-        'status': 'sent',\r\n-      });\r\n-\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-              content: Text('Consultation request sent successfully!')),\r\n-        );\r\n-        Navigator.pop(context);\r\n-      }\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error sending request: $e')),\r\n-        );\r\n-      }\r\n-    } finally {\r\n-      if (mounted) {\r\n-        setState(() => _isSending = false);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('Contact Doctor'),\r\n-        backgroundColor: Colors.teal,\r\n-      ),\r\n-      body: SingleChildScrollView(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        child: Form(\r\n-          key: _formKey,\r\n-          child: Column(\r\n-            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-            children: [\r\n-              const Text(\r\n-                'Select a Doctor',\r\n-                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n-              DropdownButtonFormField<String>(\r\n-                value: _selectedDoctor,\r\n-                decoration: const InputDecoration(\r\n-                  border: OutlineInputBorder(),\r\n-                  contentPadding:\r\n-                      EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n-                ),\r\n-                hint: const Text('Choose a doctor'),\r\n-                items: _doctors.map((doctor) {\r\n-                  return DropdownMenuItem(\r\n-                    value: doctor['name'],\r\n-                    child: Column(\r\n-                      crossAxisAlignment: CrossAxisAlignment.start,\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(doctor['name']!),\r\n-                        Text(\r\n-                          doctor['specialty']!,\r\n-                          style: const TextStyle(\r\n-                            fontSize: 12,\r\n-                            color: Colors.grey,\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  );\r\n-                }).toList(),\r\n-                validator: (value) {\r\n-                  if (value == null || value.isEmpty) {\r\n-                    return 'Please select a doctor';\r\n-                  }\r\n-                  return null;\r\n-                },\r\n-                onChanged: (String? newValue) {\r\n-                  setState(() {\r\n-                    _selectedDoctor = newValue;\r\n-                  });\r\n-                },\r\n-              ),\r\n-              const SizedBox(height: 24),\r\n-              const Text(\r\n-                'Your Message',\r\n-                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n-              TextFormField(\r\n-                controller: _messageController,\r\n-                decoration: const InputDecoration(\r\n-                  hintText: 'Describe your medical concern...',\r\n-                  border: OutlineInputBorder(),\r\n-                ),\r\n-                maxLines: 5,\r\n-                validator: (value) {\r\n-                  if (value == null || value.isEmpty) {\r\n-                    return 'Please enter your message';\r\n-                  }\r\n-                  return null;\r\n-                },\r\n-              ),\r\n-              const SizedBox(height: 24),\r\n-              ElevatedButton(\r\n-                onPressed: _isSending ? null : _sendEmail,\r\n-                style: ElevatedButton.styleFrom(\r\n-                  backgroundColor: Colors.teal,\r\n-                  padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                ),\r\n-                child: _isSending\r\n-                    ? const CircularProgressIndicator(color: Colors.white)\r\n-                    : const Text(\r\n-                        'Send Request',\r\n-                        style: TextStyle(fontSize: 16),\r\n-                      ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:cloud_functions/cloud_functions.dart';\n+import 'package:flutter/material.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+\n+class ContactDoctorScreen extends StatefulWidget {\n+  const ContactDoctorScreen({super.key});\n+\n+  @override\n+  State<ContactDoctorScreen> createState() => _ContactDoctorScreenState();\n+}\n+\n+class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\n+  final _formKey = GlobalKey<FormState>();\n+  final _descriptionController = TextEditingController();\n+  String? _selectedUserEmail;\n+  List<String> _userEmails = [];\n+  bool _isLoading = false;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadUsers();\n+  }\n+\n+  @override\n+  void dispose() {\n+    _descriptionController.dispose();\n+    super.dispose();\n+  }\n+\n+  Future<void> _loadUsers() async {\n+    try {\n+      final currentUserEmail = FirebaseAuth.instance.currentUser?.email;\n+\n+      final callable =\n+          FirebaseFunctions.instance.httpsCallable('getAllUserEmails');\n+      final result = await callable();\n+      final List<dynamic> emails = result.data;\n+\n+      setState(() {\n+        _userEmails = emails\n+            .where((email) => email != currentUserEmail)\n+            .map((e) => e.toString())\n+            .toList();\n+      });\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(content: Text('Error loading users: $e')),\n+        );\n+      }\n+    }\n+  }\n+\n+  Future<void> _sendConsultationRequest() async {\n+    if (!_formKey.currentState!.validate()) return;\n+    if (_selectedUserEmail == null) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(content: Text('Please select a user')),\n+      );\n+      return;\n+    }\n+\n+    setState(() => _isLoading = true);\n+\n+    try {\n+      final user = FirebaseAuth.instance.currentUser;\n+      if (user == null) throw Exception('User not logged in');\n+\n+      // Create a consultation request document in Firestore\n+      await FirebaseFirestore.instance.collection('consultation_requests').add({\n+        'patientId': user.uid,\n+        'patientName': user.displayName,\n+        'patientEmail': user.email,\n+        'selectedUserEmail': _selectedUserEmail,\n+        'description': _descriptionController.text,\n+        'status': 'pending',\n+        'timestamp': FieldValue.serverTimestamp(),\n+      });\n+\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          const SnackBar(\n+              content: Text('Consultation request sent successfully')),\n+        );\n+        Navigator.pop(context);\n+      }\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(content: Text('Error sending request: $e')),\n+        );\n+      }\n+    } finally {\n+      setState(() => _isLoading = false);\n+    }\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    final user = FirebaseAuth.instance.currentUser;\n+\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text('Contact User'),\n+        backgroundColor: Colors.teal,\n+      ),\n+      body: Form(\n+        key: _formKey,\n+        child: SingleChildScrollView(\n+          padding: const EdgeInsets.all(16),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              const Text(\n+                'Your Information',\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n+              ),\n+              const SizedBox(height: 16),\n+              Card(\n+                child: Padding(\n+                  padding: const EdgeInsets.all(16),\n+                  child: Column(\n+                    crossAxisAlignment: CrossAxisAlignment.start,\n+                    children: [\n+                      Text(\n+                        'Name: ${user?.displayName ?? 'Not available'}',\n+                        style: const TextStyle(fontSize: 16),\n+                      ),\n+                      const SizedBox(height: 8),\n+                      Text(\n+                        'Email: ${user?.email ?? 'Not available'}',\n+                        style: const TextStyle(fontSize: 16),\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+              ),\n+              const SizedBox(height: 24),\n+              const Text(\n+                'Select User',\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n+              ),\n+              const SizedBox(height: 16),\n+              if (_userEmails.isEmpty)\n+                const Center(child: Text('No other users available'))\n+              else\n+                DropdownButtonFormField<String>(\n+                  value: _selectedUserEmail,\n+                  decoration: const InputDecoration(\n+                    labelText: 'Choose User',\n+                    border: OutlineInputBorder(),\n+                  ),\n+                  items: _userEmails.map((email) {\n+                    return DropdownMenuItem(\n+                      value: email,\n+                      child: Text(email),\n+                    );\n+                  }).toList(),\n+                  onChanged: (value) {\n+                    setState(() {\n+                      _selectedUserEmail = value;\n+                    });\n+                  },\n+                  validator: (value) {\n+                    if (value == null || value.isEmpty) {\n+                      return 'Please select a user';\n+                    }\n+                    return null;\n+                  },\n+                ),\n+              const SizedBox(height: 24),\n+              const Text(\n+                'Describe Your Problem',\n+                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n+              ),\n+              const SizedBox(height: 16),\n+              TextFormField(\n+                controller: _descriptionController,\n+                maxLines: 5,\n+                decoration: const InputDecoration(\n+                  labelText: 'Description',\n+                  border: OutlineInputBorder(),\n+                  hintText: 'Please describe your medical concern in detail...',\n+                ),\n+                validator: (value) {\n+                  if (value == null || value.isEmpty) {\n+                    return 'Please describe your problem';\n+                  }\n+                  return null;\n+                },\n+              ),\n+              const SizedBox(height: 32),\n+              SizedBox(\n+                width: double.infinity,\n+                child: ElevatedButton(\n+                  onPressed: _isLoading ? null : _sendConsultationRequest,\n+                  style: ElevatedButton.styleFrom(\n+                    backgroundColor: Colors.teal,\n+                    padding: const EdgeInsets.symmetric(vertical: 16),\n+                  ),\n+                  child: _isLoading\n+                      ? const CircularProgressIndicator(color: Colors.white)\n+                      : const Text(\n+                          'Send Consultation Request',\n+                          style: TextStyle(fontSize: 16),\n+                        ),\n+                ),\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744628973135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:cloud_functions/cloud_functions.dart';\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n \n class ContactDoctorScreen extends StatefulWidget {\n   const ContactDoctorScreen({super.key});\n \n@@ -30,19 +29,14 @@\n   }\n \n   Future<void> _loadUsers() async {\n     try {\n-      final currentUserEmail = FirebaseAuth.instance.currentUser?.email;\n+      final usersSnapshot =\n+          await FirebaseFirestore.instance.collection('users').get();\n \n-      final callable =\n-          FirebaseFunctions.instance.httpsCallable('getAllUserEmails');\n-      final result = await callable();\n-      final List<dynamic> emails = result.data;\n-\n       setState(() {\n-        _userEmails = emails\n-            .where((email) => email != currentUserEmail)\n-            .map((e) => e.toString())\n+        _userEmails = usersSnapshot.docs\n+            .map((doc) => doc.data()['email'] as String)\n             .toList();\n       });\n     } catch (e) {\n       if (mounted) {\n@@ -112,11 +106,15 @@\n           padding: const EdgeInsets.all(16),\n           child: Column(\n             crossAxisAlignment: CrossAxisAlignment.start,\n             children: [\n+              // Patient Information\n               const Text(\n                 'Your Information',\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n+                style: TextStyle(\n+                  fontSize: 20,\n+                  fontWeight: FontWeight.bold,\n+                ),\n               ),\n               const SizedBox(height: 16),\n               Card(\n                 child: Padding(\n@@ -137,44 +135,51 @@\n                   ),\n                 ),\n               ),\n               const SizedBox(height: 24),\n+\n+              // User Selection\n               const Text(\n                 'Select User',\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n+                style: TextStyle(\n+                  fontSize: 20,\n+                  fontWeight: FontWeight.bold,\n+                ),\n               ),\n               const SizedBox(height: 16),\n-              if (_userEmails.isEmpty)\n-                const Center(child: Text('No other users available'))\n-              else\n-                DropdownButtonFormField<String>(\n-                  value: _selectedUserEmail,\n-                  decoration: const InputDecoration(\n-                    labelText: 'Choose User',\n-                    border: OutlineInputBorder(),\n-                  ),\n-                  items: _userEmails.map((email) {\n-                    return DropdownMenuItem(\n-                      value: email,\n-                      child: Text(email),\n-                    );\n-                  }).toList(),\n-                  onChanged: (value) {\n-                    setState(() {\n-                      _selectedUserEmail = value;\n-                    });\n-                  },\n-                  validator: (value) {\n-                    if (value == null || value.isEmpty) {\n-                      return 'Please select a user';\n-                    }\n-                    return null;\n-                  },\n+              DropdownButtonFormField<String>(\n+                value: _selectedUserEmail,\n+                decoration: const InputDecoration(\n+                  labelText: 'Choose User',\n+                  border: OutlineInputBorder(),\n                 ),\n+                items: _userEmails.map((email) {\n+                  return DropdownMenuItem(\n+                    value: email,\n+                    child: Text(email),\n+                  );\n+                }).toList(),\n+                onChanged: (value) {\n+                  setState(() {\n+                    _selectedUserEmail = value;\n+                  });\n+                },\n+                validator: (value) {\n+                  if (value == null || value.isEmpty) {\n+                    return 'Please select a user';\n+                  }\n+                  return null;\n+                },\n+              ),\n               const SizedBox(height: 24),\n+\n+              // Problem Description\n               const Text(\n                 'Describe Your Problem',\n-                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n+                style: TextStyle(\n+                  fontSize: 20,\n+                  fontWeight: FontWeight.bold,\n+                ),\n               ),\n               const SizedBox(height: 16),\n               TextFormField(\n                 controller: _descriptionController,\n@@ -191,8 +196,10 @@\n                   return null;\n                 },\n               ),\n               const SizedBox(height: 32),\n+\n+              // Send Button\n               SizedBox(\n                 width: double.infinity,\n                 child: ElevatedButton(\n                   onPressed: _isLoading ? null : _sendConsultationRequest,\n"
                },
                {
                    "date": 1744629555538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:flutter_email_sender/flutter_email_sender.dart';\n \n class ContactDoctorScreen extends StatefulWidget {\n   const ContactDoctorScreen({super.key});\n \n@@ -11,48 +11,28 @@\n \n class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\n   final _formKey = GlobalKey<FormState>();\n   final _descriptionController = TextEditingController();\n-  String? _selectedUserEmail;\n-  List<String> _userEmails = [];\n+  String? _selectedDoctorEmail;\n   bool _isLoading = false;\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    _loadUsers();\n-  }\n+  // Predefined list of doctors\n+  final List<Map<String, String>> _doctors = [\n+    {'email': 'bt22csh045@iiitn.ac.in', 'name': 'Doctor 1'},\n+    {'email': 'vivekxsingh2004@gmail.com', 'name': 'Doctor 2'},\n+  ];\n \n   @override\n   void dispose() {\n     _descriptionController.dispose();\n     super.dispose();\n   }\n \n-  Future<void> _loadUsers() async {\n-    try {\n-      final usersSnapshot =\n-          await FirebaseFirestore.instance.collection('users').get();\n-\n-      setState(() {\n-        _userEmails = usersSnapshot.docs\n-            .map((doc) => doc.data()['email'] as String)\n-            .toList();\n-      });\n-    } catch (e) {\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Error loading users: $e')),\n-        );\n-      }\n-    }\n-  }\n-\n-  Future<void> _sendConsultationRequest() async {\n+  Future<void> _sendEmail() async {\n     if (!_formKey.currentState!.validate()) return;\n-    if (_selectedUserEmail == null) {\n+    if (_selectedDoctorEmail == null) {\n       ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(content: Text('Please select a user')),\n+        const SnackBar(content: Text('Please select a doctor')),\n       );\n       return;\n     }\n \n@@ -61,30 +41,33 @@\n     try {\n       final user = FirebaseAuth.instance.currentUser;\n       if (user == null) throw Exception('User not logged in');\n \n-      // Create a consultation request document in Firestore\n-      await FirebaseFirestore.instance.collection('consultation_requests').add({\n-        'patientId': user.uid,\n-        'patientName': user.displayName,\n-        'patientEmail': user.email,\n-        'selectedUserEmail': _selectedUserEmail,\n-        'description': _descriptionController.text,\n-        'status': 'pending',\n-        'timestamp': FieldValue.serverTimestamp(),\n-      });\n+      final Email email = Email(\n+        body: '''\n+Patient Name: ${user.displayName ?? 'Anonymous'}\n+Patient Email: ${user.email}\n \n+Medical Concern:\n+${_descriptionController.text}\n+''',\n+        subject: 'Medical Consultation Request',\n+        recipients: [_selectedDoctorEmail!],\n+        isHTML: false,\n+      );\n+\n+      await FlutterEmailSender.send(email);\n+\n       if (mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n-          const SnackBar(\n-              content: Text('Consultation request sent successfully')),\n+          const SnackBar(content: Text('Email sent successfully')),\n         );\n         Navigator.pop(context);\n       }\n     } catch (e) {\n       if (mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Error sending request: $e')),\n+          SnackBar(content: Text('Error sending email: $e')),\n         );\n       }\n     } finally {\n       setState(() => _isLoading = false);\n@@ -96,9 +79,9 @@\n     final user = FirebaseAuth.instance.currentUser;\n \n     return Scaffold(\n       appBar: AppBar(\n-        title: const Text('Contact User'),\n+        title: const Text('Contact Doctor'),\n         backgroundColor: Colors.teal,\n       ),\n       body: Form(\n         key: _formKey,\n@@ -136,37 +119,37 @@\n                 ),\n               ),\n               const SizedBox(height: 24),\n \n-              // User Selection\n+              // Doctor Selection\n               const Text(\n-                'Select User',\n+                'Select Doctor',\n                 style: TextStyle(\n                   fontSize: 20,\n                   fontWeight: FontWeight.bold,\n                 ),\n               ),\n               const SizedBox(height: 16),\n               DropdownButtonFormField<String>(\n-                value: _selectedUserEmail,\n+                value: _selectedDoctorEmail,\n                 decoration: const InputDecoration(\n-                  labelText: 'Choose User',\n+                  labelText: 'Choose Doctor',\n                   border: OutlineInputBorder(),\n                 ),\n-                items: _userEmails.map((email) {\n+                items: _doctors.map((doctor) {\n                   return DropdownMenuItem(\n-                    value: email,\n-                    child: Text(email),\n+                    value: doctor['email'],\n+                    child: Text('${doctor['name']} (${doctor['email']})'),\n                   );\n                 }).toList(),\n                 onChanged: (value) {\n                   setState(() {\n-                    _selectedUserEmail = value;\n+                    _selectedDoctorEmail = value;\n                   });\n                 },\n                 validator: (value) {\n                   if (value == null || value.isEmpty) {\n-                    return 'Please select a user';\n+                    return 'Please select a doctor';\n                   }\n                   return null;\n                 },\n               ),\n@@ -201,17 +184,17 @@\n               // Send Button\n               SizedBox(\n                 width: double.infinity,\n                 child: ElevatedButton(\n-                  onPressed: _isLoading ? null : _sendConsultationRequest,\n+                  onPressed: _isLoading ? null : _sendEmail,\n                   style: ElevatedButton.styleFrom(\n                     backgroundColor: Colors.teal,\n                     padding: const EdgeInsets.symmetric(vertical: 16),\n                   ),\n                   child: _isLoading\n                       ? const CircularProgressIndicator(color: Colors.white)\n                       : const Text(\n-                          'Send Consultation Request',\n+                          'Send Email',\n                           style: TextStyle(fontSize: 16),\n                         ),\n                 ),\n               ),\n"
                },
                {
                    "date": 1744630265097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter_email_sender/flutter_email_sender.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n \n class ContactDoctorScreen extends StatefulWidget {\n   const ContactDoctorScreen({super.key});\n \n@@ -11,28 +11,48 @@\n \n class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\n   final _formKey = GlobalKey<FormState>();\n   final _descriptionController = TextEditingController();\n-  String? _selectedDoctorEmail;\n+  String? _selectedUserEmail;\n+  List<String> _userEmails = [];\n   bool _isLoading = false;\n \n-  // Predefined list of doctors\n-  final List<Map<String, String>> _doctors = [\n-    {'email': 'bt22csh045@iiitn.ac.in', 'name': 'Doctor 1'},\n-    {'email': 'vivekxsingh2004@gmail.com', 'name': 'Doctor 2'},\n-  ];\n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadUsers();\n+  }\n \n   @override\n   void dispose() {\n     _descriptionController.dispose();\n     super.dispose();\n   }\n \n-  Future<void> _sendEmail() async {\n+  Future<void> _loadUsers() async {\n+    try {\n+      final usersSnapshot =\n+          await FirebaseFirestore.instance.collection('users').get();\n+\n+      setState(() {\n+        _userEmails = usersSnapshot.docs\n+            .map((doc) => doc.data()['email'] as String)\n+            .toList();\n+      });\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(content: Text('Error loading users: $e')),\n+        );\n+      }\n+    }\n+  }\n+\n+  Future<void> _sendConsultationRequest() async {\n     if (!_formKey.currentState!.validate()) return;\n-    if (_selectedDoctorEmail == null) {\n+    if (_selectedUserEmail == null) {\n       ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(content: Text('Please select a doctor')),\n+        const SnackBar(content: Text('Please select a user')),\n       );\n       return;\n     }\n \n@@ -41,33 +61,30 @@\n     try {\n       final user = FirebaseAuth.instance.currentUser;\n       if (user == null) throw Exception('User not logged in');\n \n-      final Email email = Email(\n-        body: '''\n-Patient Name: ${user.displayName ?? 'Anonymous'}\n-Patient Email: ${user.email}\n+      // Create a consultation request document in Firestore\n+      await FirebaseFirestore.instance.collection('consultation_requests').add({\n+        'patientId': user.uid,\n+        'patientName': user.displayName,\n+        'patientEmail': user.email,\n+        'selectedUserEmail': _selectedUserEmail,\n+        'description': _descriptionController.text,\n+        'status': 'pending',\n+        'timestamp': FieldValue.serverTimestamp(),\n+      });\n \n-Medical Concern:\n-${_descriptionController.text}\n-''',\n-        subject: 'Medical Consultation Request',\n-        recipients: [_selectedDoctorEmail!],\n-        isHTML: false,\n-      );\n-\n-      await FlutterEmailSender.send(email);\n-\n       if (mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n-          const SnackBar(content: Text('Email sent successfully')),\n+          const SnackBar(\n+              content: Text('Consultation request sent successfully')),\n         );\n         Navigator.pop(context);\n       }\n     } catch (e) {\n       if (mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Error sending email: $e')),\n+          SnackBar(content: Text('Error sending request: $e')),\n         );\n       }\n     } finally {\n       setState(() => _isLoading = false);\n@@ -79,9 +96,9 @@\n     final user = FirebaseAuth.instance.currentUser;\n \n     return Scaffold(\n       appBar: AppBar(\n-        title: const Text('Contact Doctor'),\n+        title: const Text('Contact User'),\n         backgroundColor: Colors.teal,\n       ),\n       body: Form(\n         key: _formKey,\n@@ -119,37 +136,37 @@\n                 ),\n               ),\n               const SizedBox(height: 24),\n \n-              // Doctor Selection\n+              // User Selection\n               const Text(\n-                'Select Doctor',\n+                'Select User',\n                 style: TextStyle(\n                   fontSize: 20,\n                   fontWeight: FontWeight.bold,\n                 ),\n               ),\n               const SizedBox(height: 16),\n               DropdownButtonFormField<String>(\n-                value: _selectedDoctorEmail,\n+                value: _selectedUserEmail,\n                 decoration: const InputDecoration(\n-                  labelText: 'Choose Doctor',\n+                  labelText: 'Choose User',\n                   border: OutlineInputBorder(),\n                 ),\n-                items: _doctors.map((doctor) {\n+                items: _userEmails.map((email) {\n                   return DropdownMenuItem(\n-                    value: doctor['email'],\n-                    child: Text('${doctor['name']} (${doctor['email']})'),\n+                    value: email,\n+                    child: Text(email),\n                   );\n                 }).toList(),\n                 onChanged: (value) {\n                   setState(() {\n-                    _selectedDoctorEmail = value;\n+                    _selectedUserEmail = value;\n                   });\n                 },\n                 validator: (value) {\n                   if (value == null || value.isEmpty) {\n-                    return 'Please select a doctor';\n+                    return 'Please select a user';\n                   }\n                   return null;\n                 },\n               ),\n@@ -184,17 +201,17 @@\n               // Send Button\n               SizedBox(\n                 width: double.infinity,\n                 child: ElevatedButton(\n-                  onPressed: _isLoading ? null : _sendEmail,\n+                  onPressed: _isLoading ? null : _sendConsultationRequest,\n                   style: ElevatedButton.styleFrom(\n                     backgroundColor: Colors.teal,\n                     padding: const EdgeInsets.symmetric(vertical: 16),\n                   ),\n                   child: _isLoading\n                       ? const CircularProgressIndicator(color: Colors.white)\n                       : const Text(\n-                          'Send Email',\n+                          'Send Consultation Request',\n                           style: TextStyle(fontSize: 16),\n                         ),\n                 ),\n               ),\n"
                },
                {
                    "date": 1744633635971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,224 +1,291 @@\n import 'package:flutter/material.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:google_fonts/google_fonts.dart';\n \n-class ContactDoctorScreen extends StatefulWidget {\n+class ContactDoctorScreen extends StatelessWidget {\n   const ContactDoctorScreen({super.key});\n \n   @override\n-  State<ContactDoctorScreen> createState() => _ContactDoctorScreenState();\n-}\n-\n-class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\n-  final _formKey = GlobalKey<FormState>();\n-  final _descriptionController = TextEditingController();\n-  String? _selectedUserEmail;\n-  List<String> _userEmails = [];\n-  bool _isLoading = false;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-    _loadUsers();\n-  }\n-\n-  @override\n-  void dispose() {\n-    _descriptionController.dispose();\n-    super.dispose();\n-  }\n-\n-  Future<void> _loadUsers() async {\n-    try {\n-      final usersSnapshot =\n-          await FirebaseFirestore.instance.collection('users').get();\n-\n-      setState(() {\n-        _userEmails = usersSnapshot.docs\n-            .map((doc) => doc.data()['email'] as String)\n-            .toList();\n-      });\n-    } catch (e) {\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Error loading users: $e')),\n-        );\n-      }\n-    }\n-  }\n-\n-  Future<void> _sendConsultationRequest() async {\n-    if (!_formKey.currentState!.validate()) return;\n-    if (_selectedUserEmail == null) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(content: Text('Please select a user')),\n-      );\n-      return;\n-    }\n-\n-    setState(() => _isLoading = true);\n-\n-    try {\n-      final user = FirebaseAuth.instance.currentUser;\n-      if (user == null) throw Exception('User not logged in');\n-\n-      // Create a consultation request document in Firestore\n-      await FirebaseFirestore.instance.collection('consultation_requests').add({\n-        'patientId': user.uid,\n-        'patientName': user.displayName,\n-        'patientEmail': user.email,\n-        'selectedUserEmail': _selectedUserEmail,\n-        'description': _descriptionController.text,\n-        'status': 'pending',\n-        'timestamp': FieldValue.serverTimestamp(),\n-      });\n-\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          const SnackBar(\n-              content: Text('Consultation request sent successfully')),\n-        );\n-        Navigator.pop(context);\n-      }\n-    } catch (e) {\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Error sending request: $e')),\n-        );\n-      }\n-    } finally {\n-      setState(() => _isLoading = false);\n-    }\n-  }\n-\n-  @override\n   Widget build(BuildContext context) {\n-    final user = FirebaseAuth.instance.currentUser;\n-\n     return Scaffold(\n+      backgroundColor: const Color(0xFFF8F9FA),\n       appBar: AppBar(\n-        title: const Text('Contact User'),\n-        backgroundColor: Colors.teal,\n+        title: Text(\n+          'Contact Doctor',\n+          style: GoogleFonts.poppins(\n+            fontSize: 20,\n+            fontWeight: FontWeight.w600,\n+            color: Colors.black87,\n+          ),\n+        ),\n+        backgroundColor: Colors.white,\n+        elevation: 0,\n       ),\n-      body: Form(\n-        key: _formKey,\n-        child: SingleChildScrollView(\n-          padding: const EdgeInsets.all(16),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              // Patient Information\n-              const Text(\n-                'Your Information',\n-                style: TextStyle(\n-                  fontSize: 20,\n-                  fontWeight: FontWeight.bold,\n-                ),\n+      body: SingleChildScrollView(\n+        padding: const EdgeInsets.all(20),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            // Doctor's Profile Card\n+            Container(\n+              padding: const EdgeInsets.all(16),\n+              decoration: BoxDecoration(\n+                color: Colors.white,\n+                borderRadius: BorderRadius.circular(16),\n+                boxShadow: [\n+                  BoxShadow(\n+                    color: Colors.black.withOpacity(0.05),\n+                    blurRadius: 10,\n+                    offset: const Offset(0, 4),\n+                  ),\n+                ],\n               ),\n-              const SizedBox(height: 16),\n-              Card(\n-                child: Padding(\n-                  padding: const EdgeInsets.all(16),\n-                  child: Column(\n-                    crossAxisAlignment: CrossAxisAlignment.start,\n-                    children: [\n-                      Text(\n-                        'Name: ${user?.displayName ?? 'Not available'}',\n-                        style: const TextStyle(fontSize: 16),\n-                      ),\n-                      const SizedBox(height: 8),\n-                      Text(\n-                        'Email: ${user?.email ?? 'Not available'}',\n-                        style: const TextStyle(fontSize: 16),\n-                      ),\n-                    ],\n+              child: Row(\n+                children: [\n+                  const CircleAvatar(\n+                    radius: 30,\n+                    backgroundImage: AssetImage('assets/doctor_avatar.png'),\n+                    backgroundColor: Color(0xFF2D9CDB),\n                   ),\n-                ),\n+                  const SizedBox(width: 16),\n+                  Expanded(\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+                        Text(\n+                          'Dr. Sarah Johnson',\n+                          style: GoogleFonts.poppins(\n+                            fontSize: 18,\n+                            fontWeight: FontWeight.w600,\n+                            color: Colors.black87,\n+                          ),\n+                        ),\n+                        const SizedBox(height: 4),\n+                        Text(\n+                          'General Physician',\n+                          style: GoogleFonts.poppins(\n+                            fontSize: 14,\n+                            color: Colors.black54,\n+                          ),\n+                        ),\n+                        const SizedBox(height: 4),\n+                        Row(\n+                          children: [\n+                            const Icon(\n+                              Icons.star,\n+                              color: Colors.amber,\n+                              size: 16,\n+                            ),\n+                            const SizedBox(width: 4),\n+                            Text(\n+                              '4.8 (120 reviews)',\n+                              style: GoogleFonts.poppins(\n+                                fontSize: 14,\n+                                color: Colors.black54,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                ],\n               ),\n-              const SizedBox(height: 24),\n+            ),\n+            const SizedBox(height: 24),\n \n-              // User Selection\n-              const Text(\n-                'Select User',\n-                style: TextStyle(\n-                  fontSize: 20,\n-                  fontWeight: FontWeight.bold,\n-                ),\n+            // Contact Options\n+            Text(\n+              'Contact Options',\n+              style: GoogleFonts.poppins(\n+                fontSize: 18,\n+                fontWeight: FontWeight.w600,\n+                color: Colors.black87,\n               ),\n-              const SizedBox(height: 16),\n-              DropdownButtonFormField<String>(\n-                value: _selectedUserEmail,\n-                decoration: const InputDecoration(\n-                  labelText: 'Choose User',\n-                  border: OutlineInputBorder(),\n-                ),\n-                items: _userEmails.map((email) {\n-                  return DropdownMenuItem(\n-                    value: email,\n-                    child: Text(email),\n-                  );\n-                }).toList(),\n-                onChanged: (value) {\n-                  setState(() {\n-                    _selectedUserEmail = value;\n-                  });\n-                },\n-                validator: (value) {\n-                  if (value == null || value.isEmpty) {\n-                    return 'Please select a user';\n-                  }\n-                  return null;\n-                },\n+            ),\n+            const SizedBox(height: 16),\n+            _ContactOptionCard(\n+              icon: Icons.video_call,\n+              title: 'Video Consultation',\n+              subtitle: 'Schedule a video call with your doctor',\n+              onTap: () {\n+                // Handle video consultation\n+              },\n+            ),\n+            const SizedBox(height: 12),\n+            _ContactOptionCard(\n+              icon: Icons.phone,\n+              title: 'Phone Call',\n+              subtitle: 'Call your doctor directly',\n+              onTap: () {\n+                // Handle phone call\n+              },\n+            ),\n+            const SizedBox(height: 12),\n+            _ContactOptionCard(\n+              icon: Icons.message,\n+              title: 'Message',\n+              subtitle: 'Send a message to your doctor',\n+              onTap: () {\n+                // Handle messaging\n+              },\n+            ),\n+            const SizedBox(height: 24),\n+\n+            // Available Time Slots\n+            Text(\n+              'Available Time Slots',\n+              style: GoogleFonts.poppins(\n+                fontSize: 18,\n+                fontWeight: FontWeight.w600,\n+                color: Colors.black87,\n               ),\n-              const SizedBox(height: 24),\n+            ),\n+            const SizedBox(height: 16),\n+            Wrap(\n+              spacing: 8,\n+              runSpacing: 8,\n+              children: [\n+                _TimeSlotChip(time: '9:00 AM', isAvailable: true),\n+                _TimeSlotChip(time: '10:00 AM', isAvailable: true),\n+                _TimeSlotChip(time: '11:00 AM', isAvailable: false),\n+                _TimeSlotChip(time: '2:00 PM', isAvailable: true),\n+                _TimeSlotChip(time: '3:00 PM', isAvailable: true),\n+                _TimeSlotChip(time: '4:00 PM', isAvailable: false),\n+              ],\n+            ),\n+            const SizedBox(height: 24),\n \n-              // Problem Description\n-              const Text(\n-                'Describe Your Problem',\n-                style: TextStyle(\n-                  fontSize: 20,\n-                  fontWeight: FontWeight.bold,\n+            // Book Appointment Button\n+            SizedBox(\n+              width: double.infinity,\n+              child: ElevatedButton(\n+                onPressed: () {\n+                  // Handle appointment booking\n+                },\n+                style: ElevatedButton.styleFrom(\n+                  backgroundColor: const Color(0xFF2D9CDB),\n+                  padding: const EdgeInsets.symmetric(vertical: 16),\n+                  shape: RoundedRectangleBorder(\n+                    borderRadius: BorderRadius.circular(12),\n+                  ),\n                 ),\n-              ),\n-              const SizedBox(height: 16),\n-              TextFormField(\n-                controller: _descriptionController,\n-                maxLines: 5,\n-                decoration: const InputDecoration(\n-                  labelText: 'Description',\n-                  border: OutlineInputBorder(),\n-                  hintText: 'Please describe your medical concern in detail...',\n+                child: Text(\n+                  'Book Appointment',\n+                  style: GoogleFonts.poppins(\n+                    fontSize: 16,\n+                    fontWeight: FontWeight.w600,\n+                    color: Colors.white,\n+                  ),\n                 ),\n-                validator: (value) {\n-                  if (value == null || value.isEmpty) {\n-                    return 'Please describe your problem';\n-                  }\n-                  return null;\n-                },\n               ),\n-              const SizedBox(height: 32),\n+            ),\n+            const SizedBox(height: 20), // Extra padding at the bottom\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+}\n \n-              // Send Button\n-              SizedBox(\n-                width: double.infinity,\n-                child: ElevatedButton(\n-                  onPressed: _isLoading ? null : _sendConsultationRequest,\n-                  style: ElevatedButton.styleFrom(\n-                    backgroundColor: Colors.teal,\n-                    padding: const EdgeInsets.symmetric(vertical: 16),\n+class _ContactOptionCard extends StatelessWidget {\n+  final IconData icon;\n+  final String title;\n+  final String subtitle;\n+  final VoidCallback onTap;\n+\n+  const _ContactOptionCard({\n+    required this.icon,\n+    required this.title,\n+    required this.subtitle,\n+    required this.onTap,\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return GestureDetector(\n+      onTap: onTap,\n+      child: Container(\n+        padding: const EdgeInsets.all(16),\n+        decoration: BoxDecoration(\n+          color: Colors.white,\n+          borderRadius: BorderRadius.circular(12),\n+          boxShadow: [\n+            BoxShadow(\n+              color: Colors.black.withOpacity(0.05),\n+              blurRadius: 10,\n+              offset: const Offset(0, 4),\n+            ),\n+          ],\n+        ),\n+        child: Row(\n+          children: [\n+            Icon(\n+              icon,\n+              size: 24,\n+              color: const Color(0xFF2D9CDB),\n+            ),\n+            const SizedBox(width: 16),\n+            Expanded(\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  Text(\n+                    title,\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 16,\n+                      fontWeight: FontWeight.w600,\n+                      color: Colors.black87,\n+                    ),\n                   ),\n-                  child: _isLoading\n-                      ? const CircularProgressIndicator(color: Colors.white)\n-                      : const Text(\n-                          'Send Consultation Request',\n-                          style: TextStyle(fontSize: 16),\n-                        ),\n-                ),\n+                  Text(\n+                    subtitle,\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 14,\n+                      color: Colors.black54,\n+                    ),\n+                  ),\n+                ],\n               ),\n-            ],\n-          ),\n+            ),\n+            const Icon(\n+              Icons.chevron_right,\n+              color: Colors.black54,\n+            ),\n+          ],\n         ),\n       ),\n     );\n   }\n }\n+\n+class _TimeSlotChip extends StatelessWidget {\n+  final String time;\n+  final bool isAvailable;\n+\n+  const _TimeSlotChip({\n+    required this.time,\n+    required this.isAvailable,\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Container(\n+      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n+      decoration: BoxDecoration(\n+        color: isAvailable ? const Color(0xFF2D9CDB).withOpacity(0.1) : Colors.grey.shade200,\n+        borderRadius: BorderRadius.circular(20),\n+        border: Border.all(\n+          color: isAvailable ? const Color(0xFF2D9CDB) : Colors.grey.shade300,\n+        ),\n+      ),\n+      child: Text(\n+        time,\n+        style: GoogleFonts.poppins(\n+          fontSize: 14,\n+          color: isAvailable ? const Color(0xFF2D9CDB) : Colors.grey,\n+          fontWeight: isAvailable ? FontWeight.w600 : FontWeight.normal,\n+        ),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744633749038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,11 @@\n   Widget build(BuildContext context) {\n     return Container(\n       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n       decoration: BoxDecoration(\n-        color: isAvailable ? const Color(0xFF2D9CDB).withOpacity(0.1) : Colors.grey.shade200,\n+        color: isAvailable\n+            ? const Color(0xFF2D9CDB).withOpacity(0.1)\n+            : Colors.grey.shade200,\n         borderRadius: BorderRadius.circular(20),\n         border: Border.all(\n           color: isAvailable ? const Color(0xFF2D9CDB) : Colors.grey.shade300,\n         ),\n"
                },
                {
                    "date": 1744635319597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:google_fonts/google_fonts.dart';\n+import 'package:medi_flow_new/video_consultation.dart';\n \n class ContactDoctorScreen extends StatelessWidget {\n   const ContactDoctorScreen({super.key});\n \n@@ -20,181 +21,66 @@\n         backgroundColor: Colors.white,\n         elevation: 0,\n       ),\n       body: SingleChildScrollView(\n-        padding: const EdgeInsets.all(20),\n+        padding: const EdgeInsets.all(16),\n         child: Column(\n           crossAxisAlignment: CrossAxisAlignment.start,\n           children: [\n-            // Doctor's Profile Card\n-            Container(\n-              padding: const EdgeInsets.all(16),\n-              decoration: BoxDecoration(\n-                color: Colors.white,\n-                borderRadius: BorderRadius.circular(16),\n-                boxShadow: [\n-                  BoxShadow(\n-                    color: Colors.black.withOpacity(0.05),\n-                    blurRadius: 10,\n-                    offset: const Offset(0, 4),\n-                  ),\n-                ],\n-              ),\n-              child: Row(\n-                children: [\n-                  const CircleAvatar(\n-                    radius: 30,\n-                    backgroundImage: AssetImage('assets/doctor_avatar.png'),\n-                    backgroundColor: Color(0xFF2D9CDB),\n-                  ),\n-                  const SizedBox(width: 16),\n-                  Expanded(\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-                        Text(\n-                          'Dr. Sarah Johnson',\n-                          style: GoogleFonts.poppins(\n-                            fontSize: 18,\n-                            fontWeight: FontWeight.w600,\n-                            color: Colors.black87,\n-                          ),\n-                        ),\n-                        const SizedBox(height: 4),\n-                        Text(\n-                          'General Physician',\n-                          style: GoogleFonts.poppins(\n-                            fontSize: 14,\n-                            color: Colors.black54,\n-                          ),\n-                        ),\n-                        const SizedBox(height: 4),\n-                        Row(\n-                          children: [\n-                            const Icon(\n-                              Icons.star,\n-                              color: Colors.amber,\n-                              size: 16,\n-                            ),\n-                            const SizedBox(width: 4),\n-                            Text(\n-                              '4.8 (120 reviews)',\n-                              style: GoogleFonts.poppins(\n-                                fontSize: 14,\n-                                color: Colors.black54,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ],\n-              ),\n-            ),\n-            const SizedBox(height: 24),\n-\n-            // Contact Options\n             Text(\n-              'Contact Options',\n+              'Available Consultation Options',\n               style: GoogleFonts.poppins(\n                 fontSize: 18,\n                 fontWeight: FontWeight.w600,\n                 color: Colors.black87,\n               ),\n             ),\n-            const SizedBox(height: 16),\n-            _ContactOptionCard(\n+            const SizedBox(height: 24),\n+            _ConsultationOption(\n               icon: Icons.video_call,\n               title: 'Video Consultation',\n-              subtitle: 'Schedule a video call with your doctor',\n+              subtitle: 'Schedule a video call with a doctor',\n               onTap: () {\n-                // Handle video consultation\n+                Navigator.push(\n+                  context,\n+                  MaterialPageRoute(\n+                    builder: (context) => const VideoConsultation(),\n+                  ),\n+                );\n               },\n             ),\n-            const SizedBox(height: 12),\n-            _ContactOptionCard(\n+            const SizedBox(height: 16),\n+            _ConsultationOption(\n               icon: Icons.phone,\n-              title: 'Phone Call',\n-              subtitle: 'Call your doctor directly',\n+              title: 'Phone Consultation',\n+              subtitle: 'Schedule a phone call with a doctor',\n               onTap: () {\n-                // Handle phone call\n+                // TODO: Implement phone consultation\n               },\n             ),\n-            const SizedBox(height: 12),\n-            _ContactOptionCard(\n+            const SizedBox(height: 16),\n+            _ConsultationOption(\n               icon: Icons.message,\n-              title: 'Message',\n-              subtitle: 'Send a message to your doctor',\n+              title: 'Chat Consultation',\n+              subtitle: 'Chat with a doctor in real-time',\n               onTap: () {\n-                // Handle messaging\n+                // TODO: Implement chat consultation\n               },\n             ),\n-            const SizedBox(height: 24),\n-\n-            // Available Time Slots\n-            Text(\n-              'Available Time Slots',\n-              style: GoogleFonts.poppins(\n-                fontSize: 18,\n-                fontWeight: FontWeight.w600,\n-                color: Colors.black87,\n-              ),\n-            ),\n-            const SizedBox(height: 16),\n-            Wrap(\n-              spacing: 8,\n-              runSpacing: 8,\n-              children: [\n-                _TimeSlotChip(time: '9:00 AM', isAvailable: true),\n-                _TimeSlotChip(time: '10:00 AM', isAvailable: true),\n-                _TimeSlotChip(time: '11:00 AM', isAvailable: false),\n-                _TimeSlotChip(time: '2:00 PM', isAvailable: true),\n-                _TimeSlotChip(time: '3:00 PM', isAvailable: true),\n-                _TimeSlotChip(time: '4:00 PM', isAvailable: false),\n-              ],\n-            ),\n-            const SizedBox(height: 24),\n-\n-            // Book Appointment Button\n-            SizedBox(\n-              width: double.infinity,\n-              child: ElevatedButton(\n-                onPressed: () {\n-                  // Handle appointment booking\n-                },\n-                style: ElevatedButton.styleFrom(\n-                  backgroundColor: const Color(0xFF2D9CDB),\n-                  padding: const EdgeInsets.symmetric(vertical: 16),\n-                  shape: RoundedRectangleBorder(\n-                    borderRadius: BorderRadius.circular(12),\n-                  ),\n-                ),\n-                child: Text(\n-                  'Book Appointment',\n-                  style: GoogleFonts.poppins(\n-                    fontSize: 16,\n-                    fontWeight: FontWeight.w600,\n-                    color: Colors.white,\n-                  ),\n-                ),\n-              ),\n-            ),\n-            const SizedBox(height: 20), // Extra padding at the bottom\n           ],\n         ),\n       ),\n     );\n   }\n }\n \n-class _ContactOptionCard extends StatelessWidget {\n+class _ConsultationOption extends StatelessWidget {\n   final IconData icon;\n   final String title;\n   final String subtitle;\n   final VoidCallback onTap;\n \n-  const _ContactOptionCard({\n+  const _ConsultationOption({\n     required this.icon,\n     required this.title,\n     required this.subtitle,\n     required this.onTap,\n@@ -218,12 +104,19 @@\n           ],\n         ),\n         child: Row(\n           children: [\n-            Icon(\n-              icon,\n-              size: 24,\n-              color: const Color(0xFF2D9CDB),\n+            Container(\n+              padding: const EdgeInsets.all(12),\n+              decoration: BoxDecoration(\n+                color: const Color(0xFF2D9CDB).withOpacity(0.1),\n+                borderRadius: BorderRadius.circular(12),\n+              ),\n+              child: Icon(\n+                icon,\n+                size: 32,\n+                color: const Color(0xFF2D9CDB),\n+              ),\n             ),\n             const SizedBox(width: 16),\n             Expanded(\n               child: Column(\n@@ -236,8 +129,9 @@\n                       fontWeight: FontWeight.w600,\n                       color: Colors.black87,\n                     ),\n                   ),\n+                  const SizedBox(height: 4),\n                   Text(\n                     subtitle,\n                     style: GoogleFonts.poppins(\n                       fontSize: 14,\n@@ -247,47 +141,14 @@\n                 ],\n               ),\n             ),\n             const Icon(\n-              Icons.chevron_right,\n+              Icons.arrow_forward_ios,\n+              size: 16,\n               color: Colors.black54,\n             ),\n           ],\n         ),\n       ),\n     );\n   }\n }\n-\n-class _TimeSlotChip extends StatelessWidget {\n-  final String time;\n-  final bool isAvailable;\n-\n-  const _TimeSlotChip({\n-    required this.time,\n-    required this.isAvailable,\n-  });\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Container(\n-      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n-      decoration: BoxDecoration(\n-        color: isAvailable\n-            ? const Color(0xFF2D9CDB).withOpacity(0.1)\n-            : Colors.grey.shade200,\n-        borderRadius: BorderRadius.circular(20),\n-        border: Border.all(\n-          color: isAvailable ? const Color(0xFF2D9CDB) : Colors.grey.shade300,\n-        ),\n-      ),\n-      child: Text(\n-        time,\n-        style: GoogleFonts.poppins(\n-          fontSize: 14,\n-          color: isAvailable ? const Color(0xFF2D9CDB) : Colors.grey,\n-          fontWeight: isAvailable ? FontWeight.w600 : FontWeight.normal,\n-        ),\n-      ),\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1744640049653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\n import 'package:google_fonts/google_fonts.dart';\n import 'package:medi_flow_new/video_consultation.dart';\n+import 'package:shared_preferences/shared_preferences.dart';\n \n class ContactDoctorScreen extends StatelessWidget {\n   const ContactDoctorScreen({super.key});\n \n@@ -70,10 +71,10 @@\n         ),\n       ),\n     );\n   }\n-}\n \n+  Future<void> _bookVideoConsultation(String date, String time, String doctor) async {\n class _ConsultationOption extends StatelessWidget {\n   final IconData icon;\n   final String title;\n   final String subtitle;\n"
                },
                {
                    "date": 1744640093183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,20 @@\n import 'package:flutter/material.dart';\n import 'package:google_fonts/google_fonts.dart';\n-import 'package:medi_flow_new/video_consultation.dart';\n import 'package:shared_preferences/shared_preferences.dart';\n \n-class ContactDoctorScreen extends StatelessWidget {\n-  const ContactDoctorScreen({super.key});\n+class ContactDoctorScreen extends StatefulWidget {\n+  const ContactDoctorScreen({Key? key}) : super(key: key);\n \n   @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: const Color(0xFFF8F9FA),\n-      appBar: AppBar(\n-        title: Text(\n-          'Contact Doctor',\n-          style: GoogleFonts.poppins(\n-            fontSize: 20,\n-            fontWeight: FontWeight.w600,\n-            color: Colors.black87,\n-          ),\n-        ),\n-        backgroundColor: Colors.white,\n-        elevation: 0,\n-      ),\n-      body: SingleChildScrollView(\n-        padding: const EdgeInsets.all(16),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            Text(\n-              'Available Consultation Options',\n-              style: GoogleFonts.poppins(\n-                fontSize: 18,\n-                fontWeight: FontWeight.w600,\n-                color: Colors.black87,\n-              ),\n-            ),\n-            const SizedBox(height: 24),\n-            _ConsultationOption(\n-              icon: Icons.video_call,\n-              title: 'Video Consultation',\n-              subtitle: 'Schedule a video call with a doctor',\n-              onTap: () {\n-                Navigator.push(\n-                  context,\n-                  MaterialPageRoute(\n-                    builder: (context) => const VideoConsultation(),\n-                  ),\n-                );\n-              },\n-            ),\n-            const SizedBox(height: 16),\n-            _ConsultationOption(\n-              icon: Icons.phone,\n-              title: 'Phone Consultation',\n-              subtitle: 'Schedule a phone call with a doctor',\n-              onTap: () {\n-                // TODO: Implement phone consultation\n-              },\n-            ),\n-            const SizedBox(height: 16),\n-            _ConsultationOption(\n-              icon: Icons.message,\n-              title: 'Chat Consultation',\n-              subtitle: 'Chat with a doctor in real-time',\n-              onTap: () {\n-                // TODO: Implement chat consultation\n-              },\n-            ),\n-          ],\n-        ),\n-      ),\n-    );\n-  }\n+  State<ContactDoctorScreen> createState() => _ContactDoctorScreenState();\n+}\n \n-  Future<void> _bookVideoConsultation(\n-      String date, String time, String doctor) async {\n+class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\n+  Future<void> _bookVideoConsultation(String date, String time, String doctor) async {\n     try {\n       final prefs = await SharedPreferences.getInstance();\n-\n+      \n       // Save consultation details\n       await prefs.setBool('has_consultation_booking', true);\n       await prefs.setString('consultation_date', date);\n       await prefs.setString('consultation_time', time);\n@@ -104,84 +40,166 @@\n         );\n       }\n     }\n   }\n-}\n \n-class _ConsultationOption extends StatelessWidget {\n-  final IconData icon;\n-  final String title;\n-  final String subtitle;\n-  final VoidCallback onTap;\n+  void _showBookingDialog() {\n+    showDialog(\n+      context: context,\n+      builder: (context) => AlertDialog(\n+        title: Text(\n+          'Book Video Consultation',\n+          style: GoogleFonts.poppins(\n+            fontWeight: FontWeight.w600,\n+          ),\n+        ),\n+        content: Column(\n+          mainAxisSize: MainAxisSize.min,\n+          children: [\n+            // Add date picker\n+            TextFormField(\n+              decoration: InputDecoration(\n+                labelText: 'Date',\n+                labelStyle: GoogleFonts.poppins(),\n+                border: OutlineInputBorder(\n+                  borderRadius: BorderRadius.circular(8),\n+                ),\n+              ),\n+              readOnly: true,\n+              onTap: () async {\n+                final date = await showDatePicker(\n+                  context: context,\n+                  initialDate: DateTime.now(),\n+                  firstDate: DateTime.now(),\n+                  lastDate: DateTime.now().add(const Duration(days: 30)),\n+                );\n+                if (date != null && mounted) {\n+                  _bookVideoConsultation(\n+                    date.toString().split(' ')[0],\n+                    '10:00 AM', // Default time\n+                    'Dr. Smith', // Default doctor\n+                  );\n+                }\n+              },\n+            ),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n \n-  const _ConsultationOption({\n-    required this.icon,\n-    required this.title,\n-    required this.subtitle,\n-    required this.onTap,\n-  });\n-\n   @override\n   Widget build(BuildContext context) {\n-    return GestureDetector(\n-      onTap: onTap,\n-      child: Container(\n-        padding: const EdgeInsets.all(16),\n-        decoration: BoxDecoration(\n-          color: Colors.white,\n-          borderRadius: BorderRadius.circular(12),\n-          boxShadow: [\n-            BoxShadow(\n-              color: Colors.black.withOpacity(0.05),\n-              blurRadius: 10,\n-              offset: const Offset(0, 4),\n+    return Scaffold(\n+      backgroundColor: const Color(0xFFF8F9FA),\n+      appBar: AppBar(\n+        title: Text(\n+          'Contact Doctor',\n+          style: GoogleFonts.poppins(\n+            fontSize: 20,\n+            fontWeight: FontWeight.w600,\n+            color: Colors.black87,\n+          ),\n+        ),\n+        backgroundColor: Colors.white,\n+        elevation: 0,\n+      ),\n+      body: Padding(\n+        padding: const EdgeInsets.all(20.0),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.stretch,\n+          children: [\n+            _buildContactOption(\n+              icon: Icons.videocam_outlined,\n+              title: 'Video Consultation',\n+              description: 'Book a video call with doctor',\n+              onTap: _showBookingDialog,\n             ),\n+            const SizedBox(height: 16),\n+            _buildContactOption(\n+              icon: Icons.phone_outlined,\n+              title: 'Phone Consultation',\n+              description: 'Schedule a phone call',\n+              onTap: () {\n+                // Handle phone consultation\n+              },\n+            ),\n+            const SizedBox(height: 16),\n+            _buildContactOption(\n+              icon: Icons.chat_outlined,\n+              title: 'Chat Consultation',\n+              description: 'Start a chat with doctor',\n+              onTap: () {\n+                // Handle chat consultation\n+              },\n+            ),\n           ],\n         ),\n-        child: Row(\n-          children: [\n-            Container(\n-              padding: const EdgeInsets.all(12),\n-              decoration: BoxDecoration(\n-                color: const Color(0xFF2D9CDB).withOpacity(0.1),\n-                borderRadius: BorderRadius.circular(12),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildContactOption({\n+    required IconData icon,\n+    required String title,\n+    required String description,\n+    required VoidCallback onTap,\n+  }) {\n+    return Card(\n+      elevation: 0,\n+      shape: RoundedRectangleBorder(\n+        borderRadius: BorderRadius.circular(12),\n+        side: const BorderSide(color: Color(0xFFE0E0E0)),\n+      ),\n+      child: InkWell(\n+        onTap: onTap,\n+        borderRadius: BorderRadius.circular(12),\n+        child: Padding(\n+          padding: const EdgeInsets.all(16),\n+          child: Row(\n+            children: [\n+              Container(\n+                padding: const EdgeInsets.all(12),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xFF2D9CDB).withOpacity(0.1),\n+                  borderRadius: BorderRadius.circular(12),\n+                ),\n+                child: Icon(\n+                  icon,\n+                  color: const Color(0xFF2D9CDB),\n+                  size: 24,\n+                ),\n               ),\n-              child: Icon(\n-                icon,\n-                size: 32,\n-                color: const Color(0xFF2D9CDB),\n-              ),\n-            ),\n-            const SizedBox(width: 16),\n-            Expanded(\n-              child: Column(\n-                crossAxisAlignment: CrossAxisAlignment.start,\n-                children: [\n-                  Text(\n-                    title,\n-                    style: GoogleFonts.poppins(\n-                      fontSize: 16,\n-                      fontWeight: FontWeight.w600,\n-                      color: Colors.black87,\n+              const SizedBox(width: 16),\n+              Expanded(\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Text(\n+                      title,\n+                      style: GoogleFonts.poppins(\n+                        fontSize: 16,\n+                        fontWeight: FontWeight.w600,\n+                        color: Colors.black87,\n+                      ),\n                     ),\n-                  ),\n-                  const SizedBox(height: 4),\n-                  Text(\n-                    subtitle,\n-                    style: GoogleFonts.poppins(\n-                      fontSize: 14,\n-                      color: Colors.black54,\n+                    Text(\n+                      description,\n+                      style: GoogleFonts.poppins(\n+                        fontSize: 14,\n+                        color: Colors.black54,\n+                      ),\n                     ),\n-                  ),\n-                ],\n+                  ],\n+                ),\n               ),\n-            ),\n-            const Icon(\n-              Icons.arrow_forward_ios,\n-              size: 16,\n-              color: Colors.black54,\n-            ),\n-          ],\n+              const Icon(\n+                Icons.arrow_forward_ios,\n+                color: Colors.black54,\n+                size: 16,\n+              ),\n+            ],\n+          ),\n         ),\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1744640150541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,12 @@\n import 'package:flutter/material.dart';\n import 'package:google_fonts/google_fonts.dart';\n-import 'package:shared_preferences/shared_preferences.dart';\n+import 'package:medi_flow_new/video_consultation.dart';\n \n-class ContactDoctorScreen extends StatefulWidget {\n-  const ContactDoctorScreen({Key? key}) : super(key: key);\n+class ContactDoctorScreen extends StatelessWidget {\n+  const ContactDoctorScreen({super.key});\n \n   @override\n-  State<ContactDoctorScreen> createState() => _ContactDoctorScreenState();\n-}\n-\n-class _ContactDoctorScreenState extends State<ContactDoctorScreen> {\n-  Future<void> _bookVideoConsultation(\n-      String date, String time, String doctor) async {\n-    try {\n-      final prefs = await SharedPreferences.getInstance();\n-\n-      // Save consultation details\n-      await prefs.setBool('has_consultation_booking', true);\n-      await prefs.setString('consultation_date', date);\n-      await prefs.setString('consultation_time', time);\n-      await prefs.setString('consultation_doctor', doctor);\n-      await prefs.setString('consultation_type', 'Video Consultation');\n-\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          const SnackBar(\n-            content: Text('Video consultation booked successfully'),\n-            backgroundColor: Colors.green,\n-          ),\n-        );\n-        Navigator.pop(context); // Close the booking dialog\n-      }\n-    } catch (e) {\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Text('Error booking consultation: $e'),\n-            backgroundColor: Colors.red,\n-          ),\n-        );\n-      }\n-    }\n-  }\n-\n-  void _showBookingDialog() {\n-    showDialog(\n-      context: context,\n-      builder: (context) => AlertDialog(\n-        title: Text(\n-          'Book Video Consultation',\n-          style: GoogleFonts.poppins(\n-            fontWeight: FontWeight.w600,\n-          ),\n-        ),\n-        content: Column(\n-          mainAxisSize: MainAxisSize.min,\n-          children: [\n-            // Add date picker\n-            TextFormField(\n-              decoration: InputDecoration(\n-                labelText: 'Date',\n-                labelStyle: GoogleFonts.poppins(),\n-                border: OutlineInputBorder(\n-                  borderRadius: BorderRadius.circular(8),\n-                ),\n-              ),\n-              readOnly: true,\n-              onTap: () async {\n-                final date = await showDatePicker(\n-                  context: context,\n-                  initialDate: DateTime.now(),\n-                  firstDate: DateTime.now(),\n-                  lastDate: DateTime.now().add(const Duration(days: 30)),\n-                );\n-                if (date != null && mounted) {\n-                  _bookVideoConsultation(\n-                    date.toString().split(' ')[0],\n-                    '10:00 AM', // Default time\n-                    'Dr. Smith', // Default doctor\n-                  );\n-                }\n-              },\n-            ),\n-          ],\n-        ),\n-      ),\n-    );\n-  }\n-\n-  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       backgroundColor: const Color(0xFFF8F9FA),\n       appBar: AppBar(\n@@ -103,104 +20,134 @@\n         ),\n         backgroundColor: Colors.white,\n         elevation: 0,\n       ),\n-      body: Padding(\n-        padding: const EdgeInsets.all(20.0),\n+      body: SingleChildScrollView(\n+        padding: const EdgeInsets.all(16),\n         child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.stretch,\n+          crossAxisAlignment: CrossAxisAlignment.start,\n           children: [\n-            _buildContactOption(\n-              icon: Icons.videocam_outlined,\n+            Text(\n+              'Available Consultation Options',\n+              style: GoogleFonts.poppins(\n+                fontSize: 18,\n+                fontWeight: FontWeight.w600,\n+                color: Colors.black87,\n+              ),\n+            ),\n+            const SizedBox(height: 24),\n+            _ConsultationOption(\n+              icon: Icons.video_call,\n               title: 'Video Consultation',\n-              description: 'Book a video call with doctor',\n-              onTap: _showBookingDialog,\n+              subtitle: 'Schedule a video call with a doctor',\n+              onTap: () {\n+                Navigator.push(\n+                  context,\n+                  MaterialPageRoute(\n+                    builder: (context) => const VideoConsultation(),\n+                  ),\n+                );\n+              },\n             ),\n             const SizedBox(height: 16),\n-            _buildContactOption(\n-              icon: Icons.phone_outlined,\n+            _ConsultationOption(\n+              icon: Icons.phone,\n               title: 'Phone Consultation',\n-              description: 'Schedule a phone call',\n+              subtitle: 'Schedule a phone call with a doctor',\n               onTap: () {\n-                // Handle phone consultation\n+                // TODO: Implement phone consultation\n               },\n             ),\n             const SizedBox(height: 16),\n-            _buildContactOption(\n-              icon: Icons.chat_outlined,\n+            _ConsultationOption(\n+              icon: Icons.message,\n               title: 'Chat Consultation',\n-              description: 'Start a chat with doctor',\n+              subtitle: 'Chat with a doctor in real-time',\n               onTap: () {\n-                // Handle chat consultation\n+                // TODO: Implement chat consultation\n               },\n             ),\n           ],\n         ),\n       ),\n     );\n   }\n+}\n \n-  Widget _buildContactOption({\n-    required IconData icon,\n-    required String title,\n-    required String description,\n-    required VoidCallback onTap,\n-  }) {\n-    return Card(\n-      elevation: 0,\n-      shape: RoundedRectangleBorder(\n-        borderRadius: BorderRadius.circular(12),\n-        side: const BorderSide(color: Color(0xFFE0E0E0)),\n-      ),\n-      child: InkWell(\n-        onTap: onTap,\n-        borderRadius: BorderRadius.circular(12),\n-        child: Padding(\n-          padding: const EdgeInsets.all(16),\n-          child: Row(\n-            children: [\n-              Container(\n-                padding: const EdgeInsets.all(12),\n-                decoration: BoxDecoration(\n-                  color: const Color(0xFF2D9CDB).withOpacity(0.1),\n-                  borderRadius: BorderRadius.circular(12),\n-                ),\n-                child: Icon(\n-                  icon,\n-                  color: const Color(0xFF2D9CDB),\n-                  size: 24,\n-                ),\n+class _ConsultationOption extends StatelessWidget {\n+  final IconData icon;\n+  final String title;\n+  final String subtitle;\n+  final VoidCallback onTap;\n+\n+  const _ConsultationOption({\n+    required this.icon,\n+    required this.title,\n+    required this.subtitle,\n+    required this.onTap,\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return GestureDetector(\n+      onTap: onTap,\n+      child: Container(\n+        padding: const EdgeInsets.all(16),\n+        decoration: BoxDecoration(\n+          color: Colors.white,\n+          borderRadius: BorderRadius.circular(12),\n+          boxShadow: [\n+            BoxShadow(\n+              color: Colors.black.withOpacity(0.05),\n+              blurRadius: 10,\n+              offset: const Offset(0, 4),\n+            ),\n+          ],\n+        ),\n+        child: Row(\n+          children: [\n+            Container(\n+              padding: const EdgeInsets.all(12),\n+              decoration: BoxDecoration(\n+                color: const Color(0xFF2D9CDB).withOpacity(0.1),\n+                borderRadius: BorderRadius.circular(12),\n               ),\n-              const SizedBox(width: 16),\n-              Expanded(\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  children: [\n-                    Text(\n-                      title,\n-                      style: GoogleFonts.poppins(\n-                        fontSize: 16,\n-                        fontWeight: FontWeight.w600,\n-                        color: Colors.black87,\n-                      ),\n+              child: Icon(\n+                icon,\n+                size: 32,\n+                color: const Color(0xFF2D9CDB),\n+              ),\n+            ),\n+            const SizedBox(width: 16),\n+            Expanded(\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  Text(\n+                    title,\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 16,\n+                      fontWeight: FontWeight.w600,\n+                      color: Colors.black87,\n                     ),\n-                    Text(\n-                      description,\n-                      style: GoogleFonts.poppins(\n-                        fontSize: 14,\n-                        color: Colors.black54,\n-                      ),\n+                  ),\n+                  const SizedBox(height: 4),\n+                  Text(\n+                    subtitle,\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 14,\n+                      color: Colors.black54,\n                     ),\n-                  ],\n-                ),\n+                  ),\n+                ],\n               ),\n-              const Icon(\n-                Icons.arrow_forward_ios,\n-                color: Colors.black54,\n-                size: 16,\n-              ),\n-            ],\n-          ),\n+            ),\n+            const Icon(\n+              Icons.arrow_forward_ios,\n+              size: 16,\n+              color: Colors.black54,\n+            ),\n+          ],\n         ),\n       ),\n     );\n   }\n"
                }
            ],
            "date": 1744624494193,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:mailer/mailer.dart';\r\nimport 'package:mailer/smtp_server.dart';\r\n\r\nclass ContactDoctorScreen extends StatefulWidget {\r\n  const ContactDoctorScreen({super.key});\r\n\r\n  @override\r\n  State<ContactDoctorScreen> createState() => _ContactDoctorScreenState();\r\n}\r\n\r\nclass _ContactDoctorScreenState extends State<ContactDoctorScreen> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  final _descriptionController = TextEditingController();\r\n  String? _selectedDoctorEmail;\r\n  List<String> _doctorEmails = [];\r\n  bool _isLoading = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadDoctors();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _descriptionController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _loadDoctors() async {\r\n    try {\r\n      final doctorsSnapshot = await FirebaseFirestore.instance\r\n          .collection('doctors')\r\n          .get();\r\n\r\n      setState(() {\r\n        _doctorEmails = doctorsSnapshot.docs\r\n            .map((doc) => doc.data()['email'] as String)\r\n            .toList();\r\n      });\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text('Error loading doctors: $e')),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _sendEmail() async {\r\n    if (!_formKey.currentState!.validate()) return;\r\n    if (_selectedDoctorEmail == null) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Please select a doctor')),\r\n      );\r\n      return;\r\n    }\r\n\r\n    setState(() => _isLoading = true);\r\n\r\n    try {\r\n      final user = FirebaseAuth.instance.currentUser;\r\n      if (user == null) throw Exception('User not logged in');\r\n\r\n      // Configure SMTP server (using Gmail as example)\r\n      final smtpServer = SmtpServer(\r\n        'smtp.gmail.com',\r\n        username: 'your-email@gmail.com', // Replace with your email\r\n        password: 'your-app-password', // Replace with your app password\r\n        ssl: true,\r\n        port: 465,\r\n      );\r\n\r\n      // Create the email message\r\n      final message = Message()\r\n        ..from = Address(user.email!, user.displayName ?? 'Patient')\r\n        ..recipients.add(_selectedDoctorEmail!)\r\n        ..subject = 'Medical Consultation Request'\r\n        ..text = '''\r\nPatient Name: ${user.displayName ?? 'Anonymous'}\r\nPatient Email: ${user.email}\r\n\r\nDescription of Problem:\r\n${_descriptionController.text}\r\n''';\r\n\r\n      // Send the email\r\n      final sendReport = await send(message, smtpServer);\r\n      \r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('Email sent successfully')),\r\n        );\r\n        Navigator.pop(context);\r\n      }\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text('Error sending email: $e')),\r\n        );\r\n      }\r\n    } finally {\r\n      setState(() => _isLoading = false);\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final user = FirebaseAuth.instance.currentUser;\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Contact Doctor'),\r\n        backgroundColor: Colors.teal,\r\n      ),\r\n      body: Form(\r\n        key: _formKey,\r\n        child: SingleChildScrollView(\r\n          padding: const EdgeInsets.all(16),\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: [\r\n              // Patient Information\r\n              const Text(\r\n                'Your Information',\r\n                style: TextStyle(\r\n                  fontSize: 20,\r\n                  fontWeight: FontWeight.bold,\r\n                ),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              Card(\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(16),\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Name: ${user?.displayName ?? 'Not available'}',\r\n                        style: const TextStyle(fontSize: 16),\r\n                      ),\r\n                      const SizedBox(height: 8),\r\n                      Text(\r\n                        'Email: ${user?.email ?? 'Not available'}',\r\n                        style: const TextStyle(fontSize: 16),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ),\r\n              const SizedBox(height: 24),\r\n\r\n              // Doctor Selection\r\n              const Text(\r\n                'Select Doctor',\r\n                style: TextStyle(\r\n                  fontSize: 20,\r\n                  fontWeight: FontWeight.bold,\r\n                ),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              DropdownButtonFormField<String>(\r\n                value: _selectedDoctorEmail,\r\n                decoration: const InputDecoration(\r\n                  labelText: 'Choose Doctor',\r\n                  border: OutlineInputBorder(),\r\n                ),\r\n                items: _doctorEmails.map((email) {\r\n                  return DropdownMenuItem(\r\n                    value: email,\r\n                    child: Text(email),\r\n                  );\r\n                }).toList(),\r\n                onChanged: (value) {\r\n                  setState(() {\r\n                    _selectedDoctorEmail = value;\r\n                  });\r\n                },\r\n                validator: (value) {\r\n                  if (value == null || value.isEmpty) {\r\n                    return 'Please select a doctor';\r\n                  }\r\n                  return null;\r\n                },\r\n              ),\r\n              const SizedBox(height: 24),\r\n\r\n              // Problem Description\r\n              const Text(\r\n                'Describe Your Problem',\r\n                style: TextStyle(\r\n                  fontSize: 20,\r\n                  fontWeight: FontWeight.bold,\r\n                ),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              TextFormField(\r\n                controller: _descriptionController,\r\n                maxLines: 5,\r\n                decoration: const InputDecoration(\r\n                  labelText: 'Description',\r\n                  border: OutlineInputBorder(),\r\n                  hintText: 'Please describe your medical concern in detail...',\r\n                ),\r\n                validator: (value) {\r\n                  if (value == null || value.isEmpty) {\r\n                    return 'Please describe your problem';\r\n                  }\r\n                  return null;\r\n                },\r\n              ),\r\n              const SizedBox(height: 32),\r\n\r\n              // Send Button\r\n              SizedBox(\r\n                width: double.infinity,\r\n                child: ElevatedButton(\r\n                  onPressed: _isLoading ? null : _sendEmail,\r\n                  style: ElevatedButton.styleFrom(\r\n                    backgroundColor: Colors.teal,\r\n                    padding: const EdgeInsets.symmetric(vertical: 16),\r\n                  ),\r\n                  child: _isLoading\r\n                      ? const CircularProgressIndicator(color: Colors.white)\r\n                      : const Text(\r\n                          'Send to Doctor',\r\n                          style: TextStyle(fontSize: 16),\r\n                        ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
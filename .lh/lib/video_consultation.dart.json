{
    "sourceFile": "lib/video_consultation.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1744635303108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744635313369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,20 @@\n   bool _isLoading = false;\r\n \r\n   // Available time slots (in 24-hour format)\r\n   final List<String> _allTimeSlots = [\r\n-    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',\r\n-    '14:00', '14:30', '15:00', '15:30', '16:00', '16:30',\r\n+    '09:00',\r\n+    '09:30',\r\n+    '10:00',\r\n+    '10:30',\r\n+    '11:00',\r\n+    '11:30',\r\n+    '14:00',\r\n+    '14:30',\r\n+    '15:00',\r\n+    '15:30',\r\n+    '16:00',\r\n+    '16:30',\r\n   ];\r\n \r\n   @override\r\n   void initState() {\r\n@@ -36,12 +46,12 @@\n \r\n   List<String> _getAvailableTimeSlots() {\r\n     final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\r\n     final today = DateTime.now();\r\n-    \r\n+\r\n     // Filter out past time slots for today\r\n-    if (_selectedDay.year == today.year && \r\n-        _selectedDay.month == today.month && \r\n+    if (_selectedDay.year == today.year &&\r\n+        _selectedDay.month == today.month &&\r\n         _selectedDay.day == today.day) {\r\n       final currentTime = DateTime.now();\r\n       return _allTimeSlots.where((slot) {\r\n         final slotTime = slot.split(':');\r\n@@ -51,17 +61,19 @@\n           currentTime.day,\r\n           int.parse(slotTime[0]),\r\n           int.parse(slotTime[1]),\r\n         );\r\n-        return !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot') &&\r\n-               slotDateTime.isAfter(currentTime);\r\n+        return !bookedSlots\r\n+                .contains('${_selectedDay.toIso8601String()}|$slot') &&\r\n+            slotDateTime.isAfter(currentTime);\r\n       }).toList();\r\n     }\r\n-    \r\n+\r\n     // For future dates, only filter out booked slots\r\n-    return _allTimeSlots.where((slot) =>\r\n-      !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot')\r\n-    ).toList();\r\n+    return _allTimeSlots\r\n+        .where((slot) =>\r\n+            !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot'))\r\n+        .toList();\r\n   }\r\n \r\n   Future<void> _bookAppointment() async {\r\n     if (_selectedTime == null) return;\r\n@@ -216,11 +228,10 @@\n                       });\r\n                     },\r\n                     child: Container(\r\n                       decoration: BoxDecoration(\r\n-                        color: isSelected\r\n-                            ? const Color(0xFF2D9CDB)\r\n-                            : Colors.white,\r\n+                        color:\r\n+                            isSelected ? const Color(0xFF2D9CDB) : Colors.white,\r\n                         borderRadius: BorderRadius.circular(8),\r\n                         border: Border.all(\r\n                           color: isSelected\r\n                               ? const Color(0xFF2D9CDB)\r\n@@ -260,9 +271,10 @@\n                         height: 20,\r\n                         width: 20,\r\n                         child: CircularProgressIndicator(\r\n                           strokeWidth: 2,\r\n-                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n+                          valueColor:\r\n+                              AlwaysStoppedAnimation<Color>(Colors.white),\r\n                         ),\r\n                       )\r\n                     : Text(\r\n                         'Book Appointment',\r\n@@ -277,5 +289,5 @@\n         ),\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744635427284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,15 @@\n   DateTime _selectedDay = DateTime.now();\r\n   DateTime _focusedDay = DateTime.now();\r\n   String? _selectedTime;\r\n   bool _isLoading = false;\r\n+  bool _isPrefsInitialized = false;\r\n \r\n+  // Doctor information\r\n+  final String _doctorName = 'Dr. Sarah Johnson';\r\n+  final String _doctorSpecialty = 'General Physician';\r\n+  final String _doctorAvatar = 'assets/images/doctor_avatar.png';\r\n+\r\n   // Available time slots (in 24-hour format)\r\n   final List<String> _allTimeSlots = [\r\n     '09:00',\r\n     '09:30',\r\n@@ -36,16 +42,21 @@\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    _loadBookedSlots();\r\n+    _initializePrefs();\r\n   }\r\n \r\n-  Future<void> _loadBookedSlots() async {\r\n+  Future<void> _initializePrefs() async {\r\n     _prefs = await SharedPreferences.getInstance();\r\n+    setState(() {\r\n+      _isPrefsInitialized = true;\r\n+    });\r\n   }\r\n \r\n   List<String> _getAvailableTimeSlots() {\r\n+    if (!_isPrefsInitialized) return [];\r\n+    \r\n     final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\r\n     final today = DateTime.now();\r\n \r\n     // Filter out past time slots for today\r\n@@ -75,9 +86,9 @@\n         .toList();\r\n   }\r\n \r\n   Future<void> _bookAppointment() async {\r\n-    if (_selectedTime == null) return;\r\n+    if (_selectedTime == null || !_isPrefsInitialized) return;\r\n \r\n     setState(() => _isLoading = true);\r\n \r\n     try {\r\n@@ -88,9 +99,9 @@\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           SnackBar(\r\n             content: Text(\r\n-              'Appointment booked for ${DateFormat('MMM d, y').format(_selectedDay)} at $_selectedTime',\r\n+              'Appointment booked with $_doctorName for ${DateFormat('MMM d, y').format(_selectedDay)} at $_selectedTime',\r\n             ),\r\n             backgroundColor: Colors.green,\r\n           ),\r\n         );\r\n@@ -129,165 +140,206 @@\n         ),\r\n         backgroundColor: Colors.white,\r\n         elevation: 0,\r\n       ),\r\n-      body: SingleChildScrollView(\r\n-        padding: const EdgeInsets.all(16),\r\n-        child: Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            Text(\r\n-              'Select Date',\r\n-              style: GoogleFonts.poppins(\r\n-                fontSize: 18,\r\n-                fontWeight: FontWeight.w600,\r\n-                color: Colors.black87,\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 16),\r\n-            Card(\r\n-              child: TableCalendar(\r\n-                firstDay: DateTime.now(),\r\n-                lastDay: DateTime.now().add(const Duration(days: 30)),\r\n-                focusedDay: _focusedDay,\r\n-                selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\r\n-                onDaySelected: (selectedDay, focusedDay) {\r\n-                  setState(() {\r\n-                    _selectedDay = selectedDay;\r\n-                    _focusedDay = focusedDay;\r\n-                    _selectedTime = null;\r\n-                  });\r\n-                },\r\n-                calendarStyle: CalendarStyle(\r\n-                  selectedDecoration: BoxDecoration(\r\n-                    color: const Color(0xFF2D9CDB),\r\n-                    shape: BoxShape.circle,\r\n+      body: !_isPrefsInitialized\r\n+          ? const Center(child: CircularProgressIndicator())\r\n+          : SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(16),\r\n+              child: Column(\r\n+                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                children: [\r\n+                  // Doctor Information Card\r\n+                  Card(\r\n+                    child: Padding(\r\n+                      padding: const EdgeInsets.all(16),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          CircleAvatar(\r\n+                            radius: 30,\r\n+                            backgroundImage: AssetImage(_doctorAvatar),\r\n+                          ),\r\n+                          const SizedBox(width: 16),\r\n+                          Expanded(\r\n+                            child: Column(\r\n+                              crossAxisAlignment: CrossAxisAlignment.start,\r\n+                              children: [\r\n+                                Text(\r\n+                                  _doctorName,\r\n+                                  style: GoogleFonts.poppins(\r\n+                                    fontSize: 18,\r\n+                                    fontWeight: FontWeight.w600,\r\n+                                    color: Colors.black87,\r\n+                                  ),\r\n+                                ),\r\n+                                const SizedBox(height: 4),\r\n+                                Text(\r\n+                                  _doctorSpecialty,\r\n+                                  style: GoogleFonts.poppins(\r\n+                                    fontSize: 14,\r\n+                                    color: Colors.black54,\r\n+                                  ),\r\n+                                ),\r\n+                              ],\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n                   ),\r\n-                  todayDecoration: BoxDecoration(\r\n-                    color: const Color(0xFF2D9CDB).withOpacity(0.3),\r\n-                    shape: BoxShape.circle,\r\n+                  const SizedBox(height: 24),\r\n+                  Text(\r\n+                    'Select Date',\r\n+                    style: GoogleFonts.poppins(\r\n+                      fontSize: 18,\r\n+                      fontWeight: FontWeight.w600,\r\n+                      color: Colors.black87,\r\n+                    ),\r\n                   ),\r\n-                ),\r\n-                headerStyle: HeaderStyle(\r\n-                  formatButtonVisible: false,\r\n-                  titleCentered: true,\r\n-                  titleTextStyle: GoogleFonts.poppins(\r\n-                    fontSize: 16,\r\n-                    fontWeight: FontWeight.w600,\r\n+                  const SizedBox(height: 16),\r\n+                  Card(\r\n+                    child: TableCalendar(\r\n+                      firstDay: DateTime.now(),\r\n+                      lastDay: DateTime.now().add(const Duration(days: 30)),\r\n+                      focusedDay: _focusedDay,\r\n+                      selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\r\n+                      onDaySelected: (selectedDay, focusedDay) {\r\n+                        setState(() {\r\n+                          _selectedDay = selectedDay;\r\n+                          _focusedDay = focusedDay;\r\n+                          _selectedTime = null;\r\n+                        });\r\n+                      },\r\n+                      calendarStyle: CalendarStyle(\r\n+                        selectedDecoration: BoxDecoration(\r\n+                          color: const Color(0xFF2D9CDB),\r\n+                          shape: BoxShape.circle,\r\n+                        ),\r\n+                        todayDecoration: BoxDecoration(\r\n+                          color: const Color(0xFF2D9CDB).withOpacity(0.3),\r\n+                          shape: BoxShape.circle,\r\n+                        ),\r\n+                      ),\r\n+                      headerStyle: HeaderStyle(\r\n+                        formatButtonVisible: false,\r\n+                        titleCentered: true,\r\n+                        titleTextStyle: GoogleFonts.poppins(\r\n+                          fontSize: 16,\r\n+                          fontWeight: FontWeight.w600,\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n                   ),\r\n-                ),\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 24),\r\n-            Text(\r\n-              'Available Time Slots',\r\n-              style: GoogleFonts.poppins(\r\n-                fontSize: 18,\r\n-                fontWeight: FontWeight.w600,\r\n-                color: Colors.black87,\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 16),\r\n-            if (availableSlots.isEmpty)\r\n-              Center(\r\n-                child: Column(\r\n-                  children: [\r\n-                    const Icon(\r\n-                      Icons.schedule,\r\n-                      size: 64,\r\n-                      color: Colors.grey,\r\n+                  const SizedBox(height: 24),\r\n+                  Text(\r\n+                    'Available Time Slots',\r\n+                    style: GoogleFonts.poppins(\r\n+                      fontSize: 18,\r\n+                      fontWeight: FontWeight.w600,\r\n+                      color: Colors.black87,\r\n                     ),\r\n-                    const SizedBox(height: 16),\r\n-                    Text(\r\n-                      'No slots available for this date',\r\n-                      style: GoogleFonts.poppins(\r\n-                        fontSize: 16,\r\n-                        color: Colors.grey[600],\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  if (availableSlots.isEmpty)\r\n+                    Center(\r\n+                      child: Column(\r\n+                        children: [\r\n+                          const Icon(\r\n+                            Icons.schedule,\r\n+                            size: 64,\r\n+                            color: Colors.grey,\r\n+                          ),\r\n+                          const SizedBox(height: 16),\r\n+                          Text(\r\n+                            'No slots available for this date',\r\n+                            style: GoogleFonts.poppins(\r\n+                              fontSize: 16,\r\n+                              color: Colors.grey[600],\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n                       ),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n-              )\r\n-            else\r\n-              GridView.builder(\r\n-                shrinkWrap: true,\r\n-                physics: const NeverScrollableScrollPhysics(),\r\n-                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\r\n-                  crossAxisCount: 3,\r\n-                  childAspectRatio: 2,\r\n-                  crossAxisSpacing: 8,\r\n-                  mainAxisSpacing: 8,\r\n-                ),\r\n-                itemCount: availableSlots.length,\r\n-                itemBuilder: (context, index) {\r\n-                  final slot = availableSlots[index];\r\n-                  final isSelected = _selectedTime == slot;\r\n-                  return GestureDetector(\r\n-                    onTap: () {\r\n-                      setState(() {\r\n-                        _selectedTime = slot;\r\n-                      });\r\n-                    },\r\n-                    child: Container(\r\n-                      decoration: BoxDecoration(\r\n-                        color:\r\n-                            isSelected ? const Color(0xFF2D9CDB) : Colors.white,\r\n-                        borderRadius: BorderRadius.circular(8),\r\n-                        border: Border.all(\r\n-                          color: isSelected\r\n-                              ? const Color(0xFF2D9CDB)\r\n-                              : const Color(0xFFE0E0E0),\r\n-                        ),\r\n+                    )\r\n+                  else\r\n+                    GridView.builder(\r\n+                      shrinkWrap: true,\r\n+                      physics: const NeverScrollableScrollPhysics(),\r\n+                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\r\n+                        crossAxisCount: 3,\r\n+                        childAspectRatio: 2,\r\n+                        crossAxisSpacing: 8,\r\n+                        mainAxisSpacing: 8,\r\n                       ),\r\n-                      child: Center(\r\n-                        child: Text(\r\n-                          slot,\r\n-                          style: GoogleFonts.poppins(\r\n-                            color: isSelected ? Colors.white : Colors.black87,\r\n-                            fontWeight: FontWeight.w500,\r\n+                      itemCount: availableSlots.length,\r\n+                      itemBuilder: (context, index) {\r\n+                        final slot = availableSlots[index];\r\n+                        final isSelected = _selectedTime == slot;\r\n+                        return GestureDetector(\r\n+                          onTap: () {\r\n+                            setState(() {\r\n+                              _selectedTime = slot;\r\n+                            });\r\n+                          },\r\n+                          child: Container(\r\n+                            decoration: BoxDecoration(\r\n+                              color:\r\n+                                  isSelected ? const Color(0xFF2D9CDB) : Colors.white,\r\n+                              borderRadius: BorderRadius.circular(8),\r\n+                              border: Border.all(\r\n+                                color: isSelected\r\n+                                    ? const Color(0xFF2D9CDB)\r\n+                                    : const Color(0xFFE0E0E0),\r\n+                              ),\r\n+                            ),\r\n+                            child: Center(\r\n+                              child: Text(\r\n+                                slot,\r\n+                                style: GoogleFonts.poppins(\r\n+                                  color: isSelected ? Colors.white : Colors.black87,\r\n+                                  fontWeight: FontWeight.w500,\r\n+                                ),\r\n+                              ),\r\n+                            ),\r\n                           ),\r\n+                        );\r\n+                      },\r\n+                    ),\r\n+                  const SizedBox(height: 32),\r\n+                  SizedBox(\r\n+                    width: double.infinity,\r\n+                    child: ElevatedButton(\r\n+                      onPressed: _selectedTime == null || _isLoading\r\n+                          ? null\r\n+                          : _bookAppointment,\r\n+                      style: ElevatedButton.styleFrom(\r\n+                        backgroundColor: const Color(0xFF2D9CDB),\r\n+                        foregroundColor: Colors.white,\r\n+                        padding: const EdgeInsets.symmetric(vertical: 16),\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(12),\r\n                         ),\r\n                       ),\r\n+                      child: _isLoading\r\n+                          ? const SizedBox(\r\n+                              height: 20,\r\n+                              width: 20,\r\n+                              child: CircularProgressIndicator(\r\n+                                strokeWidth: 2,\r\n+                                valueColor:\r\n+                                    AlwaysStoppedAnimation<Color>(Colors.white),\r\n+                              ),\r\n+                            )\r\n+                          : Text(\r\n+                              'Book Appointment',\r\n+                              style: GoogleFonts.poppins(\r\n+                                fontSize: 16,\r\n+                                fontWeight: FontWeight.w600,\r\n+                              ),\r\n+                            ),\r\n                     ),\r\n-                  );\r\n-                },\r\n-              ),\r\n-            const SizedBox(height: 32),\r\n-            SizedBox(\r\n-              width: double.infinity,\r\n-              child: ElevatedButton(\r\n-                onPressed: _selectedTime == null || _isLoading\r\n-                    ? null\r\n-                    : _bookAppointment,\r\n-                style: ElevatedButton.styleFrom(\r\n-                  backgroundColor: const Color(0xFF2D9CDB),\r\n-                  foregroundColor: Colors.white,\r\n-                  padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                  shape: RoundedRectangleBorder(\r\n-                    borderRadius: BorderRadius.circular(12),\r\n                   ),\r\n-                ),\r\n-                child: _isLoading\r\n-                    ? const SizedBox(\r\n-                        height: 20,\r\n-                        width: 20,\r\n-                        child: CircularProgressIndicator(\r\n-                          strokeWidth: 2,\r\n-                          valueColor:\r\n-                              AlwaysStoppedAnimation<Color>(Colors.white),\r\n-                        ),\r\n-                      )\r\n-                    : Text(\r\n-                        'Book Appointment',\r\n-                        style: GoogleFonts.poppins(\r\n-                          fontSize: 16,\r\n-                          fontWeight: FontWeight.w600,\r\n-                        ),\r\n-                      ),\r\n+                ],\r\n               ),\r\n             ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744636673283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,345 +1,293 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:google_fonts/google_fonts.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:intl/intl.dart';\r\n-import 'package:table_calendar/table_calendar.dart';\r\n-\r\n-class VideoConsultation extends StatefulWidget {\r\n-  const VideoConsultation({super.key});\r\n-\r\n-  @override\r\n-  State<VideoConsultation> createState() => _VideoConsultationState();\r\n-}\r\n-\r\n-class _VideoConsultationState extends State<VideoConsultation> {\r\n-  late SharedPreferences _prefs;\r\n-  DateTime _selectedDay = DateTime.now();\r\n-  DateTime _focusedDay = DateTime.now();\r\n-  String? _selectedTime;\r\n-  bool _isLoading = false;\r\n-  bool _isPrefsInitialized = false;\r\n-\r\n-  // Doctor information\r\n-  final String _doctorName = 'Dr. Sarah Johnson';\r\n-  final String _doctorSpecialty = 'General Physician';\r\n-  final String _doctorAvatar = 'assets/images/doctor_avatar.png';\r\n-\r\n-  // Available time slots (in 24-hour format)\r\n-  final List<String> _allTimeSlots = [\r\n-    '09:00',\r\n-    '09:30',\r\n-    '10:00',\r\n-    '10:30',\r\n-    '11:00',\r\n-    '11:30',\r\n-    '14:00',\r\n-    '14:30',\r\n-    '15:00',\r\n-    '15:30',\r\n-    '16:00',\r\n-    '16:30',\r\n-  ];\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initializePrefs();\r\n-  }\r\n-\r\n-  Future<void> _initializePrefs() async {\r\n-    _prefs = await SharedPreferences.getInstance();\r\n-    setState(() {\r\n-      _isPrefsInitialized = true;\r\n-    });\r\n-  }\r\n-\r\n-  List<String> _getAvailableTimeSlots() {\r\n-    if (!_isPrefsInitialized) return [];\r\n-    \r\n-    final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\r\n-    final today = DateTime.now();\r\n-\r\n-    // Filter out past time slots for today\r\n-    if (_selectedDay.year == today.year &&\r\n-        _selectedDay.month == today.month &&\r\n-        _selectedDay.day == today.day) {\r\n-      final currentTime = DateTime.now();\r\n-      return _allTimeSlots.where((slot) {\r\n-        final slotTime = slot.split(':');\r\n-        final slotDateTime = DateTime(\r\n-          currentTime.year,\r\n-          currentTime.month,\r\n-          currentTime.day,\r\n-          int.parse(slotTime[0]),\r\n-          int.parse(slotTime[1]),\r\n-        );\r\n-        return !bookedSlots\r\n-                .contains('${_selectedDay.toIso8601String()}|$slot') &&\r\n-            slotDateTime.isAfter(currentTime);\r\n-      }).toList();\r\n-    }\r\n-\r\n-    // For future dates, only filter out booked slots\r\n-    return _allTimeSlots\r\n-        .where((slot) =>\r\n-            !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot'))\r\n-        .toList();\r\n-  }\r\n-\r\n-  Future<void> _bookAppointment() async {\r\n-    if (_selectedTime == null || !_isPrefsInitialized) return;\r\n-\r\n-    setState(() => _isLoading = true);\r\n-\r\n-    try {\r\n-      final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\r\n-      bookedSlots.add('${_selectedDay.toIso8601String()}|$_selectedTime');\r\n-      await _prefs.setStringList('booked_slots', bookedSlots);\r\n-\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text(\r\n-              'Appointment booked with $_doctorName for ${DateFormat('MMM d, y').format(_selectedDay)} at $_selectedTime',\r\n-            ),\r\n-            backgroundColor: Colors.green,\r\n-          ),\r\n-        );\r\n-        Navigator.pop(context);\r\n-      }\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text('Error booking appointment: $e'),\r\n-            backgroundColor: Colors.red,\r\n-          ),\r\n-        );\r\n-      }\r\n-    } finally {\r\n-      if (mounted) {\r\n-        setState(() => _isLoading = false);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final availableSlots = _getAvailableTimeSlots();\r\n-\r\n-    return Scaffold(\r\n-      backgroundColor: const Color(0xFFF8F9FA),\r\n-      appBar: AppBar(\r\n-        title: Text(\r\n-          'Video Consultation',\r\n-          style: GoogleFonts.poppins(\r\n-            fontSize: 20,\r\n-            fontWeight: FontWeight.w600,\r\n-            color: Colors.black87,\r\n-          ),\r\n-        ),\r\n-        backgroundColor: Colors.white,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: !_isPrefsInitialized\r\n-          ? const Center(child: CircularProgressIndicator())\r\n-          : SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(16),\r\n-              child: Column(\r\n-                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                children: [\r\n-                  // Doctor Information Card\r\n-                  Card(\r\n-                    child: Padding(\r\n-                      padding: const EdgeInsets.all(16),\r\n-                      child: Row(\r\n-                        children: [\r\n-                          CircleAvatar(\r\n-                            radius: 30,\r\n-                            backgroundImage: AssetImage(_doctorAvatar),\r\n-                          ),\r\n-                          const SizedBox(width: 16),\r\n-                          Expanded(\r\n-                            child: Column(\r\n-                              crossAxisAlignment: CrossAxisAlignment.start,\r\n-                              children: [\r\n-                                Text(\r\n-                                  _doctorName,\r\n-                                  style: GoogleFonts.poppins(\r\n-                                    fontSize: 18,\r\n-                                    fontWeight: FontWeight.w600,\r\n-                                    color: Colors.black87,\r\n-                                  ),\r\n-                                ),\r\n-                                const SizedBox(height: 4),\r\n-                                Text(\r\n-                                  _doctorSpecialty,\r\n-                                  style: GoogleFonts.poppins(\r\n-                                    fontSize: 14,\r\n-                                    color: Colors.black54,\r\n-                                  ),\r\n-                                ),\r\n-                              ],\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(height: 24),\r\n-                  Text(\r\n-                    'Select Date',\r\n-                    style: GoogleFonts.poppins(\r\n-                      fontSize: 18,\r\n-                      fontWeight: FontWeight.w600,\r\n-                      color: Colors.black87,\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  Card(\r\n-                    child: TableCalendar(\r\n-                      firstDay: DateTime.now(),\r\n-                      lastDay: DateTime.now().add(const Duration(days: 30)),\r\n-                      focusedDay: _focusedDay,\r\n-                      selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\r\n-                      onDaySelected: (selectedDay, focusedDay) {\r\n-                        setState(() {\r\n-                          _selectedDay = selectedDay;\r\n-                          _focusedDay = focusedDay;\r\n-                          _selectedTime = null;\r\n-                        });\r\n-                      },\r\n-                      calendarStyle: CalendarStyle(\r\n-                        selectedDecoration: BoxDecoration(\r\n-                          color: const Color(0xFF2D9CDB),\r\n-                          shape: BoxShape.circle,\r\n-                        ),\r\n-                        todayDecoration: BoxDecoration(\r\n-                          color: const Color(0xFF2D9CDB).withOpacity(0.3),\r\n-                          shape: BoxShape.circle,\r\n-                        ),\r\n-                      ),\r\n-                      headerStyle: HeaderStyle(\r\n-                        formatButtonVisible: false,\r\n-                        titleCentered: true,\r\n-                        titleTextStyle: GoogleFonts.poppins(\r\n-                          fontSize: 16,\r\n-                          fontWeight: FontWeight.w600,\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(height: 24),\r\n-                  Text(\r\n-                    'Available Time Slots',\r\n-                    style: GoogleFonts.poppins(\r\n-                      fontSize: 18,\r\n-                      fontWeight: FontWeight.w600,\r\n-                      color: Colors.black87,\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  if (availableSlots.isEmpty)\r\n-                    Center(\r\n-                      child: Column(\r\n-                        children: [\r\n-                          const Icon(\r\n-                            Icons.schedule,\r\n-                            size: 64,\r\n-                            color: Colors.grey,\r\n-                          ),\r\n-                          const SizedBox(height: 16),\r\n-                          Text(\r\n-                            'No slots available for this date',\r\n-                            style: GoogleFonts.poppins(\r\n-                              fontSize: 16,\r\n-                              color: Colors.grey[600],\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    )\r\n-                  else\r\n-                    GridView.builder(\r\n-                      shrinkWrap: true,\r\n-                      physics: const NeverScrollableScrollPhysics(),\r\n-                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\r\n-                        crossAxisCount: 3,\r\n-                        childAspectRatio: 2,\r\n-                        crossAxisSpacing: 8,\r\n-                        mainAxisSpacing: 8,\r\n-                      ),\r\n-                      itemCount: availableSlots.length,\r\n-                      itemBuilder: (context, index) {\r\n-                        final slot = availableSlots[index];\r\n-                        final isSelected = _selectedTime == slot;\r\n-                        return GestureDetector(\r\n-                          onTap: () {\r\n-                            setState(() {\r\n-                              _selectedTime = slot;\r\n-                            });\r\n-                          },\r\n-                          child: Container(\r\n-                            decoration: BoxDecoration(\r\n-                              color:\r\n-                                  isSelected ? const Color(0xFF2D9CDB) : Colors.white,\r\n-                              borderRadius: BorderRadius.circular(8),\r\n-                              border: Border.all(\r\n-                                color: isSelected\r\n-                                    ? const Color(0xFF2D9CDB)\r\n-                                    : const Color(0xFFE0E0E0),\r\n-                              ),\r\n-                            ),\r\n-                            child: Center(\r\n-                              child: Text(\r\n-                                slot,\r\n-                                style: GoogleFonts.poppins(\r\n-                                  color: isSelected ? Colors.white : Colors.black87,\r\n-                                  fontWeight: FontWeight.w500,\r\n-                                ),\r\n-                              ),\r\n-                            ),\r\n-                          ),\r\n-                        );\r\n-                      },\r\n-                    ),\r\n-                  const SizedBox(height: 32),\r\n-                  SizedBox(\r\n-                    width: double.infinity,\r\n-                    child: ElevatedButton(\r\n-                      onPressed: _selectedTime == null || _isLoading\r\n-                          ? null\r\n-                          : _bookAppointment,\r\n-                      style: ElevatedButton.styleFrom(\r\n-                        backgroundColor: const Color(0xFF2D9CDB),\r\n-                        foregroundColor: Colors.white,\r\n-                        padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                        shape: RoundedRectangleBorder(\r\n-                          borderRadius: BorderRadius.circular(12),\r\n-                        ),\r\n-                      ),\r\n-                      child: _isLoading\r\n-                          ? const SizedBox(\r\n-                              height: 20,\r\n-                              width: 20,\r\n-                              child: CircularProgressIndicator(\r\n-                                strokeWidth: 2,\r\n-                                valueColor:\r\n-                                    AlwaysStoppedAnimation<Color>(Colors.white),\r\n-                              ),\r\n-                            )\r\n-                          : Text(\r\n-                              'Book Appointment',\r\n-                              style: GoogleFonts.poppins(\r\n-                                fontSize: 16,\r\n-                                fontWeight: FontWeight.w600,\r\n-                              ),\r\n-                            ),\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-    );\r\n-  }\r\n-}\r\n+import 'package:flutter/material.dart';\n+import 'package:google_fonts/google_fonts.dart';\n+import 'package:shared_preferences/shared_preferences.dart';\n+import 'package:intl/intl.dart';\n+import 'package:table_calendar/table_calendar.dart';\n+\n+class VideoConsultation extends StatefulWidget {\n+  const VideoConsultation({super.key});\n+\n+  @override\n+  State<VideoConsultation> createState() => _VideoConsultationState();\n+}\n+\n+class _VideoConsultationState extends State<VideoConsultation> {\n+  late SharedPreferences _prefs;\n+  DateTime _selectedDay = DateTime.now();\n+  DateTime _focusedDay = DateTime.now();\n+  String? _selectedTime;\n+  bool _isLoading = false;\n+\n+  // Available time slots (in 24-hour format)\n+  final List<String> _allTimeSlots = [\n+    '09:00',\n+    '09:30',\n+    '10:00',\n+    '10:30',\n+    '11:00',\n+    '11:30',\n+    '14:00',\n+    '14:30',\n+    '15:00',\n+    '15:30',\n+    '16:00',\n+    '16:30',\n+  ];\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadBookedSlots();\n+  }\n+\n+  Future<void> _loadBookedSlots() async {\n+    _prefs = await SharedPreferences.getInstance();\n+  }\n+\n+  List<String> _getAvailableTimeSlots() {\n+    final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\n+    final today = DateTime.now();\n+\n+    // Filter out past time slots for today\n+    if (_selectedDay.year == today.year &&\n+        _selectedDay.month == today.month &&\n+        _selectedDay.day == today.day) {\n+      final currentTime = DateTime.now();\n+      return _allTimeSlots.where((slot) {\n+        final slotTime = slot.split(':');\n+        final slotDateTime = DateTime(\n+          currentTime.year,\n+          currentTime.month,\n+          currentTime.day,\n+          int.parse(slotTime[0]),\n+          int.parse(slotTime[1]),\n+        );\n+        return !bookedSlots\n+                .contains('${_selectedDay.toIso8601String()}|$slot') &&\n+            slotDateTime.isAfter(currentTime);\n+      }).toList();\n+    }\n+\n+    // For future dates, only filter out booked slots\n+    return _allTimeSlots\n+        .where((slot) =>\n+            !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot'))\n+        .toList();\n+  }\n+\n+  Future<void> _bookAppointment() async {\n+    if (_selectedTime == null) return;\n+\n+    setState(() => _isLoading = true);\n+\n+    try {\n+      final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\n+      bookedSlots.add('${_selectedDay.toIso8601String()}|$_selectedTime');\n+      await _prefs.setStringList('booked_slots', bookedSlots);\n+\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text(\n+              'Appointment booked for ${DateFormat('MMM d, y').format(_selectedDay)} at $_selectedTime',\n+            ),\n+            backgroundColor: Colors.green,\n+          ),\n+        );\n+        Navigator.pop(context);\n+      }\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Error booking appointment: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    } finally {\n+      if (mounted) {\n+        setState(() => _isLoading = false);\n+      }\n+    }\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    final availableSlots = _getAvailableTimeSlots();\n+\n+    return Scaffold(\n+      backgroundColor: const Color(0xFFF8F9FA),\n+      appBar: AppBar(\n+        title: Text(\n+          'Video Consultation',\n+          style: GoogleFonts.poppins(\n+            fontSize: 20,\n+            fontWeight: FontWeight.w600,\n+            color: Colors.black87,\n+          ),\n+        ),\n+        backgroundColor: Colors.white,\n+        elevation: 0,\n+      ),\n+      body: SingleChildScrollView(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Text(\n+              'Select Date',\n+              style: GoogleFonts.poppins(\n+                fontSize: 18,\n+                fontWeight: FontWeight.w600,\n+                color: Colors.black87,\n+              ),\n+            ),\n+            const SizedBox(height: 16),\n+            Card(\n+              child: TableCalendar(\n+                firstDay: DateTime.now(),\n+                lastDay: DateTime.now().add(const Duration(days: 30)),\n+                focusedDay: _focusedDay,\n+                selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\n+                onDaySelected: (selectedDay, focusedDay) {\n+                  setState(() {\n+                    _selectedDay = selectedDay;\n+                    _focusedDay = focusedDay;\n+                    _selectedTime = null;\n+                  });\n+                },\n+                calendarStyle: CalendarStyle(\n+                  selectedDecoration: BoxDecoration(\n+                    color: const Color(0xFF2D9CDB),\n+                    shape: BoxShape.circle,\n+                  ),\n+                  todayDecoration: BoxDecoration(\n+                    color: const Color(0xFF2D9CDB).withOpacity(0.3),\n+                    shape: BoxShape.circle,\n+                  ),\n+                ),\n+                headerStyle: HeaderStyle(\n+                  formatButtonVisible: false,\n+                  titleCentered: true,\n+                  titleTextStyle: GoogleFonts.poppins(\n+                    fontSize: 16,\n+                    fontWeight: FontWeight.w600,\n+                  ),\n+                ),\n+              ),\n+            ),\n+            const SizedBox(height: 24),\n+            Text(\n+              'Available Time Slots',\n+              style: GoogleFonts.poppins(\n+                fontSize: 18,\n+                fontWeight: FontWeight.w600,\n+                color: Colors.black87,\n+              ),\n+            ),\n+            const SizedBox(height: 16),\n+            if (availableSlots.isEmpty)\n+              Center(\n+                child: Column(\n+                  children: [\n+                    const Icon(\n+                      Icons.schedule,\n+                      size: 64,\n+                      color: Colors.grey,\n+                    ),\n+                    const SizedBox(height: 16),\n+                    Text(\n+                      'No slots available for this date',\n+                      style: GoogleFonts.poppins(\n+                        fontSize: 16,\n+                        color: Colors.grey[600],\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              )\n+            else\n+              GridView.builder(\n+                shrinkWrap: true,\n+                physics: const NeverScrollableScrollPhysics(),\n+                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n+                  crossAxisCount: 3,\n+                  childAspectRatio: 2,\n+                  crossAxisSpacing: 8,\n+                  mainAxisSpacing: 8,\n+                ),\n+                itemCount: availableSlots.length,\n+                itemBuilder: (context, index) {\n+                  final slot = availableSlots[index];\n+                  final isSelected = _selectedTime == slot;\n+                  return GestureDetector(\n+                    onTap: () {\n+                      setState(() {\n+                        _selectedTime = slot;\n+                      });\n+                    },\n+                    child: Container(\n+                      decoration: BoxDecoration(\n+                        color:\n+                            isSelected ? const Color(0xFF2D9CDB) : Colors.white,\n+                        borderRadius: BorderRadius.circular(8),\n+                        border: Border.all(\n+                          color: isSelected\n+                              ? const Color(0xFF2D9CDB)\n+                              : const Color(0xFFE0E0E0),\n+                        ),\n+                      ),\n+                      child: Center(\n+                        child: Text(\n+                          slot,\n+                          style: GoogleFonts.poppins(\n+                            color: isSelected ? Colors.white : Colors.black87,\n+                            fontWeight: FontWeight.w500,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                  );\n+                },\n+              ),\n+            const SizedBox(height: 32),\n+            SizedBox(\n+              width: double.infinity,\n+              child: ElevatedButton(\n+                onPressed: _selectedTime == null || _isLoading\n+                    ? null\n+                    : _bookAppointment,\n+                style: ElevatedButton.styleFrom(\n+                  backgroundColor: const Color(0xFF2D9CDB),\n+                  foregroundColor: Colors.white,\n+                  padding: const EdgeInsets.symmetric(vertical: 16),\n+                  shape: RoundedRectangleBorder(\n+                    borderRadius: BorderRadius.circular(12),\n+                  ),\n+                ),\n+                child: _isLoading\n+                    ? const SizedBox(\n+                        height: 20,\n+                        width: 20,\n+                        child: CircularProgressIndicator(\n+                          strokeWidth: 2,\n+                          valueColor:\n+                              AlwaysStoppedAnimation<Color>(Colors.white),\n+                        ),\n+                      )\n+                    : Text(\n+                        'Book Appointment',\n+                        style: GoogleFonts.poppins(\n+                          fontSize: 16,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+              ),\n+            ),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744636790736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n   DateTime _selectedDay = DateTime.now();\n   DateTime _focusedDay = DateTime.now();\n   String? _selectedTime;\n   bool _isLoading = false;\n+  bool _isPrefsInitialized = false;\n \n   // Available time slots (in 24-hour format)\n   final List<String> _allTimeSlots = [\n     '09:00',\n@@ -36,16 +37,21 @@\n \n   @override\n   void initState() {\n     super.initState();\n-    _loadBookedSlots();\n+    _initializePrefs();\n   }\n \n-  Future<void> _loadBookedSlots() async {\n+  Future<void> _initializePrefs() async {\n     _prefs = await SharedPreferences.getInstance();\n+    setState(() {\n+      _isPrefsInitialized = true;\n+    });\n   }\n \n   List<String> _getAvailableTimeSlots() {\n+    if (!_isPrefsInitialized) return [];\n+    \n     final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\n     final today = DateTime.now();\n \n     // Filter out past time slots for today\n@@ -129,165 +135,233 @@\n         ),\n         backgroundColor: Colors.white,\n         elevation: 0,\n       ),\n-      body: SingleChildScrollView(\n-        padding: const EdgeInsets.all(16),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            Text(\n-              'Select Date',\n-              style: GoogleFonts.poppins(\n-                fontSize: 18,\n-                fontWeight: FontWeight.w600,\n-                color: Colors.black87,\n-              ),\n-            ),\n-            const SizedBox(height: 16),\n-            Card(\n-              child: TableCalendar(\n-                firstDay: DateTime.now(),\n-                lastDay: DateTime.now().add(const Duration(days: 30)),\n-                focusedDay: _focusedDay,\n-                selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\n-                onDaySelected: (selectedDay, focusedDay) {\n-                  setState(() {\n-                    _selectedDay = selectedDay;\n-                    _focusedDay = focusedDay;\n-                    _selectedTime = null;\n-                  });\n-                },\n-                calendarStyle: CalendarStyle(\n-                  selectedDecoration: BoxDecoration(\n-                    color: const Color(0xFF2D9CDB),\n-                    shape: BoxShape.circle,\n+      body: !_isPrefsInitialized\n+          ? const Center(child: CircularProgressIndicator())\n+          : SingleChildScrollView(\n+              padding: const EdgeInsets.all(16),\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  // Doctor Information Card\n+                  Card(\n+                    child: Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Row(\n+                        children: [\n+                          Container(\n+                            width: 80,\n+                            height: 80,\n+                            decoration: BoxDecoration(\n+                              shape: BoxShape.circle,\n+                              color: const Color(0xFF2D9CDB).withOpacity(0.1),\n+                            ),\n+                            child: const Icon(\n+                              Icons.person,\n+                              size: 40,\n+                              color: Color(0xFF2D9CDB),\n+                            ),\n+                          ),\n+                          const SizedBox(width: 16),\n+                          Expanded(\n+                            child: Column(\n+                              crossAxisAlignment: CrossAxisAlignment.start,\n+                              children: [\n+                                Text(\n+                                  'Dr. Sarah Johnson',\n+                                  style: GoogleFonts.poppins(\n+                                    fontSize: 18,\n+                                    fontWeight: FontWeight.w600,\n+                                    color: Colors.black87,\n+                                  ),\n+                                ),\n+                                const SizedBox(height: 4),\n+                                Text(\n+                                  'General Physician',\n+                                  style: GoogleFonts.poppins(\n+                                    fontSize: 14,\n+                                    color: Colors.black54,\n+                                  ),\n+                                ),\n+                                const SizedBox(height: 8),\n+                                Row(\n+                                  children: [\n+                                    Icon(\n+                                      Icons.star,\n+                                      size: 16,\n+                                      color: Colors.amber[700],\n+                                    ),\n+                                    const SizedBox(width: 4),\n+                                    Text(\n+                                      '4.8 (120 reviews)',\n+                                      style: GoogleFonts.poppins(\n+                                        fontSize: 14,\n+                                        color: Colors.black54,\n+                                      ),\n+                                    ),\n+                                  ],\n+                                ),\n+                              ],\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n                   ),\n-                  todayDecoration: BoxDecoration(\n-                    color: const Color(0xFF2D9CDB).withOpacity(0.3),\n-                    shape: BoxShape.circle,\n+                  const SizedBox(height: 24),\n+                  Text(\n+                    'Select Date',\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 18,\n+                      fontWeight: FontWeight.w600,\n+                      color: Colors.black87,\n+                    ),\n                   ),\n-                ),\n-                headerStyle: HeaderStyle(\n-                  formatButtonVisible: false,\n-                  titleCentered: true,\n-                  titleTextStyle: GoogleFonts.poppins(\n-                    fontSize: 16,\n-                    fontWeight: FontWeight.w600,\n+                  const SizedBox(height: 16),\n+                  Card(\n+                    child: TableCalendar(\n+                      firstDay: DateTime.now(),\n+                      lastDay: DateTime.now().add(const Duration(days: 30)),\n+                      focusedDay: _focusedDay,\n+                      selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\n+                      onDaySelected: (selectedDay, focusedDay) {\n+                        setState(() {\n+                          _selectedDay = selectedDay;\n+                          _focusedDay = focusedDay;\n+                          _selectedTime = null;\n+                        });\n+                      },\n+                      calendarStyle: CalendarStyle(\n+                        selectedDecoration: BoxDecoration(\n+                          color: const Color(0xFF2D9CDB),\n+                          shape: BoxShape.circle,\n+                        ),\n+                        todayDecoration: BoxDecoration(\n+                          color: const Color(0xFF2D9CDB).withOpacity(0.3),\n+                          shape: BoxShape.circle,\n+                        ),\n+                      ),\n+                      headerStyle: HeaderStyle(\n+                        formatButtonVisible: false,\n+                        titleCentered: true,\n+                        titleTextStyle: GoogleFonts.poppins(\n+                          fontSize: 16,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+                    ),\n                   ),\n-                ),\n-              ),\n-            ),\n-            const SizedBox(height: 24),\n-            Text(\n-              'Available Time Slots',\n-              style: GoogleFonts.poppins(\n-                fontSize: 18,\n-                fontWeight: FontWeight.w600,\n-                color: Colors.black87,\n-              ),\n-            ),\n-            const SizedBox(height: 16),\n-            if (availableSlots.isEmpty)\n-              Center(\n-                child: Column(\n-                  children: [\n-                    const Icon(\n-                      Icons.schedule,\n-                      size: 64,\n-                      color: Colors.grey,\n+                  const SizedBox(height: 24),\n+                  Text(\n+                    'Available Time Slots',\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 18,\n+                      fontWeight: FontWeight.w600,\n+                      color: Colors.black87,\n                     ),\n-                    const SizedBox(height: 16),\n-                    Text(\n-                      'No slots available for this date',\n-                      style: GoogleFonts.poppins(\n-                        fontSize: 16,\n-                        color: Colors.grey[600],\n+                  ),\n+                  const SizedBox(height: 16),\n+                  if (availableSlots.isEmpty)\n+                    Center(\n+                      child: Column(\n+                        children: [\n+                          const Icon(\n+                            Icons.schedule,\n+                            size: 64,\n+                            color: Colors.grey,\n+                          ),\n+                          const SizedBox(height: 16),\n+                          Text(\n+                            'No slots available for this date',\n+                            style: GoogleFonts.poppins(\n+                              fontSize: 16,\n+                              color: Colors.grey[600],\n+                            ),\n+                          ),\n+                        ],\n                       ),\n-                    ),\n-                  ],\n-                ),\n-              )\n-            else\n-              GridView.builder(\n-                shrinkWrap: true,\n-                physics: const NeverScrollableScrollPhysics(),\n-                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n-                  crossAxisCount: 3,\n-                  childAspectRatio: 2,\n-                  crossAxisSpacing: 8,\n-                  mainAxisSpacing: 8,\n-                ),\n-                itemCount: availableSlots.length,\n-                itemBuilder: (context, index) {\n-                  final slot = availableSlots[index];\n-                  final isSelected = _selectedTime == slot;\n-                  return GestureDetector(\n-                    onTap: () {\n-                      setState(() {\n-                        _selectedTime = slot;\n-                      });\n-                    },\n-                    child: Container(\n-                      decoration: BoxDecoration(\n-                        color:\n-                            isSelected ? const Color(0xFF2D9CDB) : Colors.white,\n-                        borderRadius: BorderRadius.circular(8),\n-                        border: Border.all(\n-                          color: isSelected\n-                              ? const Color(0xFF2D9CDB)\n-                              : const Color(0xFFE0E0E0),\n-                        ),\n+                    )\n+                  else\n+                    GridView.builder(\n+                      shrinkWrap: true,\n+                      physics: const NeverScrollableScrollPhysics(),\n+                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n+                        crossAxisCount: 3,\n+                        childAspectRatio: 2,\n+                        crossAxisSpacing: 8,\n+                        mainAxisSpacing: 8,\n                       ),\n-                      child: Center(\n-                        child: Text(\n-                          slot,\n-                          style: GoogleFonts.poppins(\n-                            color: isSelected ? Colors.white : Colors.black87,\n-                            fontWeight: FontWeight.w500,\n+                      itemCount: availableSlots.length,\n+                      itemBuilder: (context, index) {\n+                        final slot = availableSlots[index];\n+                        final isSelected = _selectedTime == slot;\n+                        return GestureDetector(\n+                          onTap: () {\n+                            setState(() {\n+                              _selectedTime = slot;\n+                            });\n+                          },\n+                          child: Container(\n+                            decoration: BoxDecoration(\n+                              color:\n+                                  isSelected ? const Color(0xFF2D9CDB) : Colors.white,\n+                              borderRadius: BorderRadius.circular(8),\n+                              border: Border.all(\n+                                color: isSelected\n+                                    ? const Color(0xFF2D9CDB)\n+                                    : const Color(0xFFE0E0E0),\n+                              ),\n+                            ),\n+                            child: Center(\n+                              child: Text(\n+                                slot,\n+                                style: GoogleFonts.poppins(\n+                                  color: isSelected ? Colors.white : Colors.black87,\n+                                  fontWeight: FontWeight.w500,\n+                                ),\n+                              ),\n+                            ),\n                           ),\n+                        );\n+                      },\n+                    ),\n+                  const SizedBox(height: 32),\n+                  SizedBox(\n+                    width: double.infinity,\n+                    child: ElevatedButton(\n+                      onPressed: _selectedTime == null || _isLoading\n+                          ? null\n+                          : _bookAppointment,\n+                      style: ElevatedButton.styleFrom(\n+                        backgroundColor: const Color(0xFF2D9CDB),\n+                        foregroundColor: Colors.white,\n+                        padding: const EdgeInsets.symmetric(vertical: 16),\n+                        shape: RoundedRectangleBorder(\n+                          borderRadius: BorderRadius.circular(12),\n                         ),\n                       ),\n+                      child: _isLoading\n+                          ? const SizedBox(\n+                              height: 20,\n+                              width: 20,\n+                              child: CircularProgressIndicator(\n+                                strokeWidth: 2,\n+                                valueColor:\n+                                    AlwaysStoppedAnimation<Color>(Colors.white),\n+                              ),\n+                            )\n+                          : Text(\n+                              'Book Appointment',\n+                              style: GoogleFonts.poppins(\n+                                fontSize: 16,\n+                                fontWeight: FontWeight.w600,\n+                              ),\n+                            ),\n                     ),\n-                  );\n-                },\n-              ),\n-            const SizedBox(height: 32),\n-            SizedBox(\n-              width: double.infinity,\n-              child: ElevatedButton(\n-                onPressed: _selectedTime == null || _isLoading\n-                    ? null\n-                    : _bookAppointment,\n-                style: ElevatedButton.styleFrom(\n-                  backgroundColor: const Color(0xFF2D9CDB),\n-                  foregroundColor: Colors.white,\n-                  padding: const EdgeInsets.symmetric(vertical: 16),\n-                  shape: RoundedRectangleBorder(\n-                    borderRadius: BorderRadius.circular(12),\n                   ),\n-                ),\n-                child: _isLoading\n-                    ? const SizedBox(\n-                        height: 20,\n-                        width: 20,\n-                        child: CircularProgressIndicator(\n-                          strokeWidth: 2,\n-                          valueColor:\n-                              AlwaysStoppedAnimation<Color>(Colors.white),\n-                        ),\n-                      )\n-                    : Text(\n-                        'Book Appointment',\n-                        style: GoogleFonts.poppins(\n-                          fontSize: 16,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n+                ],\n               ),\n             ),\n-          ],\n-        ),\n-      ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1744636797663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   }\n \n   List<String> _getAvailableTimeSlots() {\n     if (!_isPrefsInitialized) return [];\n-    \n+\n     final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\n     final today = DateTime.now();\n \n     // Filter out past time slots for today\n@@ -222,9 +222,10 @@\n                     child: TableCalendar(\n                       firstDay: DateTime.now(),\n                       lastDay: DateTime.now().add(const Duration(days: 30)),\n                       focusedDay: _focusedDay,\n-                      selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\n+                      selectedDayPredicate: (day) =>\n+                          isSameDay(_selectedDay, day),\n                       onDaySelected: (selectedDay, focusedDay) {\n                         setState(() {\n                           _selectedDay = selectedDay;\n                           _focusedDay = focusedDay;\n@@ -284,9 +285,10 @@\n                   else\n                     GridView.builder(\n                       shrinkWrap: true,\n                       physics: const NeverScrollableScrollPhysics(),\n-                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n+                      gridDelegate:\n+                          const SliverGridDelegateWithFixedCrossAxisCount(\n                         crossAxisCount: 3,\n                         childAspectRatio: 2,\n                         crossAxisSpacing: 8,\n                         mainAxisSpacing: 8,\n@@ -302,10 +304,11 @@\n                             });\n                           },\n                           child: Container(\n                             decoration: BoxDecoration(\n-                              color:\n-                                  isSelected ? const Color(0xFF2D9CDB) : Colors.white,\n+                              color: isSelected\n+                                  ? const Color(0xFF2D9CDB)\n+                                  : Colors.white,\n                               borderRadius: BorderRadius.circular(8),\n                               border: Border.all(\n                                 color: isSelected\n                                     ? const Color(0xFF2D9CDB)\n@@ -315,9 +318,11 @@\n                             child: Center(\n                               child: Text(\n                                 slot,\n                                 style: GoogleFonts.poppins(\n-                                  color: isSelected ? Colors.white : Colors.black87,\n+                                  color: isSelected\n+                                      ? Colors.white\n+                                      : Colors.black87,\n                                   fontWeight: FontWeight.w500,\n                                 ),\n                               ),\n                             ),\n"
                },
                {
                    "date": 1744640906440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,18 @@\n             ),\n             backgroundColor: Colors.green,\n           ),\n         );\n-        Navigator.pop(context);\n+        // Create a DateTime object for the selected date and time\n+        final slotTime = _selectedTime!.split(':');\n+        final selectedDateTime = DateTime(\n+          _selectedDay.year,\n+          _selectedDay.month,\n+          _selectedDay.day,\n+          int.parse(slotTime[0]),\n+          int.parse(slotTime[1]),\n+        );\n+        Navigator.pop(context, selectedDateTime);\n       }\n     } catch (e) {\n       if (mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n"
                }
            ],
            "date": 1744635303108,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport 'package:intl/intl.dart';\r\nimport 'package:table_calendar/table_calendar.dart';\r\n\r\nclass VideoConsultation extends StatefulWidget {\r\n  const VideoConsultation({super.key});\r\n\r\n  @override\r\n  State<VideoConsultation> createState() => _VideoConsultationState();\r\n}\r\n\r\nclass _VideoConsultationState extends State<VideoConsultation> {\r\n  late SharedPreferences _prefs;\r\n  DateTime _selectedDay = DateTime.now();\r\n  DateTime _focusedDay = DateTime.now();\r\n  String? _selectedTime;\r\n  bool _isLoading = false;\r\n\r\n  // Available time slots (in 24-hour format)\r\n  final List<String> _allTimeSlots = [\r\n    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',\r\n    '14:00', '14:30', '15:00', '15:30', '16:00', '16:30',\r\n  ];\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadBookedSlots();\r\n  }\r\n\r\n  Future<void> _loadBookedSlots() async {\r\n    _prefs = await SharedPreferences.getInstance();\r\n  }\r\n\r\n  List<String> _getAvailableTimeSlots() {\r\n    final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\r\n    final today = DateTime.now();\r\n    \r\n    // Filter out past time slots for today\r\n    if (_selectedDay.year == today.year && \r\n        _selectedDay.month == today.month && \r\n        _selectedDay.day == today.day) {\r\n      final currentTime = DateTime.now();\r\n      return _allTimeSlots.where((slot) {\r\n        final slotTime = slot.split(':');\r\n        final slotDateTime = DateTime(\r\n          currentTime.year,\r\n          currentTime.month,\r\n          currentTime.day,\r\n          int.parse(slotTime[0]),\r\n          int.parse(slotTime[1]),\r\n        );\r\n        return !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot') &&\r\n               slotDateTime.isAfter(currentTime);\r\n      }).toList();\r\n    }\r\n    \r\n    // For future dates, only filter out booked slots\r\n    return _allTimeSlots.where((slot) =>\r\n      !bookedSlots.contains('${_selectedDay.toIso8601String()}|$slot')\r\n    ).toList();\r\n  }\r\n\r\n  Future<void> _bookAppointment() async {\r\n    if (_selectedTime == null) return;\r\n\r\n    setState(() => _isLoading = true);\r\n\r\n    try {\r\n      final bookedSlots = _prefs.getStringList('booked_slots') ?? [];\r\n      bookedSlots.add('${_selectedDay.toIso8601String()}|$_selectedTime');\r\n      await _prefs.setStringList('booked_slots', bookedSlots);\r\n\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text(\r\n              'Appointment booked for ${DateFormat('MMM d, y').format(_selectedDay)} at $_selectedTime',\r\n            ),\r\n            backgroundColor: Colors.green,\r\n          ),\r\n        );\r\n        Navigator.pop(context);\r\n      }\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text('Error booking appointment: $e'),\r\n            backgroundColor: Colors.red,\r\n          ),\r\n        );\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() => _isLoading = false);\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final availableSlots = _getAvailableTimeSlots();\r\n\r\n    return Scaffold(\r\n      backgroundColor: const Color(0xFFF8F9FA),\r\n      appBar: AppBar(\r\n        title: Text(\r\n          'Video Consultation',\r\n          style: GoogleFonts.poppins(\r\n            fontSize: 20,\r\n            fontWeight: FontWeight.w600,\r\n            color: Colors.black87,\r\n          ),\r\n        ),\r\n        backgroundColor: Colors.white,\r\n        elevation: 0,\r\n      ),\r\n      body: SingleChildScrollView(\r\n        padding: const EdgeInsets.all(16),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              'Select Date',\r\n              style: GoogleFonts.poppins(\r\n                fontSize: 18,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            const SizedBox(height: 16),\r\n            Card(\r\n              child: TableCalendar(\r\n                firstDay: DateTime.now(),\r\n                lastDay: DateTime.now().add(const Duration(days: 30)),\r\n                focusedDay: _focusedDay,\r\n                selectedDayPredicate: (day) => isSameDay(_selectedDay, day),\r\n                onDaySelected: (selectedDay, focusedDay) {\r\n                  setState(() {\r\n                    _selectedDay = selectedDay;\r\n                    _focusedDay = focusedDay;\r\n                    _selectedTime = null;\r\n                  });\r\n                },\r\n                calendarStyle: CalendarStyle(\r\n                  selectedDecoration: BoxDecoration(\r\n                    color: const Color(0xFF2D9CDB),\r\n                    shape: BoxShape.circle,\r\n                  ),\r\n                  todayDecoration: BoxDecoration(\r\n                    color: const Color(0xFF2D9CDB).withOpacity(0.3),\r\n                    shape: BoxShape.circle,\r\n                  ),\r\n                ),\r\n                headerStyle: HeaderStyle(\r\n                  formatButtonVisible: false,\r\n                  titleCentered: true,\r\n                  titleTextStyle: GoogleFonts.poppins(\r\n                    fontSize: 16,\r\n                    fontWeight: FontWeight.w600,\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n            const SizedBox(height: 24),\r\n            Text(\r\n              'Available Time Slots',\r\n              style: GoogleFonts.poppins(\r\n                fontSize: 18,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            const SizedBox(height: 16),\r\n            if (availableSlots.isEmpty)\r\n              Center(\r\n                child: Column(\r\n                  children: [\r\n                    const Icon(\r\n                      Icons.schedule,\r\n                      size: 64,\r\n                      color: Colors.grey,\r\n                    ),\r\n                    const SizedBox(height: 16),\r\n                    Text(\r\n                      'No slots available for this date',\r\n                      style: GoogleFonts.poppins(\r\n                        fontSize: 16,\r\n                        color: Colors.grey[600],\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              )\r\n            else\r\n              GridView.builder(\r\n                shrinkWrap: true,\r\n                physics: const NeverScrollableScrollPhysics(),\r\n                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\r\n                  crossAxisCount: 3,\r\n                  childAspectRatio: 2,\r\n                  crossAxisSpacing: 8,\r\n                  mainAxisSpacing: 8,\r\n                ),\r\n                itemCount: availableSlots.length,\r\n                itemBuilder: (context, index) {\r\n                  final slot = availableSlots[index];\r\n                  final isSelected = _selectedTime == slot;\r\n                  return GestureDetector(\r\n                    onTap: () {\r\n                      setState(() {\r\n                        _selectedTime = slot;\r\n                      });\r\n                    },\r\n                    child: Container(\r\n                      decoration: BoxDecoration(\r\n                        color: isSelected\r\n                            ? const Color(0xFF2D9CDB)\r\n                            : Colors.white,\r\n                        borderRadius: BorderRadius.circular(8),\r\n                        border: Border.all(\r\n                          color: isSelected\r\n                              ? const Color(0xFF2D9CDB)\r\n                              : const Color(0xFFE0E0E0),\r\n                        ),\r\n                      ),\r\n                      child: Center(\r\n                        child: Text(\r\n                          slot,\r\n                          style: GoogleFonts.poppins(\r\n                            color: isSelected ? Colors.white : Colors.black87,\r\n                            fontWeight: FontWeight.w500,\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  );\r\n                },\r\n              ),\r\n            const SizedBox(height: 32),\r\n            SizedBox(\r\n              width: double.infinity,\r\n              child: ElevatedButton(\r\n                onPressed: _selectedTime == null || _isLoading\r\n                    ? null\r\n                    : _bookAppointment,\r\n                style: ElevatedButton.styleFrom(\r\n                  backgroundColor: const Color(0xFF2D9CDB),\r\n                  foregroundColor: Colors.white,\r\n                  padding: const EdgeInsets.symmetric(vertical: 16),\r\n                  shape: RoundedRectangleBorder(\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                ),\r\n                child: _isLoading\r\n                    ? const SizedBox(\r\n                        height: 20,\r\n                        width: 20,\r\n                        child: CircularProgressIndicator(\r\n                          strokeWidth: 2,\r\n                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n                        ),\r\n                      )\r\n                    : Text(\r\n                        'Book Appointment',\r\n                        style: GoogleFonts.poppins(\r\n                          fontSize: 16,\r\n                          fontWeight: FontWeight.w600,\r\n                        ),\r\n                      ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
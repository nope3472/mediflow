{
    "sourceFile": "lib/doctor_appointments_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744620910569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744621288511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,158 +1,1 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-class DoctorAppointmentsScreen extends StatefulWidget {\r\n-  const DoctorAppointmentsScreen({super.key});\r\n-\r\n-  @override\r\n-  State<DoctorAppointmentsScreen> createState() =>\r\n-      _DoctorAppointmentsScreenState();\r\n-}\r\n-\r\n-class _DoctorAppointmentsScreenState extends State<DoctorAppointmentsScreen> {\r\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n-  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n-\r\n-  Future<void> _updateAppointmentStatus(String appointmentId, String status,\r\n-      DateTime? date, TimeOfDay? time) async {\r\n-    try {\r\n-      await _firestore.collection('appointments').doc(appointmentId).update({\r\n-        'status': status,\r\n-        if (date != null) 'scheduledDate': Timestamp.fromDate(date),\r\n-        if (time != null) 'scheduledTime': '${time.hour}:${time.minute}',\r\n-        'updatedAt': FieldValue.serverTimestamp(),\r\n-      });\r\n-\r\n-      // Send notification to patient\r\n-      final appointment =\r\n-          await _firestore.collection('appointments').doc(appointmentId).get();\r\n-      final patientId = appointment.data()?['patientId'];\r\n-\r\n-      if (patientId != null) {\r\n-        await _firestore.collection('notifications').add({\r\n-          'userId': patientId,\r\n-          'title': 'Appointment Update',\r\n-          'message':\r\n-              'Your appointment has been $status for ${DateFormat('MMM d, y').format(date!)} at ${time!.format(context)}',\r\n-          'type': 'appointment',\r\n-          'read': false,\r\n-          'createdAt': FieldValue.serverTimestamp(),\r\n-        });\r\n-      }\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error updating appointment: $e')),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _selectDateTime(\r\n-      BuildContext context, String appointmentId) async {\r\n-    final DateTime? pickedDate = await showDatePicker(\r\n-      context: context,\r\n-      initialDate: DateTime.now(),\r\n-      firstDate: DateTime.now(),\r\n-      lastDate: DateTime.now().add(const Duration(days: 30)),\r\n-    );\r\n-\r\n-    if (pickedDate != null) {\r\n-      final TimeOfDay? pickedTime = await showTimePicker(\r\n-        context: context,\r\n-        initialTime: TimeOfDay.now(),\r\n-      );\r\n-\r\n-      if (pickedTime != null) {\r\n-        await _updateAppointmentStatus(\r\n-            appointmentId, 'scheduled', pickedDate, pickedTime);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('Appointment Requests'),\r\n-        backgroundColor: Colors.teal,\r\n-      ),\r\n-      body: StreamBuilder<QuerySnapshot>(\r\n-        stream: _firestore\r\n-            .collection('appointments')\r\n-            .where('doctorId', isEqualTo: _auth.currentUser?.uid)\r\n-            .where('status', isEqualTo: 'pending')\r\n-            .orderBy('createdAt', descending: true)\r\n-            .snapshots(),\r\n-        builder: (context, snapshot) {\r\n-          if (snapshot.hasError) {\r\n-            return Center(child: Text('Error: ${snapshot.error}'));\r\n-          }\r\n-\r\n-          if (snapshot.connectionState == ConnectionState.waiting) {\r\n-            return const Center(child: CircularProgressIndicator());\r\n-          }\r\n-\r\n-          final appointments = snapshot.data?.docs ?? [];\r\n-\r\n-          if (appointments.isEmpty) {\r\n-            return const Center(child: Text('No pending appointments'));\r\n-          }\r\n-\r\n-          return ListView.builder(\r\n-            padding: const EdgeInsets.all(16),\r\n-            itemCount: appointments.length,\r\n-            itemBuilder: (context, index) {\r\n-              final appointment =\r\n-                  appointments[index].data() as Map<String, dynamic>;\r\n-              return Card(\r\n-                margin: const EdgeInsets.only(bottom: 16),\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(16),\r\n-                  child: Column(\r\n-                    crossAxisAlignment: CrossAxisAlignment.start,\r\n-                    children: [\r\n-                      Text(\r\n-                        'Patient: ${appointment['patientName']}',\r\n-                        style: const TextStyle(\r\n-                          fontSize: 18,\r\n-                          fontWeight: FontWeight.bold,\r\n-                        ),\r\n-                      ),\r\n-                      const SizedBox(height: 8),\r\n-                      Text('Problem: ${appointment['problem']}'),\r\n-                      const SizedBox(height: 16),\r\n-                      Row(\r\n-                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                        children: [\r\n-                          ElevatedButton(\r\n-                            onPressed: () => _selectDateTime(\r\n-                                context, appointments[index].id),\r\n-                            style: ElevatedButton.styleFrom(\r\n-                              backgroundColor: Colors.teal,\r\n-                            ),\r\n-                            child: const Text('Schedule'),\r\n-                          ),\r\n-                          ElevatedButton(\r\n-                            onPressed: () => _updateAppointmentStatus(\r\n-                                appointments[index].id, 'rejected', null, null),\r\n-                            style: ElevatedButton.styleFrom(\r\n-                              backgroundColor: Colors.red,\r\n-                            ),\r\n-                            child: const Text('Reject'),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ],\r\n-                  ),\r\n-                ),\r\n-              );\r\n-            },\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1744620910569,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\nclass DoctorAppointmentsScreen extends StatefulWidget {\r\n  const DoctorAppointmentsScreen({super.key});\r\n\r\n  @override\r\n  State<DoctorAppointmentsScreen> createState() => _DoctorAppointmentsScreenState();\r\n}\r\n\r\nclass _DoctorAppointmentsScreenState extends State<DoctorAppointmentsScreen> {\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n\r\n  Future<void> _updateAppointmentStatus(String appointmentId, String status, DateTime? date, TimeOfDay? time) async {\r\n    try {\r\n      await _firestore.collection('appointments').doc(appointmentId).update({\r\n        'status': status,\r\n        if (date != null) 'scheduledDate': Timestamp.fromDate(date),\r\n        if (time != null) 'scheduledTime': '${time.hour}:${time.minute}',\r\n        'updatedAt': FieldValue.serverTimestamp(),\r\n      });\r\n\r\n      // Send notification to patient\r\n      final appointment = await _firestore.collection('appointments').doc(appointmentId).get();\r\n      final patientId = appointment.data()?['patientId'];\r\n      \r\n      if (patientId != null) {\r\n        await _firestore.collection('notifications').add({\r\n          'userId': patientId,\r\n          'title': 'Appointment Update',\r\n          'message': 'Your appointment has been $status for ${DateFormat('MMM d, y').format(date!)} at ${time!.format(context)}',\r\n          'type': 'appointment',\r\n          'read': false,\r\n          'createdAt': FieldValue.serverTimestamp(),\r\n        });\r\n      }\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text('Error updating appointment: $e')),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _selectDateTime(BuildContext context, String appointmentId) async {\r\n    final DateTime? pickedDate = await showDatePicker(\r\n      context: context,\r\n      initialDate: DateTime.now(),\r\n      firstDate: DateTime.now(),\r\n      lastDate: DateTime.now().add(const Duration(days: 30)),\r\n    );\r\n\r\n    if (pickedDate != null) {\r\n      final TimeOfDay? pickedTime = await showTimePicker(\r\n        context: context,\r\n        initialTime: TimeOfDay.now(),\r\n      );\r\n\r\n      if (pickedTime != null) {\r\n        await _updateAppointmentStatus(appointmentId, 'scheduled', pickedDate, pickedTime);\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Appointment Requests'),\r\n        backgroundColor: Colors.teal,\r\n      ),\r\n      body: StreamBuilder<QuerySnapshot>(\r\n        stream: _firestore\r\n            .collection('appointments')\r\n            .where('doctorId', isEqualTo: _auth.currentUser?.uid)\r\n            .where('status', isEqualTo: 'pending')\r\n            .orderBy('createdAt', descending: true)\r\n            .snapshots(),\r\n        builder: (context, snapshot) {\r\n          if (snapshot.hasError) {\r\n            return Center(child: Text('Error: ${snapshot.error}'));\r\n          }\r\n\r\n          if (snapshot.connectionState == ConnectionState.waiting) {\r\n            return const Center(child: CircularProgressIndicator());\r\n          }\r\n\r\n          final appointments = snapshot.data?.docs ?? [];\r\n\r\n          if (appointments.isEmpty) {\r\n            return const Center(child: Text('No pending appointments'));\r\n          }\r\n\r\n          return ListView.builder(\r\n            padding: const EdgeInsets.all(16),\r\n            itemCount: appointments.length,\r\n            itemBuilder: (context, index) {\r\n              final appointment = appointments[index].data() as Map<String, dynamic>;\r\n              return Card(\r\n                margin: const EdgeInsets.only(bottom: 16),\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(16),\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Patient: ${appointment['patientName']}',\r\n                        style: const TextStyle(\r\n                          fontSize: 18,\r\n                          fontWeight: FontWeight.bold,\r\n                        ),\r\n                      ),\r\n                      const SizedBox(height: 8),\r\n                      Text('Problem: ${appointment['problem']}'),\r\n                      const SizedBox(height: 16),\r\n                      Row(\r\n                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                        children: [\r\n                          ElevatedButton(\r\n                            onPressed: () => _selectDateTime(context, appointments[index].id),\r\n                            style: ElevatedButton.styleFrom(\r\n                              backgroundColor: Colors.teal,\r\n                            ),\r\n                            child: const Text('Schedule'),\r\n                          ),\r\n                          ElevatedButton(\r\n                            onPressed: () => _updateAppointmentStatus(appointments[index].id, 'rejected', null, null),\r\n                            style: ElevatedButton.styleFrom(\r\n                              backgroundColor: Colors.red,\r\n                            ),\r\n                            child: const Text('Reject'),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              );\r\n            },\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
{
    "sourceFile": "lib/chat_consultation.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1744651233555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744651448929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n       _prefs = await SharedPreferences.getInstance();\r\n       _loadChatHistory();\r\n \r\n       // Add welcome message\r\n-      final welcomeMessage = 'Hello! I\\'m Dr. Sarah Johnson. How can I help you today?';\r\n+      final welcomeMessage =\r\n+          'Hello! I\\'m Dr. Sarah Johnson. How can I help you today?';\r\n       setState(() {\r\n         _messages.add(_buildMessage(welcomeMessage, isUser: false));\r\n       });\r\n       _saveMessage(welcomeMessage, false);\r\n@@ -140,9 +141,9 @@\n     await _saveMessage(text, true);\r\n \r\n     // Simulate doctor's response (in a real app, this would be replaced with actual doctor responses)\r\n     await Future.delayed(const Duration(seconds: 1));\r\n-    \r\n+\r\n     final response = 'I understand your concern. Let me help you with that.';\r\n     setState(() {\r\n       _messages.add(_buildMessage(response, isUser: false));\r\n     });\r\n@@ -229,5 +230,5 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744651455768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,12 @@\n import 'dart:convert';\r\n import 'dart:developer' as developer;\r\n \r\n class ChatConsultation extends StatefulWidget {\r\n-  const ChatConsultation({Key? key}) : super(key: key);\r\n+  final String? sharedFileContent;\r\n \r\n+  const ChatConsultation({super.key, this.sharedFileContent});\r\n+\r\n   @override\r\n   State<ChatConsultation> createState() => _ChatConsultationState();\r\n }\r\n \r\n@@ -22,8 +24,12 @@\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     _initializeChat();\r\n+    // If there's shared file content, add it as the first message\r\n+    if (widget.sharedFileContent != null) {\r\n+      _messages.add(_buildMessage(widget.sharedFileContent!, isUser: true));\r\n+    }\r\n   }\r\n \r\n   Future<void> _initializeChat() async {\r\n     try {\r\n"
                },
                {
                    "date": 1744651604027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,53 +55,72 @@\n \r\n       final chatData = jsonDecode(chatDoc) as Map<String, dynamic>;\r\n       final messages = chatData['messages'] as List<dynamic>;\r\n \r\n+      // Sort messages by timestamp to ensure correct order\r\n+      messages.sort((a, b) {\r\n+        final dateA = DateTime.parse(a['timestamp']);\r\n+        final dateB = DateTime.parse(b['timestamp']);\r\n+        return dateA.compareTo(dateB);\r\n+      });\r\n+\r\n       setState(() {\r\n+        _messages.clear();\r\n         for (var msg in messages) {\r\n           _messages.add(_buildMessage(msg['text'], isUser: msg['isUser']));\r\n         }\r\n       });\r\n     } catch (e) {\r\n       developer.log('Error loading chat history: $e');\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(\r\n+            content: Text('Error loading chat history: $e'),\r\n+            backgroundColor: Colors.red,\r\n+          ),\r\n+        );\r\n+      }\r\n     }\r\n   }\r\n \r\n   Future<void> _saveMessage(String text, bool isUser) async {\r\n     try {\r\n-      if (isUser) {\r\n-        _lastQuestion = text;\r\n-      } else if (_lastQuestion != null) {\r\n-        final chatDoc = _prefs.getString('doctor_chat_document');\r\n-        Map<String, dynamic> chatData;\r\n-        List<dynamic> messages;\r\n+      final chatDoc = _prefs.getString('doctor_chat_document');\r\n+      Map<String, dynamic> chatData;\r\n+      List<dynamic> messages;\r\n \r\n-        if (chatDoc == null) {\r\n-          chatData = {\r\n-            'messages': [],\r\n-            'lastUpdated': DateTime.now().toIso8601String(),\r\n-          };\r\n-          messages = [];\r\n-        } else {\r\n-          chatData = jsonDecode(chatDoc) as Map<String, dynamic>;\r\n-          messages = chatData['messages'] as List<dynamic>;\r\n-        }\r\n-\r\n-        final newMessage = {\r\n-          'timestamp': DateTime.now().toIso8601String(),\r\n-          'text': text,\r\n-          'isUser': isUser,\r\n+      if (chatDoc == null) {\r\n+        chatData = {\r\n+          'messages': [],\r\n+          'lastUpdated': DateTime.now().toIso8601String(),\r\n         };\r\n+        messages = [];\r\n+      } else {\r\n+        chatData = jsonDecode(chatDoc) as Map<String, dynamic>;\r\n+        messages = chatData['messages'] as List<dynamic>;\r\n+      }\r\n \r\n-        messages.add(newMessage);\r\n-        chatData['messages'] = messages;\r\n-        chatData['lastUpdated'] = DateTime.now().toIso8601String();\r\n+      final newMessage = {\r\n+        'timestamp': DateTime.now().toIso8601String(),\r\n+        'text': text,\r\n+        'isUser': isUser,\r\n+      };\r\n \r\n-        await _prefs.setString('doctor_chat_document', jsonEncode(chatData));\r\n-        _lastQuestion = null;\r\n-      }\r\n+      messages.add(newMessage);\r\n+      chatData['messages'] = messages;\r\n+      chatData['lastUpdated'] = DateTime.now().toIso8601String();\r\n+\r\n+      await _prefs.setString('doctor_chat_document', jsonEncode(chatData));\r\n     } catch (e) {\r\n       developer.log('Error saving message: $e');\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(\r\n+            content: Text('Error saving message: $e'),\r\n+            backgroundColor: Colors.red,\r\n+          ),\r\n+        );\r\n+      }\r\n     }\r\n   }\r\n \r\n   void _scrollToBottom() {\r\n"
                }
            ],
            "date": 1744651233555,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport 'dart:convert';\r\nimport 'dart:developer' as developer;\r\n\r\nclass ChatConsultation extends StatefulWidget {\r\n  const ChatConsultation({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<ChatConsultation> createState() => _ChatConsultationState();\r\n}\r\n\r\nclass _ChatConsultationState extends State<ChatConsultation> {\r\n  final TextEditingController _textController = TextEditingController();\r\n  final List<Widget> _messages = [];\r\n  final ScrollController _scrollController = ScrollController();\r\n  bool _isLoading = false;\r\n  late SharedPreferences _prefs;\r\n  String? _lastQuestion;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _initializeChat();\r\n  }\r\n\r\n  Future<void> _initializeChat() async {\r\n    try {\r\n      _prefs = await SharedPreferences.getInstance();\r\n      _loadChatHistory();\r\n\r\n      // Add welcome message\r\n      final welcomeMessage = 'Hello! I\\'m Dr. Sarah Johnson. How can I help you today?';\r\n      setState(() {\r\n        _messages.add(_buildMessage(welcomeMessage, isUser: false));\r\n      });\r\n      _saveMessage(welcomeMessage, false);\r\n    } catch (e) {\r\n      developer.log('Error initializing chat: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> _loadChatHistory() async {\r\n    try {\r\n      final chatDoc = _prefs.getString('doctor_chat_document');\r\n      if (chatDoc == null) return;\r\n\r\n      final chatData = jsonDecode(chatDoc) as Map<String, dynamic>;\r\n      final messages = chatData['messages'] as List<dynamic>;\r\n\r\n      setState(() {\r\n        for (var msg in messages) {\r\n          _messages.add(_buildMessage(msg['text'], isUser: msg['isUser']));\r\n        }\r\n      });\r\n    } catch (e) {\r\n      developer.log('Error loading chat history: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> _saveMessage(String text, bool isUser) async {\r\n    try {\r\n      if (isUser) {\r\n        _lastQuestion = text;\r\n      } else if (_lastQuestion != null) {\r\n        final chatDoc = _prefs.getString('doctor_chat_document');\r\n        Map<String, dynamic> chatData;\r\n        List<dynamic> messages;\r\n\r\n        if (chatDoc == null) {\r\n          chatData = {\r\n            'messages': [],\r\n            'lastUpdated': DateTime.now().toIso8601String(),\r\n          };\r\n          messages = [];\r\n        } else {\r\n          chatData = jsonDecode(chatDoc) as Map<String, dynamic>;\r\n          messages = chatData['messages'] as List<dynamic>;\r\n        }\r\n\r\n        final newMessage = {\r\n          'timestamp': DateTime.now().toIso8601String(),\r\n          'text': text,\r\n          'isUser': isUser,\r\n        };\r\n\r\n        messages.add(newMessage);\r\n        chatData['messages'] = messages;\r\n        chatData['lastUpdated'] = DateTime.now().toIso8601String();\r\n\r\n        await _prefs.setString('doctor_chat_document', jsonEncode(chatData));\r\n        _lastQuestion = null;\r\n      }\r\n    } catch (e) {\r\n      developer.log('Error saving message: $e');\r\n    }\r\n  }\r\n\r\n  void _scrollToBottom() {\r\n    if (_scrollController.hasClients) {\r\n      _scrollController.animateTo(\r\n        _scrollController.position.maxScrollExtent,\r\n        duration: const Duration(milliseconds: 300),\r\n        curve: Curves.easeOut,\r\n      );\r\n    }\r\n  }\r\n\r\n  Widget _buildMessage(String text, {required bool isUser}) {\r\n    return Align(\r\n      alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,\r\n      child: Container(\r\n        margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),\r\n        padding: const EdgeInsets.all(12),\r\n        decoration: BoxDecoration(\r\n          color: isUser ? const Color(0xFF2D9CDB) : Colors.grey[300],\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        child: Text(\r\n          text,\r\n          style: TextStyle(\r\n            color: isUser ? Colors.white : Colors.black,\r\n            fontFamily: GoogleFonts.poppins().fontFamily,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _sendMessage(String text) async {\r\n    if (text.isEmpty) return;\r\n\r\n    setState(() {\r\n      _isLoading = true;\r\n      _messages.add(_buildMessage(text, isUser: true));\r\n      _textController.clear();\r\n    });\r\n\r\n    await _saveMessage(text, true);\r\n\r\n    // Simulate doctor's response (in a real app, this would be replaced with actual doctor responses)\r\n    await Future.delayed(const Duration(seconds: 1));\r\n    \r\n    final response = 'I understand your concern. Let me help you with that.';\r\n    setState(() {\r\n      _messages.add(_buildMessage(response, isUser: false));\r\n    });\r\n    await _saveMessage(response, false);\r\n\r\n    setState(() {\r\n      _isLoading = false;\r\n    });\r\n    _scrollToBottom();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: const Color(0xFFF8F9FA),\r\n      appBar: AppBar(\r\n        title: Text(\r\n          'Chat with Doctor',\r\n          style: GoogleFonts.poppins(\r\n            fontSize: 20,\r\n            fontWeight: FontWeight.w600,\r\n            color: Colors.black87,\r\n          ),\r\n        ),\r\n        backgroundColor: Colors.white,\r\n        elevation: 0,\r\n        leading: IconButton(\r\n          icon: const Icon(Icons.arrow_back, color: Colors.black87),\r\n          onPressed: () => Navigator.pop(context),\r\n        ),\r\n      ),\r\n      body: Column(\r\n        children: [\r\n          Expanded(\r\n            child: ListView.builder(\r\n              controller: _scrollController,\r\n              padding: const EdgeInsets.all(8),\r\n              itemCount: _messages.length,\r\n              itemBuilder: (context, index) => _messages[index],\r\n            ),\r\n          ),\r\n          if (_isLoading)\r\n            const Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: CircularProgressIndicator(),\r\n            ),\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                  child: TextField(\r\n                    controller: _textController,\r\n                    decoration: InputDecoration(\r\n                      hintText: 'Type your message...',\r\n                      hintStyle: GoogleFonts.poppins(),\r\n                      border: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                      ),\r\n                      enabledBorder: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                        borderSide: const BorderSide(color: Color(0xFFE0E0E0)),\r\n                      ),\r\n                      focusedBorder: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                        borderSide: const BorderSide(color: Color(0xFF2D9CDB)),\r\n                      ),\r\n                    ),\r\n                    onSubmitted: _sendMessage,\r\n                    enabled: !_isLoading,\r\n                    maxLines: null,\r\n                    keyboardType: TextInputType.multiline,\r\n                  ),\r\n                ),\r\n                IconButton(\r\n                  icon: const Icon(Icons.send, color: Color(0xFF2D9CDB)),\r\n                  onPressed: !_isLoading\r\n                      ? () => _sendMessage(_textController.text)\r\n                      : null,\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
{
    "sourceFile": "lib/medical_summary.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1744490415268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744490486265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import 'package:flutter/material.dart';\r\n-import 'package:shared_preferences.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n \r\n class MedicalSummary extends StatefulWidget {\r\n   const MedicalSummary({super.key});\r\n \r\n@@ -49,12 +49,9 @@\n                 color: Colors.teal,\r\n               ),\r\n             ),\r\n             const SizedBox(height: 8),\r\n-            Text(\r\n-              value,\r\n-              style: const TextStyle(fontSize: 16),\r\n-            ),\r\n+            Text(value, style: const TextStyle(fontSize: 16)),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n@@ -80,5 +77,5 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744533702587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flutter/material.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n \r\n class MedicalSummary extends StatefulWidget {\r\n   const MedicalSummary({super.key});\r\n \r\n@@ -17,21 +18,40 @@\n     _loadMedicalData();\r\n   }\r\n \r\n   Future<void> _loadMedicalData() async {\r\n-    final prefs = await SharedPreferences.getInstance();\r\n-    setState(() {\r\n-      _medicalData = {\r\n-        'name': prefs.getString('name') ?? 'Not provided',\r\n-        'age': prefs.getString('age') ?? 'Not provided',\r\n-        'bloodGroup': prefs.getString('bloodGroup') ?? 'Not provided',\r\n-        'height': prefs.getString('height') ?? 'Not provided',\r\n-        'weight': prefs.getString('weight') ?? 'Not provided',\r\n-        'allergies': prefs.getString('allergies') ?? 'None',\r\n-        'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\r\n-        'medications': prefs.getString('medications') ?? 'None',\r\n-      };\r\n-    });\r\n+    final user = FirebaseAuth.instance.currentUser;\r\n+    if (user == null) return;\r\n+\r\n+    try {\r\n+      final doc = await FirebaseFirestore.instance\r\n+          .collection('users')\r\n+          .doc(user.uid)\r\n+          .collection('medical_info')\r\n+          .doc('profile')\r\n+          .get();\r\n+\r\n+      if (doc.exists) {\r\n+        setState(() {\r\n+          _medicalData = {\r\n+            'name': doc.data()?['name'] ?? 'Not provided',\r\n+            'age': doc.data()?['age'] ?? 'Not provided',\r\n+            'bloodGroup': doc.data()?['bloodGroup'] ?? 'Not provided',\r\n+            'height': doc.data()?['height'] ?? 'Not provided',\r\n+            'weight': doc.data()?['weight'] ?? 'Not provided',\r\n+            'allergies': doc.data()?['allergies'] ?? 'None',\r\n+            'medicalHistory': doc.data()?['medicalHistory'] ?? 'None',\r\n+            'medications': doc.data()?['medications'] ?? 'None',\r\n+          };\r\n+        });\r\n+      }\r\n+    } catch (e) {\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(content: Text('Error loading data: $e')),\r\n+        );\r\n+      }\r\n+    }\r\n   }\r\n \r\n   Widget _buildInfoCard(String title, String value) {\r\n     return Card(\r\n"
                },
                {
                    "date": 1744533899319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,101 +1,81 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-\r\n-class MedicalSummary extends StatefulWidget {\r\n-  const MedicalSummary({super.key});\r\n-\r\n-  @override\r\n-  State<MedicalSummary> createState() => _MedicalSummaryState();\r\n-}\r\n-\r\n-class _MedicalSummaryState extends State<MedicalSummary> {\r\n-  Map<String, String> _medicalData = {};\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _loadMedicalData();\r\n-  }\r\n-\r\n-  Future<void> _loadMedicalData() async {\r\n-    final user = FirebaseAuth.instance.currentUser;\r\n-    if (user == null) return;\r\n-\r\n-    try {\r\n-      final doc = await FirebaseFirestore.instance\r\n-          .collection('users')\r\n-          .doc(user.uid)\r\n-          .collection('medical_info')\r\n-          .doc('profile')\r\n-          .get();\r\n-\r\n-      if (doc.exists) {\r\n-        setState(() {\r\n-          _medicalData = {\r\n-            'name': doc.data()?['name'] ?? 'Not provided',\r\n-            'age': doc.data()?['age'] ?? 'Not provided',\r\n-            'bloodGroup': doc.data()?['bloodGroup'] ?? 'Not provided',\r\n-            'height': doc.data()?['height'] ?? 'Not provided',\r\n-            'weight': doc.data()?['weight'] ?? 'Not provided',\r\n-            'allergies': doc.data()?['allergies'] ?? 'None',\r\n-            'medicalHistory': doc.data()?['medicalHistory'] ?? 'None',\r\n-            'medications': doc.data()?['medications'] ?? 'None',\r\n-          };\r\n-        });\r\n-      }\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error loading data: $e')),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildInfoCard(String title, String value) {\r\n-    return Card(\r\n-      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\r\n-      child: Padding(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        child: Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            Text(\r\n-              title,\r\n-              style: const TextStyle(\r\n-                fontSize: 16,\r\n-                fontWeight: FontWeight.bold,\r\n-                color: Colors.teal,\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 8),\r\n-            Text(value, style: const TextStyle(fontSize: 16)),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('Medical Summary'),\r\n-        backgroundColor: Colors.teal,\r\n-      ),\r\n-      body: ListView(\r\n-        children: [\r\n-          _buildInfoCard('Name', _medicalData['name']!),\r\n-          _buildInfoCard('Age', _medicalData['age']!),\r\n-          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!),\r\n-          _buildInfoCard('Height', '${_medicalData['height']!} cm'),\r\n-          _buildInfoCard('Weight', '${_medicalData['weight']!} kg'),\r\n-          _buildInfoCard('Allergies', _medicalData['allergies']!),\r\n-          _buildInfoCard('Medical History', _medicalData['medicalHistory']!),\r\n-          _buildInfoCard('Current Medications', _medicalData['medications']!),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+import 'package:flutter/material.dart';\n+import 'package:shared_preferences/shared_preferences.dart';\n+\n+class MedicalSummary extends StatefulWidget {\n+  const MedicalSummary({super.key});\n+\n+  @override\n+  State<MedicalSummary> createState() => _MedicalSummaryState();\n+}\n+\n+class _MedicalSummaryState extends State<MedicalSummary> {\n+  Map<String, String> _medicalData = {};\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadMedicalData();\n+  }\n+\n+  Future<void> _loadMedicalData() async {\n+    final prefs = await SharedPreferences.getInstance();\n+    setState(() {\n+      _medicalData = {\n+        'name': prefs.getString('name') ?? 'Not provided',\n+        'age': prefs.getString('age') ?? 'Not provided',\n+        'bloodGroup': prefs.getString('bloodGroup') ?? 'Not provided',\n+        'height': prefs.getString('height') ?? 'Not provided',\n+        'weight': prefs.getString('weight') ?? 'Not provided',\n+        'allergies': prefs.getString('allergies') ?? 'None',\n+        'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\n+        'medications': prefs.getString('medications') ?? 'None',\n+      };\n+    });\n+  }\n+\n+  Widget _buildInfoCard(String title, String value) {\n+    return Card(\n+      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n+      child: Padding(\n+        padding: const EdgeInsets.all(16.0),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Text(\n+              title,\n+              style: const TextStyle(\n+                fontSize: 16,\n+                fontWeight: FontWeight.bold,\n+                color: Colors.teal,\n+              ),\n+            ),\n+            const SizedBox(height: 8),\n+            Text(value, style: const TextStyle(fontSize: 16)),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text('Medical Summary'),\n+        backgroundColor: Colors.teal,\n+      ),\n+      body: ListView(\n+        children: [\n+          _buildInfoCard('Name', _medicalData['name']!),\n+          _buildInfoCard('Age', _medicalData['age']!),\n+          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!),\n+          _buildInfoCard('Height', '${_medicalData['height']!} cm'),\n+          _buildInfoCard('Weight', '${_medicalData['weight']!} kg'),\n+          _buildInfoCard('Allergies', _medicalData['allergies']!),\n+          _buildInfoCard('Medical History', _medicalData['medicalHistory']!),\n+          _buildInfoCard('Current Medications', _medicalData['medications']!),\n+        ],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744534200946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n }\n \n class _MedicalSummaryState extends State<MedicalSummary> {\n   Map<String, String> _medicalData = {};\n+  bool _isLoading = true;\n \n   @override\n   void initState() {\n     super.initState();\n@@ -29,8 +30,9 @@\n         'allergies': prefs.getString('allergies') ?? 'None',\n         'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\n         'medications': prefs.getString('medications') ?? 'None',\n       };\n+      _isLoading = false;\n     });\n   }\n \n   Widget _buildInfoCard(String title, String value) {\n@@ -49,17 +51,28 @@\n                 color: Colors.teal,\n               ),\n             ),\n             const SizedBox(height: 8),\n-            Text(value, style: const TextStyle(fontSize: 16)),\n+            Text(\n+              value,\n+              style: const TextStyle(fontSize: 16),\n+            ),\n           ],\n         ),\n       ),\n     );\n   }\n \n   @override\n   Widget build(BuildContext context) {\n+    if (_isLoading) {\n+      return const Scaffold(\n+        body: Center(\n+          child: CircularProgressIndicator(),\n+        ),\n+      );\n+    }\n+\n     return Scaffold(\n       appBar: AppBar(\n         title: const Text('Medical Summary'),\n         backgroundColor: Colors.teal,\n"
                },
                {
                    "date": 1744620503629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,15 +10,26 @@\n \n class _MedicalSummaryState extends State<MedicalSummary> {\n   Map<String, String> _medicalData = {};\n   bool _isLoading = true;\n+  bool _isEditing = false;\n+  final Map<String, TextEditingController> _controllers = {};\n \n   @override\n   void initState() {\n     super.initState();\n     _loadMedicalData();\n   }\n \n+  @override\n+  void dispose() {\n+    // Dispose all controllers\n+    for (var controller in _controllers.values) {\n+      controller.dispose();\n+    }\n+    super.dispose();\n+  }\n+\n   Future<void> _loadMedicalData() async {\n     final prefs = await SharedPreferences.getInstance();\n     setState(() {\n       _medicalData = {\n@@ -30,13 +41,28 @@\n         'allergies': prefs.getString('allergies') ?? 'None',\n         'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\n         'medications': prefs.getString('medications') ?? 'None',\n       };\n+      \n+      // Initialize controllers with current values\n+      for (var entry in _medicalData.entries) {\n+        _controllers[entry.key] = TextEditingController(text: entry.value);\n+      }\n+      \n       _isLoading = false;\n     });\n   }\n \n-  Widget _buildInfoCard(String title, String value) {\n+  Future<void> _saveChanges() async {\n+    final prefs = await SharedPreferences.getInstance();\n+    for (var entry in _controllers.entries) {\n+      await prefs.setString(entry.key, entry.value.text);\n+    }\n+    await _loadMedicalData(); // Reload data to update the display\n+    setState(() => _isEditing = false);\n+  }\n+\n+  Widget _buildInfoCard(String title, String value, String key) {\n     return Card(\n       margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n       child: Padding(\n         padding: const EdgeInsets.all(16.0),\n@@ -51,12 +77,18 @@\n                 color: Colors.teal,\n               ),\n             ),\n             const SizedBox(height: 8),\n-            Text(\n-              value,\n-              style: const TextStyle(fontSize: 16),\n-            ),\n+            if (_isEditing)\n+              TextField(\n+                controller: _controllers[key],\n+                decoration: InputDecoration(\n+                  hintText: 'Enter $title',\n+                  border: const OutlineInputBorder(),\n+                ),\n+              )\n+            else\n+              Text(value, style: const TextStyle(fontSize: 16)),\n           ],\n         ),\n       ),\n     );\n@@ -64,30 +96,38 @@\n \n   @override\n   Widget build(BuildContext context) {\n     if (_isLoading) {\n-      return const Scaffold(\n-        body: Center(\n-          child: CircularProgressIndicator(),\n-        ),\n-      );\n+      return const Scaffold(body: Center(child: CircularProgressIndicator()));\n     }\n \n     return Scaffold(\n       appBar: AppBar(\n         title: const Text('Medical Summary'),\n         backgroundColor: Colors.teal,\n+        actions: [\n+          IconButton(\n+            icon: Icon(_isEditing ? Icons.save : Icons.edit),\n+            onPressed: () {\n+              if (_isEditing) {\n+                _saveChanges();\n+              } else {\n+                setState(() => _isEditing = true);\n+              }\n+            },\n+          ),\n+        ],\n       ),\n       body: ListView(\n         children: [\n-          _buildInfoCard('Name', _medicalData['name']!),\n-          _buildInfoCard('Age', _medicalData['age']!),\n-          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!),\n-          _buildInfoCard('Height', '${_medicalData['height']!} cm'),\n-          _buildInfoCard('Weight', '${_medicalData['weight']!} kg'),\n-          _buildInfoCard('Allergies', _medicalData['allergies']!),\n-          _buildInfoCard('Medical History', _medicalData['medicalHistory']!),\n-          _buildInfoCard('Current Medications', _medicalData['medications']!),\n+          _buildInfoCard('Name', _medicalData['name']!, 'name'),\n+          _buildInfoCard('Age', _medicalData['age']!, 'age'),\n+          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!, 'bloodGroup'),\n+          _buildInfoCard('Height', '${_medicalData['height']!} cm', 'height'),\n+          _buildInfoCard('Weight', '${_medicalData['weight']!} kg', 'weight'),\n+          _buildInfoCard('Allergies', _medicalData['allergies']!, 'allergies'),\n+          _buildInfoCard('Medical History', _medicalData['medicalHistory']!, 'medicalHistory'),\n+          _buildInfoCard('Current Medications', _medicalData['medications']!, 'medications'),\n         ],\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1744620510881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,14 +41,14 @@\n         'allergies': prefs.getString('allergies') ?? 'None',\n         'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\n         'medications': prefs.getString('medications') ?? 'None',\n       };\n-      \n+\n       // Initialize controllers with current values\n       for (var entry in _medicalData.entries) {\n         _controllers[entry.key] = TextEditingController(text: entry.value);\n       }\n-      \n+\n       _isLoading = false;\n     });\n   }\n \n@@ -120,14 +120,17 @@\n       body: ListView(\n         children: [\n           _buildInfoCard('Name', _medicalData['name']!, 'name'),\n           _buildInfoCard('Age', _medicalData['age']!, 'age'),\n-          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!, 'bloodGroup'),\n+          _buildInfoCard(\n+              'Blood Group', _medicalData['bloodGroup']!, 'bloodGroup'),\n           _buildInfoCard('Height', '${_medicalData['height']!} cm', 'height'),\n           _buildInfoCard('Weight', '${_medicalData['weight']!} kg', 'weight'),\n           _buildInfoCard('Allergies', _medicalData['allergies']!, 'allergies'),\n-          _buildInfoCard('Medical History', _medicalData['medicalHistory']!, 'medicalHistory'),\n-          _buildInfoCard('Current Medications', _medicalData['medications']!, 'medications'),\n+          _buildInfoCard('Medical History', _medicalData['medicalHistory']!,\n+              'medicalHistory'),\n+          _buildInfoCard('Current Medications', _medicalData['medications']!,\n+              'medications'),\n         ],\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1744623107945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,26 +10,15 @@\n \n class _MedicalSummaryState extends State<MedicalSummary> {\n   Map<String, String> _medicalData = {};\n   bool _isLoading = true;\n-  bool _isEditing = false;\n-  final Map<String, TextEditingController> _controllers = {};\n \n   @override\n   void initState() {\n     super.initState();\n     _loadMedicalData();\n   }\n \n-  @override\n-  void dispose() {\n-    // Dispose all controllers\n-    for (var controller in _controllers.values) {\n-      controller.dispose();\n-    }\n-    super.dispose();\n-  }\n-\n   Future<void> _loadMedicalData() async {\n     final prefs = await SharedPreferences.getInstance();\n     setState(() {\n       _medicalData = {\n@@ -41,28 +30,13 @@\n         'allergies': prefs.getString('allergies') ?? 'None',\n         'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\n         'medications': prefs.getString('medications') ?? 'None',\n       };\n-\n-      // Initialize controllers with current values\n-      for (var entry in _medicalData.entries) {\n-        _controllers[entry.key] = TextEditingController(text: entry.value);\n-      }\n-\n       _isLoading = false;\n     });\n   }\n \n-  Future<void> _saveChanges() async {\n-    final prefs = await SharedPreferences.getInstance();\n-    for (var entry in _controllers.entries) {\n-      await prefs.setString(entry.key, entry.value.text);\n-    }\n-    await _loadMedicalData(); // Reload data to update the display\n-    setState(() => _isEditing = false);\n-  }\n-\n-  Widget _buildInfoCard(String title, String value, String key) {\n+  Widget _buildInfoCard(String title, String value) {\n     return Card(\n       margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n       child: Padding(\n         padding: const EdgeInsets.all(16.0),\n@@ -77,18 +51,9 @@\n                 color: Colors.teal,\n               ),\n             ),\n             const SizedBox(height: 8),\n-            if (_isEditing)\n-              TextField(\n-                controller: _controllers[key],\n-                decoration: InputDecoration(\n-                  hintText: 'Enter $title',\n-                  border: const OutlineInputBorder(),\n-                ),\n-              )\n-            else\n-              Text(value, style: const TextStyle(fontSize: 16)),\n+            Text(value, style: const TextStyle(fontSize: 16)),\n           ],\n         ),\n       ),\n     );\n@@ -103,34 +68,19 @@\n     return Scaffold(\n       appBar: AppBar(\n         title: const Text('Medical Summary'),\n         backgroundColor: Colors.teal,\n-        actions: [\n-          IconButton(\n-            icon: Icon(_isEditing ? Icons.save : Icons.edit),\n-            onPressed: () {\n-              if (_isEditing) {\n-                _saveChanges();\n-              } else {\n-                setState(() => _isEditing = true);\n-              }\n-            },\n-          ),\n-        ],\n       ),\n       body: ListView(\n         children: [\n-          _buildInfoCard('Name', _medicalData['name']!, 'name'),\n-          _buildInfoCard('Age', _medicalData['age']!, 'age'),\n-          _buildInfoCard(\n-              'Blood Group', _medicalData['bloodGroup']!, 'bloodGroup'),\n-          _buildInfoCard('Height', '${_medicalData['height']!} cm', 'height'),\n-          _buildInfoCard('Weight', '${_medicalData['weight']!} kg', 'weight'),\n-          _buildInfoCard('Allergies', _medicalData['allergies']!, 'allergies'),\n-          _buildInfoCard('Medical History', _medicalData['medicalHistory']!,\n-              'medicalHistory'),\n-          _buildInfoCard('Current Medications', _medicalData['medications']!,\n-              'medications'),\n+          _buildInfoCard('Name', _medicalData['name']!),\n+          _buildInfoCard('Age', _medicalData['age']!),\n+          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!),\n+          _buildInfoCard('Height', '${_medicalData['height']!} cm'),\n+          _buildInfoCard('Weight', '${_medicalData['weight']!} kg'),\n+          _buildInfoCard('Allergies', _medicalData['allergies']!),\n+          _buildInfoCard('Medical History', _medicalData['medicalHistory']!),\n+          _buildInfoCard('Current Medications', _medicalData['medications']!),\n         ],\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1744624360398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flutter/material.dart';\n+import 'package:medi_flow_new/medical_form.dart';\n import 'package:shared_preferences/shared_preferences.dart';\n \n class MedicalSummary extends StatefulWidget {\n   const MedicalSummary({super.key});\n@@ -8,80 +9,215 @@\n   State<MedicalSummary> createState() => _MedicalSummaryState();\n }\n \n class _MedicalSummaryState extends State<MedicalSummary> {\n-  Map<String, String> _medicalData = {};\n-  bool _isLoading = true;\n+  bool _isEditing = false;\n+  final _formKey = GlobalKey<FormState>();\n+  final _nameController = TextEditingController();\n+  final _ageController = TextEditingController();\n+  final _bloodTypeController = TextEditingController();\n+  final _allergiesController = TextEditingController();\n+  final _medicationsController = TextEditingController();\n+  final _conditionsController = TextEditingController();\n \n   @override\n   void initState() {\n     super.initState();\n     _loadMedicalData();\n   }\n \n+  @override\n+  void dispose() {\n+    _nameController.dispose();\n+    _ageController.dispose();\n+    _bloodTypeController.dispose();\n+    _allergiesController.dispose();\n+    _medicationsController.dispose();\n+    _conditionsController.dispose();\n+    super.dispose();\n+  }\n+\n   Future<void> _loadMedicalData() async {\n     final prefs = await SharedPreferences.getInstance();\n     setState(() {\n-      _medicalData = {\n-        'name': prefs.getString('name') ?? 'Not provided',\n-        'age': prefs.getString('age') ?? 'Not provided',\n-        'bloodGroup': prefs.getString('bloodGroup') ?? 'Not provided',\n-        'height': prefs.getString('height') ?? 'Not provided',\n-        'weight': prefs.getString('weight') ?? 'Not provided',\n-        'allergies': prefs.getString('allergies') ?? 'None',\n-        'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\n-        'medications': prefs.getString('medications') ?? 'None',\n-      };\n-      _isLoading = false;\n+      _nameController.text = prefs.getString('name') ?? '';\n+      _ageController.text = prefs.getString('age') ?? '';\n+      _bloodTypeController.text = prefs.getString('bloodType') ?? '';\n+      _allergiesController.text = prefs.getString('allergies') ?? '';\n+      _medicationsController.text = prefs.getString('medications') ?? '';\n+      _conditionsController.text = prefs.getString('conditions') ?? '';\n     });\n   }\n \n-  Widget _buildInfoCard(String title, String value) {\n-    return Card(\n-      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n-      child: Padding(\n-        padding: const EdgeInsets.all(16.0),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            Text(\n-              title,\n-              style: const TextStyle(\n-                fontSize: 16,\n-                fontWeight: FontWeight.bold,\n-                color: Colors.teal,\n-              ),\n-            ),\n-            const SizedBox(height: 8),\n-            Text(value, style: const TextStyle(fontSize: 16)),\n-          ],\n-        ),\n-      ),\n-    );\n+  Future<void> _saveMedicalData() async {\n+    if (!_formKey.currentState!.validate()) return;\n+\n+    final prefs = await SharedPreferences.getInstance();\n+    await prefs.setString('name', _nameController.text);\n+    await prefs.setString('age', _ageController.text);\n+    await prefs.setString('bloodType', _bloodTypeController.text);\n+    await prefs.setString('allergies', _allergiesController.text);\n+    await prefs.setString('medications', _medicationsController.text);\n+    await prefs.setString('conditions', _conditionsController.text);\n+\n+    setState(() {\n+      _isEditing = false;\n+    });\n+\n+    if (mounted) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(content: Text('Medical information saved successfully')),\n+      );\n+    }\n   }\n \n   @override\n   Widget build(BuildContext context) {\n-    if (_isLoading) {\n-      return const Scaffold(body: Center(child: CircularProgressIndicator()));\n-    }\n-\n     return Scaffold(\n       appBar: AppBar(\n-        title: const Text('Medical Summary'),\n+        title: const Text('Health Profile'),\n         backgroundColor: Colors.teal,\n-      ),\n-      body: ListView(\n-        children: [\n-          _buildInfoCard('Name', _medicalData['name']!),\n-          _buildInfoCard('Age', _medicalData['age']!),\n-          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!),\n-          _buildInfoCard('Height', '${_medicalData['height']!} cm'),\n-          _buildInfoCard('Weight', '${_medicalData['weight']!} kg'),\n-          _buildInfoCard('Allergies', _medicalData['allergies']!),\n-          _buildInfoCard('Medical History', _medicalData['medicalHistory']!),\n-          _buildInfoCard('Current Medications', _medicalData['medications']!),\n+        actions: [\n+          if (!_isEditing)\n+            IconButton(\n+              icon: const Icon(Icons.edit),\n+              onPressed: () {\n+                setState(() {\n+                  _isEditing = true;\n+                });\n+              },\n+            )\n+          else\n+            IconButton(\n+              icon: const Icon(Icons.save),\n+              onPressed: _saveMedicalData,\n+            ),\n         ],\n       ),\n+      body: Form(\n+        key: _formKey,\n+        child: SingleChildScrollView(\n+          padding: const EdgeInsets.all(16),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              _buildSection(\n+                title: 'Personal Information',\n+                children: [\n+                  _buildEditableField(\n+                    label: 'Name',\n+                    controller: _nameController,\n+                    enabled: _isEditing,\n+                  ),\n+                  _buildEditableField(\n+                    label: 'Age',\n+                    controller: _ageController,\n+                    enabled: _isEditing,\n+                    keyboardType: TextInputType.number,\n+                  ),\n+                  _buildEditableField(\n+                    label: 'Blood Type',\n+                    controller: _bloodTypeController,\n+                    enabled: _isEditing,\n+                  ),\n+                ],\n+              ),\n+              const SizedBox(height: 24),\n+              _buildSection(\n+                title: 'Medical Information',\n+                children: [\n+                  _buildEditableField(\n+                    label: 'Allergies',\n+                    controller: _allergiesController,\n+                    enabled: _isEditing,\n+                    maxLines: 3,\n+                  ),\n+                  _buildEditableField(\n+                    label: 'Current Medications',\n+                    controller: _medicationsController,\n+                    enabled: _isEditing,\n+                    maxLines: 3,\n+                  ),\n+                  _buildEditableField(\n+                    label: 'Medical Conditions',\n+                    controller: _conditionsController,\n+                    enabled: _isEditing,\n+                    maxLines: 3,\n+                  ),\n+                ],\n+              ),\n+              if (_isEditing) ...[\n+                const SizedBox(height: 24),\n+                Center(\n+                  child: ElevatedButton(\n+                    onPressed: _saveMedicalData,\n+                    style: ElevatedButton.styleFrom(\n+                      backgroundColor: Colors.teal,\n+                      padding: const EdgeInsets.symmetric(\n+                        horizontal: 32,\n+                        vertical: 16,\n+                      ),\n+                    ),\n+                    child: const Text(\n+                      'Save Changes',\n+                      style: TextStyle(fontSize: 16),\n+                    ),\n+                  ),\n+                ),\n+              ],\n+            ],\n+          ),\n+        ),\n+      ),\n     );\n   }\n+\n+  Widget _buildSection({\n+    required String title,\n+    required List<Widget> children,\n+  }) {\n+    return Column(\n+      crossAxisAlignment: CrossAxisAlignment.start,\n+      children: [\n+        Text(\n+          title,\n+          style: const TextStyle(\n+            fontSize: 20,\n+            fontWeight: FontWeight.bold,\n+          ),\n+        ),\n+        const SizedBox(height: 16),\n+        ...children,\n+      ],\n+    );\n+  }\n+\n+  Widget _buildEditableField({\n+    required String label,\n+    required TextEditingController controller,\n+    required bool enabled,\n+    TextInputType? keyboardType,\n+    int maxLines = 1,\n+  }) {\n+    return Padding(\n+      padding: const EdgeInsets.only(bottom: 16),\n+      child: TextFormField(\n+        controller: controller,\n+        enabled: enabled,\n+        keyboardType: keyboardType,\n+        maxLines: maxLines,\n+        decoration: InputDecoration(\n+          labelText: label,\n+          border: const OutlineInputBorder(),\n+          filled: !enabled,\n+          fillColor: enabled ? null : Colors.grey[100],\n+        ),\n+        validator: (value) {\n+          if (enabled && (value == null || value.isEmpty)) {\n+            return 'Please enter $label';\n+          }\n+          return null;\n+        },\n+      ),\n+    );\n+  }\n }\n"
                },
                {
                    "date": 1744631457776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import 'package:flutter/material.dart';\n-import 'package:medi_flow_new/medical_form.dart';\n import 'package:shared_preferences/shared_preferences.dart';\n \n class MedicalSummary extends StatefulWidget {\n   const MedicalSummary({super.key});\n"
                },
                {
                    "date": 1744633730643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,222 +1,262 @@\n import 'package:flutter/material.dart';\n+import 'package:google_fonts/google_fonts.dart';\n import 'package:shared_preferences/shared_preferences.dart';\n \n-class MedicalSummary extends StatefulWidget {\n+class MedicalSummary extends StatelessWidget {\n   const MedicalSummary({super.key});\n \n   @override\n-  State<MedicalSummary> createState() => _MedicalSummaryState();\n-}\n-\n-class _MedicalSummaryState extends State<MedicalSummary> {\n-  bool _isEditing = false;\n-  final _formKey = GlobalKey<FormState>();\n-  final _nameController = TextEditingController();\n-  final _ageController = TextEditingController();\n-  final _bloodTypeController = TextEditingController();\n-  final _allergiesController = TextEditingController();\n-  final _medicationsController = TextEditingController();\n-  final _conditionsController = TextEditingController();\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-    _loadMedicalData();\n-  }\n-\n-  @override\n-  void dispose() {\n-    _nameController.dispose();\n-    _ageController.dispose();\n-    _bloodTypeController.dispose();\n-    _allergiesController.dispose();\n-    _medicationsController.dispose();\n-    _conditionsController.dispose();\n-    super.dispose();\n-  }\n-\n-  Future<void> _loadMedicalData() async {\n-    final prefs = await SharedPreferences.getInstance();\n-    setState(() {\n-      _nameController.text = prefs.getString('name') ?? '';\n-      _ageController.text = prefs.getString('age') ?? '';\n-      _bloodTypeController.text = prefs.getString('bloodType') ?? '';\n-      _allergiesController.text = prefs.getString('allergies') ?? '';\n-      _medicationsController.text = prefs.getString('medications') ?? '';\n-      _conditionsController.text = prefs.getString('conditions') ?? '';\n-    });\n-  }\n-\n-  Future<void> _saveMedicalData() async {\n-    if (!_formKey.currentState!.validate()) return;\n-\n-    final prefs = await SharedPreferences.getInstance();\n-    await prefs.setString('name', _nameController.text);\n-    await prefs.setString('age', _ageController.text);\n-    await prefs.setString('bloodType', _bloodTypeController.text);\n-    await prefs.setString('allergies', _allergiesController.text);\n-    await prefs.setString('medications', _medicationsController.text);\n-    await prefs.setString('conditions', _conditionsController.text);\n-\n-    setState(() {\n-      _isEditing = false;\n-    });\n-\n-    if (mounted) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(content: Text('Medical information saved successfully')),\n-      );\n-    }\n-  }\n-\n-  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n+      backgroundColor: const Color(0xFFF8F9FA),\n       appBar: AppBar(\n-        title: const Text('Health Profile'),\n-        backgroundColor: Colors.teal,\n+        title: Text(\n+          'Health Profile',\n+          style: GoogleFonts.poppins(\n+            fontSize: 20,\n+            fontWeight: FontWeight.w600,\n+            color: Colors.black87,\n+          ),\n+        ),\n+        backgroundColor: Colors.white,\n+        elevation: 0,\n         actions: [\n-          if (!_isEditing)\n-            IconButton(\n-              icon: const Icon(Icons.edit),\n-              onPressed: () {\n-                setState(() {\n-                  _isEditing = true;\n-                });\n-              },\n-            )\n-          else\n-            IconButton(\n-              icon: const Icon(Icons.save),\n-              onPressed: _saveMedicalData,\n-            ),\n+          IconButton(\n+            icon: const Icon(Icons.edit_outlined, color: Colors.black54),\n+            onPressed: () {\n+              // Handle edit profile\n+            },\n+          ),\n         ],\n       ),\n-      body: Form(\n-        key: _formKey,\n-        child: SingleChildScrollView(\n-          padding: const EdgeInsets.all(16),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              _buildSection(\n-                title: 'Personal Information',\n-                children: [\n-                  _buildEditableField(\n-                    label: 'Name',\n-                    controller: _nameController,\n-                    enabled: _isEditing,\n-                  ),\n-                  _buildEditableField(\n-                    label: 'Age',\n-                    controller: _ageController,\n-                    enabled: _isEditing,\n-                    keyboardType: TextInputType.number,\n-                  ),\n-                  _buildEditableField(\n-                    label: 'Blood Type',\n-                    controller: _bloodTypeController,\n-                    enabled: _isEditing,\n-                  ),\n-                ],\n-              ),\n-              const SizedBox(height: 24),\n-              _buildSection(\n-                title: 'Medical Information',\n-                children: [\n-                  _buildEditableField(\n-                    label: 'Allergies',\n-                    controller: _allergiesController,\n-                    enabled: _isEditing,\n-                    maxLines: 3,\n-                  ),\n-                  _buildEditableField(\n-                    label: 'Current Medications',\n-                    controller: _medicationsController,\n-                    enabled: _isEditing,\n-                    maxLines: 3,\n-                  ),\n-                  _buildEditableField(\n-                    label: 'Medical Conditions',\n-                    controller: _conditionsController,\n-                    enabled: _isEditing,\n-                    maxLines: 3,\n-                  ),\n-                ],\n-              ),\n-              if (_isEditing) ...[\n-                const SizedBox(height: 24),\n-                Center(\n-                  child: ElevatedButton(\n-                    onPressed: _saveMedicalData,\n-                    style: ElevatedButton.styleFrom(\n-                      backgroundColor: Colors.teal,\n-                      padding: const EdgeInsets.symmetric(\n-                        horizontal: 32,\n-                        vertical: 16,\n-                      ),\n-                    ),\n-                    child: const Text(\n-                      'Save Changes',\n-                      style: TextStyle(fontSize: 16),\n-                    ),\n-                  ),\n+      body: SingleChildScrollView(\n+        padding: const EdgeInsets.all(20),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            // Personal Information Card\n+            _buildSectionCard(\n+              title: 'Personal Information',\n+              children: [\n+                _buildInfoRow(\n+                  icon: Icons.person_outline,\n+                  label: 'Name',\n+                  value: 'John Doe',\n                 ),\n+                _buildInfoRow(\n+                  icon: Icons.calendar_today_outlined,\n+                  label: 'Age',\n+                  value: '32 years',\n+                ),\n+                _buildInfoRow(\n+                  icon: Icons.person_outline,\n+                  label: 'Gender',\n+                  value: 'Male',\n+                ),\n               ],\n-            ],\n-          ),\n+            ),\n+            const SizedBox(height: 20),\n+\n+            // Physical Information Card\n+            _buildSectionCard(\n+              title: 'Physical Information',\n+              children: [\n+                _buildInfoRow(\n+                  icon: Icons.height,\n+                  label: 'Height',\n+                  value: '175 cm',\n+                ),\n+                _buildInfoRow(\n+                  icon: Icons.monitor_weight_outlined,\n+                  label: 'Weight',\n+                  value: '70 kg',\n+                ),\n+                _buildInfoRow(\n+                  icon: Icons.bloodtype_outlined,\n+                  label: 'Blood Group',\n+                  value: 'A+',\n+                ),\n+              ],\n+            ),\n+            const SizedBox(height: 20),\n+\n+            // Medical History Card\n+            _buildSectionCard(\n+              title: 'Medical History',\n+              children: [\n+                _buildInfoRow(\n+                  icon: Icons.warning_amber_outlined,\n+                  label: 'Allergies',\n+                  value: 'None',\n+                ),\n+                _buildInfoRow(\n+                  icon: Icons.medical_services_outlined,\n+                  label: 'Chronic Conditions',\n+                  value: 'None',\n+                ),\n+              ],\n+            ),\n+            const SizedBox(height: 20),\n+\n+            // Health Stats Card\n+            _buildSectionCard(\n+              title: 'Health Statistics',\n+              children: [\n+                _buildHealthStat(\n+                  icon: Icons.favorite_border,\n+                  label: 'Heart Rate',\n+                  value: '76',\n+                  unit: 'bpm',\n+                ),\n+                _buildHealthStat(\n+                  icon: Icons.speed,\n+                  label: 'Blood Pressure',\n+                  value: '120/80',\n+                  unit: 'mmHg',\n+                ),\n+                _buildHealthStat(\n+                  icon: Icons.air,\n+                  label: 'O2 Level',\n+                  value: '98',\n+                  unit: '%',\n+                ),\n+              ],\n+            ),\n+          ],\n         ),\n       ),\n     );\n   }\n \n-  Widget _buildSection({\n+  Widget _buildSectionCard({\n     required String title,\n     required List<Widget> children,\n   }) {\n-    return Column(\n-      crossAxisAlignment: CrossAxisAlignment.start,\n-      children: [\n-        Text(\n-          title,\n-          style: const TextStyle(\n-            fontSize: 20,\n-            fontWeight: FontWeight.bold,\n+    return Container(\n+      padding: const EdgeInsets.all(16),\n+      decoration: BoxDecoration(\n+        color: Colors.white,\n+        borderRadius: BorderRadius.circular(16),\n+        boxShadow: [\n+          BoxShadow(\n+            color: Colors.black.withOpacity(0.05),\n+            blurRadius: 10,\n+            offset: const Offset(0, 4),\n           ),\n-        ),\n-        const SizedBox(height: 16),\n-        ...children,\n-      ],\n+        ],\n+      ),\n+      child: Column(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        children: [\n+          Text(\n+            title,\n+            style: GoogleFonts.poppins(\n+              fontSize: 18,\n+              fontWeight: FontWeight.w600,\n+              color: Colors.black87,\n+            ),\n+          ),\n+          const SizedBox(height: 16),\n+          ...children,\n+        ],\n+      ),\n     );\n   }\n \n-  Widget _buildEditableField({\n+  Widget _buildInfoRow({\n+    required IconData icon,\n     required String label,\n-    required TextEditingController controller,\n-    required bool enabled,\n-    TextInputType? keyboardType,\n-    int maxLines = 1,\n+    required String value,\n   }) {\n     return Padding(\n-      padding: const EdgeInsets.only(bottom: 16),\n-      child: TextFormField(\n-        controller: controller,\n-        enabled: enabled,\n-        keyboardType: keyboardType,\n-        maxLines: maxLines,\n-        decoration: InputDecoration(\n-          labelText: label,\n-          border: const OutlineInputBorder(),\n-          filled: !enabled,\n-          fillColor: enabled ? null : Colors.grey[100],\n-        ),\n-        validator: (value) {\n-          if (enabled && (value == null || value.isEmpty)) {\n-            return 'Please enter $label';\n-          }\n-          return null;\n-        },\n+      padding: const EdgeInsets.only(bottom: 12),\n+      child: Row(\n+        children: [\n+          Icon(\n+            icon,\n+            size: 24,\n+            color: const Color(0xFF2D9CDB),\n+          ),\n+          const SizedBox(width: 16),\n+          Expanded(\n+            child: Column(\n+              crossAxisAlignment: CrossAxisAlignment.start,\n+              children: [\n+                Text(\n+                  label,\n+                  style: GoogleFonts.poppins(\n+                    fontSize: 14,\n+                    color: Colors.black54,\n+                  ),\n+                ),\n+                Text(\n+                  value,\n+                  style: GoogleFonts.poppins(\n+                    fontSize: 16,\n+                    fontWeight: FontWeight.w600,\n+                    color: Colors.black87,\n+                  ),\n+                ),\n+              ],\n+            ),\n+          ),\n+        ],\n       ),\n     );\n   }\n+\n+  Widget _buildHealthStat({\n+    required IconData icon,\n+    required String label,\n+    required String value,\n+    required String unit,\n+  }) {\n+    return Padding(\n+      padding: const EdgeInsets.only(bottom: 12),\n+      child: Row(\n+        children: [\n+          Icon(\n+            icon,\n+            size: 24,\n+            color: const Color(0xFF2D9CDB),\n+          ),\n+          const SizedBox(width: 16),\n+          Expanded(\n+            child: Column(\n+              crossAxisAlignment: CrossAxisAlignment.start,\n+              children: [\n+                Text(\n+                  label,\n+                  style: GoogleFonts.poppins(\n+                    fontSize: 14,\n+                    color: Colors.black54,\n+                  ),\n+                ),\n+                Row(\n+                  children: [\n+                    Text(\n+                      value,\n+                      style: GoogleFonts.poppins(\n+                        fontSize: 16,\n+                        fontWeight: FontWeight.w600,\n+                        color: Colors.black87,\n+                      ),\n+                    ),\n+                    const SizedBox(width: 4),\n+                    Text(\n+                      unit,\n+                      style: GoogleFonts.poppins(\n+                        fontSize: 14,\n+                        color: Colors.black54,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ],\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n }\n"
                },
                {
                    "date": 1744634851684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,262 +1,302 @@\n import 'package:flutter/material.dart';\n import 'package:google_fonts/google_fonts.dart';\n import 'package:shared_preferences/shared_preferences.dart';\n \n-class MedicalSummary extends StatelessWidget {\n-  const MedicalSummary({super.key});\n+class MedicalSummary extends StatefulWidget {\n+  const MedicalSummary({Key? key}) : super(key: key);\n \n   @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: const Color(0xFFF8F9FA),\n-      appBar: AppBar(\n-        title: Text(\n-          'Health Profile',\n-          style: GoogleFonts.poppins(\n-            fontSize: 20,\n-            fontWeight: FontWeight.w600,\n-            color: Colors.black87,\n-          ),\n-        ),\n-        backgroundColor: Colors.white,\n-        elevation: 0,\n-        actions: [\n-          IconButton(\n-            icon: const Icon(Icons.edit_outlined, color: Colors.black54),\n-            onPressed: () {\n-              // Handle edit profile\n-            },\n-          ),\n-        ],\n-      ),\n-      body: SingleChildScrollView(\n-        padding: const EdgeInsets.all(20),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            // Personal Information Card\n-            _buildSectionCard(\n-              title: 'Personal Information',\n-              children: [\n-                _buildInfoRow(\n-                  icon: Icons.person_outline,\n-                  label: 'Name',\n-                  value: 'John Doe',\n-                ),\n-                _buildInfoRow(\n-                  icon: Icons.calendar_today_outlined,\n-                  label: 'Age',\n-                  value: '32 years',\n-                ),\n-                _buildInfoRow(\n-                  icon: Icons.person_outline,\n-                  label: 'Gender',\n-                  value: 'Male',\n-                ),\n-              ],\n-            ),\n-            const SizedBox(height: 20),\n+  State<MedicalSummary> createState() => _MedicalSummaryState();\n+}\n \n-            // Physical Information Card\n-            _buildSectionCard(\n-              title: 'Physical Information',\n-              children: [\n-                _buildInfoRow(\n-                  icon: Icons.height,\n-                  label: 'Height',\n-                  value: '175 cm',\n-                ),\n-                _buildInfoRow(\n-                  icon: Icons.monitor_weight_outlined,\n-                  label: 'Weight',\n-                  value: '70 kg',\n-                ),\n-                _buildInfoRow(\n-                  icon: Icons.bloodtype_outlined,\n-                  label: 'Blood Group',\n-                  value: 'A+',\n-                ),\n-              ],\n-            ),\n-            const SizedBox(height: 20),\n+class _MedicalSummaryState extends State<MedicalSummary> {\n+  bool _isEditing = false;\n+  final _formKey = GlobalKey<FormState>();\n+  late SharedPreferences _prefs;\n \n-            // Medical History Card\n-            _buildSectionCard(\n-              title: 'Medical History',\n-              children: [\n-                _buildInfoRow(\n-                  icon: Icons.warning_amber_outlined,\n-                  label: 'Allergies',\n-                  value: 'None',\n-                ),\n-                _buildInfoRow(\n-                  icon: Icons.medical_services_outlined,\n-                  label: 'Chronic Conditions',\n-                  value: 'None',\n-                ),\n-              ],\n-            ),\n-            const SizedBox(height: 20),\n+  // Personal Information\n+  final _nameController = TextEditingController();\n+  final _ageController = TextEditingController();\n+  final _genderController = TextEditingController();\n+  final _bloodGroupController = TextEditingController();\n \n-            // Health Stats Card\n-            _buildSectionCard(\n-              title: 'Health Statistics',\n-              children: [\n-                _buildHealthStat(\n-                  icon: Icons.favorite_border,\n-                  label: 'Heart Rate',\n-                  value: '76',\n-                  unit: 'bpm',\n-                ),\n-                _buildHealthStat(\n-                  icon: Icons.speed,\n-                  label: 'Blood Pressure',\n-                  value: '120/80',\n-                  unit: 'mmHg',\n-                ),\n-                _buildHealthStat(\n-                  icon: Icons.air,\n-                  label: 'O2 Level',\n-                  value: '98',\n-                  unit: '%',\n-                ),\n-              ],\n-            ),\n-          ],\n-        ),\n+  // Physical Information\n+  final _heightController = TextEditingController();\n+  final _weightController = TextEditingController();\n+  final _bmiController = TextEditingController();\n+\n+  // Medical History\n+  final _allergiesController = TextEditingController();\n+  final _medicationsController = TextEditingController();\n+  final _conditionsController = TextEditingController();\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadMedicalData();\n+  }\n+\n+  @override\n+  void dispose() {\n+    _nameController.dispose();\n+    _ageController.dispose();\n+    _genderController.dispose();\n+    _bloodGroupController.dispose();\n+    _heightController.dispose();\n+    _weightController.dispose();\n+    _bmiController.dispose();\n+    _allergiesController.dispose();\n+    _medicationsController.dispose();\n+    _conditionsController.dispose();\n+    super.dispose();\n+  }\n+\n+  Future<void> _loadMedicalData() async {\n+    _prefs = await SharedPreferences.getInstance();\n+    setState(() {\n+      _nameController.text = _prefs.getString('medical_name') ?? '';\n+      _ageController.text = _prefs.getString('medical_age') ?? '';\n+      _genderController.text = _prefs.getString('medical_gender') ?? '';\n+      _bloodGroupController.text = _prefs.getString('medical_blood_group') ?? '';\n+      _heightController.text = _prefs.getString('medical_height') ?? '';\n+      _weightController.text = _prefs.getString('medical_weight') ?? '';\n+      _bmiController.text = _prefs.getString('medical_bmi') ?? '';\n+      _allergiesController.text = _prefs.getString('medical_allergies') ?? '';\n+      _medicationsController.text = _prefs.getString('medical_medications') ?? '';\n+      _conditionsController.text = _prefs.getString('medical_conditions') ?? '';\n+    });\n+  }\n+\n+  Future<void> _saveMedicalData() async {\n+    if (!_formKey.currentState!.validate()) return;\n+\n+    await _prefs.setString('medical_name', _nameController.text);\n+    await _prefs.setString('medical_age', _ageController.text);\n+    await _prefs.setString('medical_gender', _genderController.text);\n+    await _prefs.setString('medical_blood_group', _bloodGroupController.text);\n+    await _prefs.setString('medical_height', _heightController.text);\n+    await _prefs.setString('medical_weight', _weightController.text);\n+    await _prefs.setString('medical_bmi', _bmiController.text);\n+    await _prefs.setString('medical_allergies', _allergiesController.text);\n+    await _prefs.setString('medical_medications', _medicationsController.text);\n+    await _prefs.setString('medical_conditions', _conditionsController.text);\n+    await _prefs.setBool('hasSubmittedForm', true);\n+\n+    setState(() => _isEditing = false);\n+    ScaffoldMessenger.of(context).showSnackBar(\n+      const SnackBar(\n+        content: Text('Medical information saved successfully'),\n+        backgroundColor: Colors.green,\n       ),\n     );\n   }\n \n   Widget _buildSectionCard({\n     required String title,\n     required List<Widget> children,\n   }) {\n-    return Container(\n-      padding: const EdgeInsets.all(16),\n-      decoration: BoxDecoration(\n-        color: Colors.white,\n-        borderRadius: BorderRadius.circular(16),\n-        boxShadow: [\n-          BoxShadow(\n-            color: Colors.black.withOpacity(0.05),\n-            blurRadius: 10,\n-            offset: const Offset(0, 4),\n-          ),\n-        ],\n+    return Card(\n+      elevation: 0,\n+      shape: RoundedRectangleBorder(\n+        borderRadius: BorderRadius.circular(12),\n+        side: const BorderSide(color: Color(0xFFE0E0E0)),\n       ),\n-      child: Column(\n-        crossAxisAlignment: CrossAxisAlignment.start,\n-        children: [\n-          Text(\n-            title,\n-            style: GoogleFonts.poppins(\n-              fontSize: 18,\n-              fontWeight: FontWeight.w600,\n-              color: Colors.black87,\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Text(\n+              title,\n+              style: GoogleFonts.poppins(\n+                fontSize: 16,\n+                fontWeight: FontWeight.w600,\n+                color: Colors.black87,\n+              ),\n             ),\n-          ),\n-          const SizedBox(height: 16),\n-          ...children,\n-        ],\n+            const SizedBox(height: 16),\n+            ...children,\n+          ],\n+        ),\n       ),\n     );\n   }\n \n   Widget _buildInfoRow({\n-    required IconData icon,\n     required String label,\n-    required String value,\n+    required TextEditingController controller,\n+    bool isRequired = true,\n+    TextInputType keyboardType = TextInputType.text,\n   }) {\n     return Padding(\n-      padding: const EdgeInsets.only(bottom: 12),\n-      child: Row(\n+      padding: const EdgeInsets.symmetric(vertical: 8),\n+      child: Column(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n         children: [\n-          Icon(\n-            icon,\n-            size: 24,\n-            color: const Color(0xFF2D9CDB),\n+          Text(\n+            label,\n+            style: GoogleFonts.poppins(\n+              fontSize: 14,\n+              color: Colors.black54,\n+            ),\n           ),\n-          const SizedBox(width: 16),\n-          Expanded(\n-            child: Column(\n-              crossAxisAlignment: CrossAxisAlignment.start,\n-              children: [\n-                Text(\n-                  label,\n-                  style: GoogleFonts.poppins(\n-                    fontSize: 14,\n-                    color: Colors.black54,\n+          const SizedBox(height: 4),\n+          _isEditing\n+              ? TextFormField(\n+                  controller: controller,\n+                  keyboardType: keyboardType,\n+                  decoration: InputDecoration(\n+                    hintText: 'Enter $label',\n+                    border: OutlineInputBorder(\n+                      borderRadius: BorderRadius.circular(8),\n+                    ),\n+                    contentPadding: const EdgeInsets.symmetric(\n+                      horizontal: 12,\n+                      vertical: 8,\n+                    ),\n                   ),\n-                ),\n-                Text(\n-                  value,\n-                  style: GoogleFonts.poppins(\n-                    fontSize: 16,\n-                    fontWeight: FontWeight.w600,\n-                    color: Colors.black87,\n+                  validator: (value) {\n+                    if (isRequired && (value == null || value.isEmpty)) {\n+                      return 'Please enter $label';\n+                    }\n+                    return null;\n+                  },\n+                )\n+              : Container(\n+                  padding: const EdgeInsets.symmetric(\n+                    horizontal: 12,\n+                    vertical: 8,\n                   ),\n+                  decoration: BoxDecoration(\n+                    border: Border.all(color: const Color(0xFFE0E0E0)),\n+                    borderRadius: BorderRadius.circular(8),\n+                  ),\n+                  child: Text(\n+                    controller.text.isEmpty ? 'Not set' : controller.text,\n+                    style: GoogleFonts.poppins(\n+                      fontSize: 16,\n+                      color: controller.text.isEmpty\n+                          ? Colors.black38\n+                          : Colors.black87,\n+                    ),\n+                  ),\n                 ),\n-              ],\n-            ),\n-          ),\n         ],\n       ),\n     );\n   }\n \n-  Widget _buildHealthStat({\n-    required IconData icon,\n-    required String label,\n-    required String value,\n-    required String unit,\n-  }) {\n-    return Padding(\n-      padding: const EdgeInsets.only(bottom: 12),\n-      child: Row(\n-        children: [\n-          Icon(\n-            icon,\n-            size: 24,\n-            color: const Color(0xFF2D9CDB),\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: const Color(0xFFF8F9FA),\n+      appBar: AppBar(\n+        title: Text(\n+          'Health Profile',\n+          style: GoogleFonts.poppins(\n+            fontSize: 20,\n+            fontWeight: FontWeight.w600,\n+            color: Colors.black87,\n           ),\n-          const SizedBox(width: 16),\n-          Expanded(\n-            child: Column(\n-              crossAxisAlignment: CrossAxisAlignment.start,\n-              children: [\n-                Text(\n-                  label,\n-                  style: GoogleFonts.poppins(\n-                    fontSize: 14,\n-                    color: Colors.black54,\n-                  ),\n-                ),\n-                Row(\n-                  children: [\n-                    Text(\n-                      value,\n-                      style: GoogleFonts.poppins(\n-                        fontSize: 16,\n-                        fontWeight: FontWeight.w600,\n-                        color: Colors.black87,\n-                      ),\n-                    ),\n-                    const SizedBox(width: 4),\n-                    Text(\n-                      unit,\n-                      style: GoogleFonts.poppins(\n-                        fontSize: 14,\n-                        color: Colors.black54,\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ],\n+        ),\n+        backgroundColor: Colors.white,\n+        elevation: 0,\n+        actions: [\n+          IconButton(\n+            icon: Icon(\n+              _isEditing ? Icons.save : Icons.edit,\n+              color: const Color(0xFF2D9CDB),\n             ),\n+            onPressed: () {\n+              if (_isEditing) {\n+                _saveMedicalData();\n+              } else {\n+                setState(() => _isEditing = true);\n+              }\n+            },\n           ),\n         ],\n       ),\n+      body: Form(\n+        key: _formKey,\n+        child: SingleChildScrollView(\n+          padding: const EdgeInsets.all(20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              // Personal Information\n+              _buildSectionCard(\n+                title: 'Personal Information',\n+                children: [\n+                  _buildInfoRow(\n+                    label: 'Full Name',\n+                    controller: _nameController,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'Age',\n+                    controller: _ageController,\n+                    keyboardType: TextInputType.number,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'Gender',\n+                    controller: _genderController,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'Blood Group',\n+                    controller: _bloodGroupController,\n+                  ),\n+                ],\n+              ),\n+              const SizedBox(height: 20),\n+\n+              // Physical Information\n+              _buildSectionCard(\n+                title: 'Physical Information',\n+                children: [\n+                  _buildInfoRow(\n+                    label: 'Height (cm)',\n+                    controller: _heightController,\n+                    keyboardType: TextInputType.number,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'Weight (kg)',\n+                    controller: _weightController,\n+                    keyboardType: TextInputType.number,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'BMI',\n+                    controller: _bmiController,\n+                    keyboardType: TextInputType.number,\n+                  ),\n+                ],\n+              ),\n+              const SizedBox(height: 20),\n+\n+              // Medical History\n+              _buildSectionCard(\n+                title: 'Medical History',\n+                children: [\n+                  _buildInfoRow(\n+                    label: 'Allergies',\n+                    controller: _allergiesController,\n+                    isRequired: false,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'Current Medications',\n+                    controller: _medicationsController,\n+                    isRequired: false,\n+                  ),\n+                  _buildInfoRow(\n+                    label: 'Medical Conditions',\n+                    controller: _conditionsController,\n+                    isRequired: false,\n+                  ),\n+                ],\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1744639761941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n \n   // Personal Information\n   final _nameController = TextEditingController();\n   final _ageController = TextEditingController();\n-  final _genderController = TextEditingController();\n-  final _bloodGroupController = TextEditingController();\n+  String? _selectedGender;\n+  String? _selectedBloodGroup;\n \n   // Physical Information\n   final _heightController = TextEditingController();\n   final _weightController = TextEditingController();\n@@ -29,20 +29,26 @@\n   final _allergiesController = TextEditingController();\n   final _medicationsController = TextEditingController();\n   final _conditionsController = TextEditingController();\n \n+  final List<String> _bloodGroups = [\n+    'A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'\n+  ];\n+\n+  final List<String> _genders = ['Male', 'Female', 'Other'];\n+\n   @override\n   void initState() {\n     super.initState();\n     _loadMedicalData();\n+    _heightController.addListener(_calculateBMI);\n+    _weightController.addListener(_calculateBMI);\n   }\n \n   @override\n   void dispose() {\n     _nameController.dispose();\n     _ageController.dispose();\n-    _genderController.dispose();\n-    _bloodGroupController.dispose();\n     _heightController.dispose();\n     _weightController.dispose();\n     _bmiController.dispose();\n     _allergiesController.dispose();\n@@ -50,22 +56,35 @@\n     _conditionsController.dispose();\n     super.dispose();\n   }\n \n+  void _calculateBMI() {\n+    if (_heightController.text.isNotEmpty && _weightController.text.isNotEmpty) {\n+      try {\n+        final height = double.parse(_heightController.text) / 100; // convert cm to m\n+        final weight = double.parse(_weightController.text);\n+        final bmi = (weight / (height * height)).toStringAsFixed(1);\n+        _bmiController.text = bmi;\n+      } catch (e) {\n+        _bmiController.text = '';\n+      }\n+    } else {\n+      _bmiController.text = '';\n+    }\n+  }\n+\n   Future<void> _loadMedicalData() async {\n     _prefs = await SharedPreferences.getInstance();\n     setState(() {\n       _nameController.text = _prefs.getString('medical_name') ?? '';\n       _ageController.text = _prefs.getString('medical_age') ?? '';\n-      _genderController.text = _prefs.getString('medical_gender') ?? '';\n-      _bloodGroupController.text =\n-          _prefs.getString('medical_blood_group') ?? '';\n+      _selectedGender = _prefs.getString('medical_gender');\n+      _selectedBloodGroup = _prefs.getString('medical_blood_group');\n       _heightController.text = _prefs.getString('medical_height') ?? '';\n       _weightController.text = _prefs.getString('medical_weight') ?? '';\n       _bmiController.text = _prefs.getString('medical_bmi') ?? '';\n       _allergiesController.text = _prefs.getString('medical_allergies') ?? '';\n-      _medicationsController.text =\n-          _prefs.getString('medical_medications') ?? '';\n+      _medicationsController.text = _prefs.getString('medical_medications') ?? '';\n       _conditionsController.text = _prefs.getString('medical_conditions') ?? '';\n     });\n   }\n \n@@ -73,10 +92,10 @@\n     if (!_formKey.currentState!.validate()) return;\n \n     await _prefs.setString('medical_name', _nameController.text);\n     await _prefs.setString('medical_age', _ageController.text);\n-    await _prefs.setString('medical_gender', _genderController.text);\n-    await _prefs.setString('medical_blood_group', _bloodGroupController.text);\n+    await _prefs.setString('medical_gender', _selectedGender ?? '');\n+    await _prefs.setString('medical_blood_group', _selectedBloodGroup ?? '');\n     await _prefs.setString('medical_height', _heightController.text);\n     await _prefs.setString('medical_weight', _weightController.text);\n     await _prefs.setString('medical_bmi', _bmiController.text);\n     await _prefs.setString('medical_allergies', _allergiesController.text);\n@@ -84,14 +103,16 @@\n     await _prefs.setString('medical_conditions', _conditionsController.text);\n     await _prefs.setBool('hasSubmittedForm', true);\n \n     setState(() => _isEditing = false);\n-    ScaffoldMessenger.of(context).showSnackBar(\n-      const SnackBar(\n-        content: Text('Medical information saved successfully'),\n-        backgroundColor: Colors.green,\n-      ),\n-    );\n+    if (mounted) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Medical information saved successfully'),\n+          backgroundColor: Colors.green,\n+        ),\n+      );\n+    }\n   }\n \n   Widget _buildSectionCard({\n     required String title,\n@@ -125,11 +146,13 @@\n   }\n \n   Widget _buildInfoRow({\n     required String label,\n-    required TextEditingController controller,\n+    required dynamic controller,\n     bool isRequired = true,\n     TextInputType keyboardType = TextInputType.text,\n+    bool isDropdown = false,\n+    List<String>? items,\n   }) {\n     return Padding(\n       padding: const EdgeInsets.symmetric(vertical: 8),\n       child: Column(\n@@ -142,48 +165,94 @@\n               color: Colors.black54,\n             ),\n           ),\n           const SizedBox(height: 4),\n-          _isEditing\n-              ? TextFormField(\n-                  controller: controller,\n-                  keyboardType: keyboardType,\n-                  decoration: InputDecoration(\n-                    hintText: 'Enter $label',\n-                    border: OutlineInputBorder(\n-                      borderRadius: BorderRadius.circular(8),\n-                    ),\n-                    contentPadding: const EdgeInsets.symmetric(\n-                      horizontal: 12,\n-                      vertical: 8,\n-                    ),\n-                  ),\n-                  validator: (value) {\n-                    if (isRequired && (value == null || value.isEmpty)) {\n-                      return 'Please enter $label';\n-                    }\n-                    return null;\n-                  },\n-                )\n-              : Container(\n-                  padding: const EdgeInsets.symmetric(\n-                    horizontal: 12,\n-                    vertical: 8,\n-                  ),\n-                  decoration: BoxDecoration(\n-                    border: Border.all(color: const Color(0xFFE0E0E0)),\n-                    borderRadius: BorderRadius.circular(8),\n-                  ),\n+          if (_isEditing && !isDropdown)\n+            TextFormField(\n+              controller: controller as TextEditingController,\n+              keyboardType: keyboardType,\n+              decoration: InputDecoration(\n+                hintText: 'Enter $label',\n+                border: OutlineInputBorder(\n+                  borderRadius: BorderRadius.circular(8),\n+                ),\n+                contentPadding: const EdgeInsets.symmetric(\n+                  horizontal: 12,\n+                  vertical: 8,\n+                ),\n+              ),\n+              validator: (value) {\n+                if (isRequired && (value == null || value.isEmpty)) {\n+                  return 'Please enter $label';\n+                }\n+                return null;\n+              },\n+            )\n+          else if (_isEditing && isDropdown)\n+            DropdownButtonFormField<String>(\n+              value: controller as String?,\n+              decoration: InputDecoration(\n+                hintText: 'Select $label',\n+                border: OutlineInputBorder(\n+                  borderRadius: BorderRadius.circular(8),\n+                ),\n+                contentPadding: const EdgeInsets.symmetric(\n+                  horizontal: 12,\n+                  vertical: 8,\n+                ),\n+              ),\n+              items: items?.map((String item) {\n+                return DropdownMenuItem<String>(\n+                  value: item,\n                   child: Text(\n-                    controller.text.isEmpty ? 'Not set' : controller.text,\n+                    item,\n                     style: GoogleFonts.poppins(\n                       fontSize: 16,\n-                      color: controller.text.isEmpty\n-                          ? Colors.black38\n-                          : Colors.black87,\n+                      color: Colors.black87,\n                     ),\n                   ),\n+                );\n+              }).toList(),\n+              onChanged: (String? value) {\n+                setState(() {\n+                  if (label == 'Gender') {\n+                    _selectedGender = value;\n+                  } else if (label == 'Blood Group') {\n+                    _selectedBloodGroup = value;\n+                  }\n+                });\n+              },\n+              validator: isRequired\n+                  ? (value) {\n+                      if (value == null || value.isEmpty) {\n+                        return 'Please select $label';\n+                      }\n+                      return null;\n+                    }\n+                  : null,\n+            )\n+          else\n+            Container(\n+              padding: const EdgeInsets.symmetric(\n+                horizontal: 12,\n+                vertical: 8,\n+              ),\n+              decoration: BoxDecoration(\n+                border: Border.all(color: const Color(0xFFE0E0E0)),\n+                borderRadius: BorderRadius.circular(8),\n+              ),\n+              child: Text(\n+                isDropdown\n+                    ? (controller as String? ?? 'Not set')\n+                    : (controller.text.isEmpty ? 'Not set' : controller.text),\n+                style: GoogleFonts.poppins(\n+                  fontSize: 16,\n+                  color: (isDropdown ? controller == null : controller.text.isEmpty)\n+                      ? Colors.black38\n+                      : Colors.black87,\n                 ),\n+              ),\n+            ),\n         ],\n       ),\n     );\n   }\n@@ -240,13 +309,17 @@\n                     keyboardType: TextInputType.number,\n                   ),\n                   _buildInfoRow(\n                     label: 'Gender',\n-                    controller: _genderController,\n+                    controller: _selectedGender,\n+                    isDropdown: true,\n+                    items: _genders,\n                   ),\n                   _buildInfoRow(\n                     label: 'Blood Group',\n-                    controller: _bloodGroupController,\n+                    controller: _selectedBloodGroup,\n+                    isDropdown: true,\n+                    items: _bloodGroups,\n                   ),\n                 ],\n               ),\n               const SizedBox(height: 20),\n"
                },
                {
                    "date": 1744639836819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,10 +85,27 @@\n     _prefs = await SharedPreferences.getInstance();\n     setState(() {\n       _nameController.text = _prefs.getString('medical_name') ?? '';\n       _ageController.text = _prefs.getString('medical_age') ?? '';\n-      _selectedGender = _prefs.getString('medical_gender');\n-      _selectedBloodGroup = _prefs.getString('medical_blood_group');\n+      \n+      // Load gender and ensure it matches our list\n+      String? storedGender = _prefs.getString('medical_gender');\n+      if (storedGender != null) {\n+        _selectedGender = _genders.firstWhere(\n+          (gender) => gender.toLowerCase() == storedGender.toLowerCase(),\n+          orElse: () => _genders[0],\n+        );\n+      }\n+      \n+      // Load blood group and ensure it matches our list\n+      String? storedBloodGroup = _prefs.getString('medical_blood_group');\n+      if (storedBloodGroup != null) {\n+        _selectedBloodGroup = _bloodGroups.firstWhere(\n+          (blood) => blood.toUpperCase() == storedBloodGroup.toUpperCase(),\n+          orElse: () => _bloodGroups[0],\n+        );\n+      }\n+      \n       _heightController.text = _prefs.getString('medical_height') ?? '';\n       _weightController.text = _prefs.getString('medical_weight') ?? '';\n       _bmiController.text = _prefs.getString('medical_bmi') ?? '';\n       _allergiesController.text = _prefs.getString('medical_allergies') ?? '';\n"
                }
            ],
            "date": 1744490415268,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:shared_preferences.dart';\r\n\r\nclass MedicalSummary extends StatefulWidget {\r\n  const MedicalSummary({super.key});\r\n\r\n  @override\r\n  State<MedicalSummary> createState() => _MedicalSummaryState();\r\n}\r\n\r\nclass _MedicalSummaryState extends State<MedicalSummary> {\r\n  Map<String, String> _medicalData = {};\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadMedicalData();\r\n  }\r\n\r\n  Future<void> _loadMedicalData() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    setState(() {\r\n      _medicalData = {\r\n        'name': prefs.getString('name') ?? 'Not provided',\r\n        'age': prefs.getString('age') ?? 'Not provided',\r\n        'bloodGroup': prefs.getString('bloodGroup') ?? 'Not provided',\r\n        'height': prefs.getString('height') ?? 'Not provided',\r\n        'weight': prefs.getString('weight') ?? 'Not provided',\r\n        'allergies': prefs.getString('allergies') ?? 'None',\r\n        'medicalHistory': prefs.getString('medicalHistory') ?? 'None',\r\n        'medications': prefs.getString('medications') ?? 'None',\r\n      };\r\n    });\r\n  }\r\n\r\n  Widget _buildInfoCard(String title, String value) {\r\n    return Card(\r\n      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              title,\r\n              style: const TextStyle(\r\n                fontSize: 16,\r\n                fontWeight: FontWeight.bold,\r\n                color: Colors.teal,\r\n              ),\r\n            ),\r\n            const SizedBox(height: 8),\r\n            Text(\r\n              value,\r\n              style: const TextStyle(fontSize: 16),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Medical Summary'),\r\n        backgroundColor: Colors.teal,\r\n      ),\r\n      body: ListView(\r\n        children: [\r\n          _buildInfoCard('Name', _medicalData['name']!),\r\n          _buildInfoCard('Age', _medicalData['age']!),\r\n          _buildInfoCard('Blood Group', _medicalData['bloodGroup']!),\r\n          _buildInfoCard('Height', '${_medicalData['height']!} cm'),\r\n          _buildInfoCard('Weight', '${_medicalData['weight']!} kg'),\r\n          _buildInfoCard('Allergies', _medicalData['allergies']!),\r\n          _buildInfoCard('Medical History', _medicalData['medicalHistory']!),\r\n          _buildInfoCard('Current Medications', _medicalData['medications']!),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}
{
    "sourceFile": "lib/services/firestore_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744652295669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744652303756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,10 @@\n   }\r\n \r\n   // Get chat messages stream\r\n   Stream<QuerySnapshot> getChatMessages() {\r\n-    return _userDoc.collection('chats')\r\n+    return _userDoc\r\n+        .collection('chats')\r\n         .orderBy('timestamp', descending: false)\r\n         .snapshots();\r\n   }\r\n \r\n@@ -42,9 +43,10 @@\n \r\n   // Get medical data\r\n   Future<Map<String, dynamic>?> getMedicalData() async {\r\n     final doc = await _userDoc.get();\r\n-    return doc.data()?['medicalData'] as Map<String, dynamic>?;\r\n+    final data = doc.data() as Map<String, dynamic>?;\r\n+    return data?['medicalData'] as Map<String, dynamic>?;\r\n   }\r\n \r\n   // Save user preferences\r\n   Future<void> saveUserPreferences(Map<String, dynamic> preferences) async {\r\n@@ -56,9 +58,10 @@\n \r\n   // Get user preferences\r\n   Future<Map<String, dynamic>?> getUserPreferences() async {\r\n     final doc = await _userDoc.get();\r\n-    return doc.data()?['preferences'] as Map<String, dynamic>?;\r\n+    final data = doc.data() as Map<String, dynamic>?;\r\n+    return data?['preferences'] as Map<String, dynamic>?;\r\n   }\r\n \r\n   // Save notifications\r\n   Future<void> saveNotification(Map<String, dynamic> notification) async {\r\n@@ -70,9 +73,10 @@\n   }\r\n \r\n   // Get notifications\r\n   Stream<QuerySnapshot> getNotifications() {\r\n-    return _userDoc.collection('notifications')\r\n+    return _userDoc\r\n+        .collection('notifications')\r\n         .orderBy('timestamp', descending: true)\r\n         .snapshots();\r\n   }\r\n \r\n@@ -81,5 +85,5 @@\n     await _userDoc.collection('notifications').doc(notificationId).update({\r\n       'read': true,\r\n     });\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1744652295669,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\n\r\nclass FirestoreService {\r\n  static final FirestoreService _instance = FirestoreService._internal();\r\n  factory FirestoreService() => _instance;\r\n  FirestoreService._internal();\r\n\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n\r\n  // Get user document reference\r\n  DocumentReference get _userDoc {\r\n    final user = _auth.currentUser;\r\n    if (user == null) throw Exception('User not authenticated');\r\n    return _firestore.collection('users').doc(user.uid);\r\n  }\r\n\r\n  // Save chat messages\r\n  Future<void> saveChatMessage(String text, bool isUser) async {\r\n    await _userDoc.collection('chats').add({\r\n      'text': text,\r\n      'isUser': isUser,\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n    });\r\n  }\r\n\r\n  // Get chat messages stream\r\n  Stream<QuerySnapshot> getChatMessages() {\r\n    return _userDoc.collection('chats')\r\n        .orderBy('timestamp', descending: false)\r\n        .snapshots();\r\n  }\r\n\r\n  // Save medical data\r\n  Future<void> saveMedicalData(Map<String, dynamic> data) async {\r\n    await _userDoc.set({\r\n      'medicalData': data,\r\n      'lastUpdated': FieldValue.serverTimestamp(),\r\n    }, SetOptions(merge: true));\r\n  }\r\n\r\n  // Get medical data\r\n  Future<Map<String, dynamic>?> getMedicalData() async {\r\n    final doc = await _userDoc.get();\r\n    return doc.data()?['medicalData'] as Map<String, dynamic>?;\r\n  }\r\n\r\n  // Save user preferences\r\n  Future<void> saveUserPreferences(Map<String, dynamic> preferences) async {\r\n    await _userDoc.set({\r\n      'preferences': preferences,\r\n      'lastUpdated': FieldValue.serverTimestamp(),\r\n    }, SetOptions(merge: true));\r\n  }\r\n\r\n  // Get user preferences\r\n  Future<Map<String, dynamic>?> getUserPreferences() async {\r\n    final doc = await _userDoc.get();\r\n    return doc.data()?['preferences'] as Map<String, dynamic>?;\r\n  }\r\n\r\n  // Save notifications\r\n  Future<void> saveNotification(Map<String, dynamic> notification) async {\r\n    await _userDoc.collection('notifications').add({\r\n      ...notification,\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n      'read': false,\r\n    });\r\n  }\r\n\r\n  // Get notifications\r\n  Stream<QuerySnapshot> getNotifications() {\r\n    return _userDoc.collection('notifications')\r\n        .orderBy('timestamp', descending: true)\r\n        .snapshots();\r\n  }\r\n\r\n  // Mark notification as read\r\n  Future<void> markNotificationAsRead(String notificationId) async {\r\n    await _userDoc.collection('notifications').doc(notificationId).update({\r\n      'read': true,\r\n    });\r\n  }\r\n} "
        }
    ]
}
{
    "sourceFile": "lib/services/medical_history_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1744547911266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744547974718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n+\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import '../models/patient_profile.dart';\r\n import 'ai_service.dart';\r\n \r\n@@ -12,12 +12,13 @@\n     final user = _auth.currentUser;\r\n     if (user == null) return null;\r\n \r\n     try {\r\n-      final doc = await _firestore\r\n-          .collection('patient_profiles')\r\n-          .where('userId', isEqualTo: user.uid)\r\n-          .get();\r\n+      final doc =\r\n+          await _firestore\r\n+              .collection('patient_profiles')\r\n+              .where('userId', isEqualTo: user.uid)\r\n+              .get();\r\n \r\n       if (doc.docs.isEmpty) return null;\r\n       return PatientProfile.fromFirestore(doc.docs.first);\r\n     } catch (e) {\r\n@@ -93,5 +94,5 @@\n       print('Error saving medical report: $e');\r\n       rethrow;\r\n     }\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744547980965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import '../models/patient_profile.dart';\r\n import 'ai_service.dart';\r\n \r\n"
                },
                {
                    "date": 1744617257632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import '../models/patient_profile.dart';\r\n-import 'ai_service.dart';\r\n \r\n+\r\n class MedicalHistoryService {\r\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n   final FirebaseAuth _auth = FirebaseAuth.instance;\r\n   final AIService _aiService = AIService();\r\n"
                },
                {
                    "date": 1744618311029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,20 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:medi_flow_new/chatbot.dart';\r\n import '../models/patient_profile.dart';\r\n+import 'dart:async';\r\n \r\n \r\n class MedicalHistoryService {\r\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n   final FirebaseAuth _auth = FirebaseAuth.instance;\r\n   final AIService _aiService = AIService();\r\n+  \r\n+  // Add a stream controller for reports\r\n+  final _reportsController = StreamController<List<MedicalReport>>.broadcast();\r\n+  \r\n+  Stream<List<MedicalReport>> get reportsStream => _reportsController.stream;\r\n \r\n   Future<PatientProfile?> getPatientProfile() async {\r\n     final user = _auth.currentUser;\r\n     if (user == null) return null;\r\n@@ -82,18 +88,31 @@\n   }\r\n \r\n   Future<void> saveMedicalReport(MedicalReport report) async {\r\n     try {\r\n+      final user = _auth.currentUser;\r\n+      if (user == null) throw Exception('User not authenticated');\r\n+\r\n       final profile = await getPatientProfile();\r\n       if (profile == null) throw Exception('Patient profile not found');\r\n \r\n+      // Add the new report to the list\r\n       final updatedReports = [...profile.reports, report];\r\n-      await _firestore.collection('patient_profiles').doc(profile.id).update({\r\n-        'reports': updatedReports.map((r) => r.toMap()).toList(),\r\n-        'updatedAt': FieldValue.serverTimestamp(),\r\n-      });\r\n+      \r\n+      // Update the reports in Firestore\r\n+      await _firestore\r\n+          .collection('patient_profiles')\r\n+          .doc(user.uid)\r\n+          .update({'reports': updatedReports.map((r) => r.toMap()).toList()});\r\n+      \r\n+      // Emit the updated reports through the stream\r\n+      _reportsController.add(updatedReports);\r\n     } catch (e) {\r\n-      print('Error saving medical report: $e');\r\n-      rethrow;\r\n+      throw Exception('Failed to save medical report: $e');\r\n     }\r\n   }\r\n+\r\n+  // Add a dispose method to clean up the stream controller\r\n+  void dispose() {\r\n+    _reportsController.close();\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1744619135067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,25 +8,54 @@\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n   final FirebaseAuth _auth = FirebaseAuth.instance;\r\n   final AIService _aiService = AIService();\r\n \r\n-  // Add a stream controller for reports\r\n+  // Add a stream controller for reports (if needed elsewhere)\r\n   final _reportsController = StreamController<List<MedicalReport>>.broadcast();\r\n \r\n-  Stream<List<MedicalReport>> get reportsStream => _reportsController.stream;\r\n+  // Method to save a chat message in its own Firestore collection\r\n+  Future<void> saveChatMessage(MedicalReport report) async {\r\n+    final user = _auth.currentUser;\r\n+    if (user == null) throw Exception('User not authenticated');\r\n \r\n+    try {\r\n+      // Save under a dedicated 'chat_history' collection with a subcollection 'reports'\r\n+      await _firestore\r\n+          .collection('chat_history')\r\n+          .doc(user.uid)\r\n+          .collection('reports')\r\n+          .add(report.toMap());\r\n+    } catch (e) {\r\n+      throw Exception('Failed to save chat history: $e');\r\n+    }\r\n+  }\r\n+\r\n+  // Method to get a stream of chat history for the current user\r\n+  Stream<List<MedicalReport>> getChatHistoryStream() {\r\n+    final user = _auth.currentUser;\r\n+    if (user == null) throw Exception('User not authenticated');\r\n+\r\n+    return _firestore\r\n+        .collection('chat_history')\r\n+        .doc(user.uid)\r\n+        .collection('reports')\r\n+        .orderBy('date', descending: true)\r\n+        .snapshots()\r\n+        .map((snapshot) => snapshot.docs\r\n+            .map((doc) => MedicalReport.fromFirestore(doc))\r\n+            .toList());\r\n+  }\r\n+\r\n+  // Retain other methods if needed for different functionalities\r\n+\r\n   Future<PatientProfile?> getPatientProfile() async {\r\n     final user = _auth.currentUser;\r\n     if (user == null) return null;\r\n \r\n     try {\r\n-      final doc = await _firestore\r\n-          .collection('patient_profiles')\r\n-          .where('userId', isEqualTo: user.uid)\r\n-          .get();\r\n-\r\n-      if (doc.docs.isEmpty) return null;\r\n-      return PatientProfile.fromFirestore(doc.docs.first);\r\n+      final doc = await _firestore.collection('patient_profiles').doc(user.uid).get();\r\n+      if (!doc.exists) return null;\r\n+      return PatientProfile.fromFirestore(doc);\r\n     } catch (e) {\r\n       print('Error getting patient profile: $e');\r\n       return null;\r\n     }\r\n@@ -84,33 +113,8 @@\n     Do not provide diagnoses or specific treatment recommendations.\r\n     ''';\r\n   }\r\n \r\n-  Future<void> saveMedicalReport(MedicalReport report) async {\r\n-    try {\r\n-      final user = _auth.currentUser;\r\n-      if (user == null) throw Exception('User not authenticated');\r\n-\r\n-      final profile = await getPatientProfile();\r\n-      if (profile == null) throw Exception('Patient profile not found');\r\n-\r\n-      // Add the new report to the list\r\n-      final updatedReports = [...profile.reports, report];\r\n-\r\n-      // Update the reports in Firestore\r\n-      await _firestore\r\n-          .collection('patient_profiles')\r\n-          .doc(user.uid)\r\n-          .update({'reports': updatedReports.map((r) => r.toMap()).toList()});\r\n-\r\n-      // Emit the updated reports through the stream\r\n-      _reportsController.add(updatedReports);\r\n-    } catch (e) {\r\n-      throw Exception('Failed to save medical report: $e');\r\n-    }\r\n-  }\r\n-\r\n-  // Add a dispose method to clean up the stream controller\r\n   void dispose() {\r\n     _reportsController.close();\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1744547911266,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport '../models/patient_profile.dart';\r\nimport 'ai_service.dart';\r\n\r\nclass MedicalHistoryService {\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n  final AIService _aiService = AIService();\r\n\r\n  Future<PatientProfile?> getPatientProfile() async {\r\n    final user = _auth.currentUser;\r\n    if (user == null) return null;\r\n\r\n    try {\r\n      final doc = await _firestore\r\n          .collection('patient_profiles')\r\n          .where('userId', isEqualTo: user.uid)\r\n          .get();\r\n\r\n      if (doc.docs.isEmpty) return null;\r\n      return PatientProfile.fromFirestore(doc.docs.first);\r\n    } catch (e) {\r\n      print('Error getting patient profile: $e');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  Future<void> savePatientProfile(PatientProfile profile) async {\r\n    try {\r\n      await _firestore\r\n          .collection('patient_profiles')\r\n          .doc(profile.id)\r\n          .set(profile.toMap());\r\n    } catch (e) {\r\n      print('Error saving patient profile: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  Future<String> collectMedicalHistory(Map<String, dynamic> responses) async {\r\n    try {\r\n      final prompt = _buildMedicalHistoryPrompt(responses);\r\n      final response = await _aiService.sendTextMessage(prompt);\r\n      return response ?? 'No response from AI service';\r\n    } catch (e) {\r\n      print('Error collecting medical history: $e');\r\n      return 'Error collecting medical history';\r\n    }\r\n  }\r\n\r\n  String _buildMedicalHistoryPrompt(Map<String, dynamic> responses) {\r\n    return '''\r\n    Based on the following patient responses, generate a structured medical history report:\r\n    \r\n    Personal Information:\r\n    - Name: ${responses['name']}\r\n    - Age: ${responses['age']}\r\n    - Gender: ${responses['gender']}\r\n    \r\n    Medical History:\r\n    - Current Medications: ${responses['medications']}\r\n    - Known Conditions: ${responses['conditions']}\r\n    - Allergies: ${responses['allergies']}\r\n    \r\n    Current Symptoms:\r\n    - Main Symptom: ${responses['mainSymptom']}\r\n    - Duration: ${responses['duration']}\r\n    - Severity: ${responses['severity']}\r\n    - Associated Symptoms: ${responses['associatedSymptoms']}\r\n    \r\n    Please provide:\r\n    1. A structured summary of the information\r\n    2. Relevant medical context\r\n    3. Suggestions for next steps\r\n    4. Any red flags that need immediate attention\r\n    \r\n    Do not provide diagnoses or specific treatment recommendations.\r\n    ''';\r\n  }\r\n\r\n  Future<void> saveMedicalReport(MedicalReport report) async {\r\n    try {\r\n      final profile = await getPatientProfile();\r\n      if (profile == null) throw Exception('Patient profile not found');\r\n\r\n      final updatedReports = [...profile.reports, report];\r\n      await _firestore.collection('patient_profiles').doc(profile.id).update({\r\n        'reports': updatedReports.map((r) => r.toMap()).toList(),\r\n        'updatedAt': FieldValue.serverTimestamp(),\r\n      });\r\n    } catch (e) {\r\n      print('Error saving medical report: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n} "
        }
    ]
}